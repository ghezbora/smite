#!/usr/bin/perl


# Wish list
#
# make avg damage include only attack damage, not ability damage
#

use strict;
use warnings;

use Getopt::Std;



my %opts;

getopts('vl:t:p:h:g:i:', \%opts);

my $char_level = 20;
if (defined $opts{'l'} ) { $char_level = $opts{'l'}; }

my $verbose = 0;
if ( defined $opts{'v'} ) { $verbose = 1; }

my @items = split( /\s/, $opts{ 'i' } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}







my %ability_stats = (
    "cooldown" => {
        "crush" => 10,
        "sic_em" => 10,
        "sentinel" => 15,
        "im_a_monster" => 90,

        "shadow_lock" => 10,
        "siphon_darkness" => 15,
        "shadow_step" => 15,
        "night_terror" => 90,
    },
    "time" => { # will be updated with cooldown when used
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 0,
    },
    "damage" => {
        "crush" => [ 0, 90, 140, 190, 240, 290 ],
        "sic_em" => [ 0, 60, 110, 160, 210, 260 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 400, 500, 600, 700, 800 ],

        "shadow_lock" => [ 0, 0, 0, 0, 0, 0 ],
        "siphon_darkness" => [ 0, 90, 160, 230, 300, 370 ],
        "shadow_step" => [ 0, 70, 110, 150, 190, 230 ],
        "night_terror" => [ 0, 200, 250, 300, 350, 400 ],
    },
    "tick_damage" => {
        "crush" => [ 0, 0, 0, 0, 0, 0 ],
        "sic_em" => [ 0, 0, 0, 0, 0, 0 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 0, 0, 0, 0, 0 ],

        "shadow_lock" => [ 0, 30, 40, 50, 60, 70 ],
        "siphon_darkness" => [ 0, 0, 0, 0, 0, 0 ],
        "shadow_step" => [ 0, 0, 0, 0, 0, 0 ],
        "night_terror" => [ 0, 20, 25, 30, 35, 40 ],
    },
    "scaling" => {
        "crush" => 0.8,
        "sic_em" => 0.6,
        "sentinel" => 0,
        "im_a_monster" => 1.2,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 0.4,
        "night_terror" => .6,
    },
    "tick_scaling" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 0.2,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => .05,
    },
    "tick_duration" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => .5,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 1,
    },
    "num_ticks" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 4,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 5,
    },
    "level" => {
        "crush" => 5,
        "sic_em" => 5,
        "sentinel" => 5,
        "im_a_monster" => 5,

        "shadow_lock" => 5,
        "siphon_darkness" => 5,
        "shadow_step" => 5,
        "night_terror" => 5,
    },
    "order" => {
        "crush" => 2,
        "sic_em" => 1,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "irradiate" => 0,
        "pulse" => 0,
        "banish" => 0,
        "valkyries_discretion" => 0,

        "radiance" => 0,
        "stellar_burst" => 0,
        "disapparate" => 0,
        "supernova" => 0,

        "shadow_lock" => 1,
        "siphon_darkness" => 2,
        "shadow_step" => 0,
        "night_terror" => 0,
    },
);




my %abilities = (
    "scylla" => [ "sic_em", "crush", "sentinel", "im_a_monster" ],
    "nox" => [ "shadow_lock", "siphon_darkness", "shadow_step", "night_terror" ],
    "freya" => [ "irradiate", "pulse", "banish", "valkyries_discretion" ],
    "sol" => [ "radiance", "stellar_burst", "disapparate", "supernova" ],
);






my %base_stats = (
    "attack_rate" => {
        "freya" => 0.95,
        "sol" => 1,
        "scylla" => 1,
        "nox" => 1,
    },
    "attack_rate_level_scaling" => {
        "freya" => 0.0195,
        "sol" => 0.018,
        "scylla" => 0.008,
        "nox" => 0.008,
    },
    "auto_damage" => {
        "freya" => 35,
        "sol" => 34,
        "scylla" => 34,
        "nox" => 34,
    },
    "auto_level_scaling" => {
        "freya" => 1.5,
        "sol" => 1.45,
        "scylla" => 1.45,
        "nox" => 1.5,
    },
    "mana" => {
        "freya" => 220,
        "sol" => 300,
        "scylla" => 298,
        "nox" => 250,
    },
    "mana_level_scaling" => {
        "freya" => 37,
        "sol" => 57,
        "scylla" => 56,
        "nox" => 38,
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
        "scylla" => [ 1 ],
        "nox" => [ 1 ],
    },
);



my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ 'g' } } };
my $next_attack_chain = 0;

my %messages_to_print;

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ 'g' } }
        * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
my $mana = $base_stats{ "mana" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "mana_level_scaling" }->{ $opts{ 'g' } };

#print "attack rate $attack_rate\n";

my $damage = 0;
my $attack_damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;
my $gold = 0;

my $magical_power = 0;
my $lifesteal = 0;
if ( $opts{ 'g' } eq "freya" ) { $lifesteal += 0.15; }
my $cdr = 0;

my $their_protection = 30 + 18 + 20 + 50 + 50; # athena with HW, Sov, Void Stone
if ( defined $opts{'p'} ) {
    $their_protection = $opts{'p'};
}

my $their_health = 400 + 20 * 75 + 250; #sol with MoR
if ( defined $opts{ 'h' } ) {
    $their_health = $opts{ 'h' };
}

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;


if (defined $items{"pen_boots"}) {
    $magical_power += 45;
    $flat_pen += 10;
    $gold += 1700;
}

if (defined $items{"cooldown_boots"}) {
    $magical_power += 30;
    $cdr += 0.15;
    $mana += 250;
    $gold += 1600;
}

if (defined $items{"void_stone"}) {
    $magical_power += 40;
    $flat_reduction += 15;
    $gold += 2350;
}

if (defined $items{"demonic_grip"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.25;
    $magical_power += 60;
    $gold += 2280;
}
my $demonic_grip_stacks = 0;
my $demonic_grip_end = 0;

if (defined $items{"telkhines_ring"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.1;
    $magical_power += 45;
    $gold += 2125;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.3;
    $gold += 2140;
}

if (defined $items{"polynomicon"}) {
    $magical_power += 75;
    $mana += 300;
    $lifesteal += .1;
    $gold += 2300;
}
my $has_polynomicon_buff = 0;

if (defined $items{"spear"}) {
    $magical_power += 45;
    $flat_pen += 15;
    $gold += 2150;
}
my $spear_stacks = 0;
my $spear_end = 0;

if (defined $items{"shard"}) {
    $magical_power += 70;
    $percent_pen += .33;
    $gold += 2050;
}

if (defined $items{"bancrofts"}) {
    $magical_power += 100;
    $lifesteal += .12;
    $gold += 2400;
}

if (defined $items{"rod"}) {
    $magical_power += 125;
    $gold += 3320;
}

if (defined $items{"chronos"}) {
    $magical_power += 75;
    $cdr += 0.25;
    $gold += 2400;
}

if (defined $items{"pythagorems"}) {
    $magical_power += 90;
    $lifesteal += .25;
    $cdr += 0.1;
    $gold += 2600;
}

if (defined $items{"book"}) {
    $mana += 875;
    $magical_power += 100 + 0.03 * $mana;
    $gold += 2650;
}

if (defined $items{"gem"} ) {
    $magical_power += 70;
    $mana += 250;
    $gold += 2850;
}





#print "attack rate $attack_rate\n";

if ($cdr > 0.4) { $cdr = 0.4; }

if ($attack_rate > 2.5) { $attack_rate = 2.5; }

if ( $opts{'g'} eq "scylla" ) {
    if ( $ability_stats{ "level" }->{ "crush" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sic_em" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "im_a_monster" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sentinel" } == 5 ) { $magical_power += 20; }
}

my $eff_magical_power = $magical_power;

if (defined $items{"rod"}) { $eff_magical_power *= 1.25; }

print "effective magical power $eff_magical_power\n";

my $base_damage = $base_stats{ "auto_damage" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
        + 0.2 * $eff_magical_power;
my $attack_duration = int(1000 / $attack_rate);


my $iteration = 0;
my $max_iterations = 1; # no crits, no RNG
my $max_time = 5000;
if (defined $opts{'t'}) { $max_time = $opts{'t'}; }




sub calc_mitigated_damage( $ $ ) {

    my $pre_prot_damage = shift;
    my $damage_source = shift;

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot *= (1 - 0.1*$spear_stacks);
    $their_eff_prot *= (1 - 0.07*$demonic_grip_stacks);
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot -= 10*$spear_stacks;
    $their_eff_prot -= 5*$demonic_grip_stacks;
    $their_eff_prot *= (1 - $percent_pen);
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;


    if ( $verbose ) {
        printf "time %6d damage from %16s their prot %4d -> %4d damage %4d -> %4d ",
                $time, $damage_source, $their_protection, $their_eff_prot, $pre_prot_damage, int(( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage);
        if ( defined $items{ "spear" } ) {
            print " $spear_stacks spear stacks "
        }
        if ( defined $items{ "demonic_grip" } ) {
            print " $demonic_grip_stacks demonic grip stacks";
        }
        print "\n";
    }
    
    return $damage;

}





my $has_irradiate = 0;
my $has_pulse = 0;
my $irradiate_end = 0;
my $pulse_end = 0;

my $heat = 0;
my $radiance_time = 0;
my $radiance_level = 5;
my @radiance_heat_amount = ( 0, 40, 50, 60, 70, 80 );
my $stellar_burst_time = 0;
my $stellar_burst_detonate_time = $stellar_burst_time + 100;
my $stellar_burst_level = 5;
my @stellar_burst_damage = ( 0, 40, 70, 100, 130, 160 );

my $polynomicon_procs = 0;
my $polynomicon_damage = 0;
my $polynomicon_time = 0;

my $shadow_lock_ticks_left = 0;
my $shadow_lock_next_tick = 0;
my $night_terror_ticks_left = 0;
my $night_terror_next_tick = 0;

my %ticks = ();

my $combo_order_idx = 1;
my $next_skill;



sub get_next_skill() {
    my $i = 0;
    while($i < 4) {
        if ( $ability_stats{ "order" }->{ $abilities{ $opts{'g'} }->[ $i ] } == $combo_order_idx ) {
            # found next skill
            $next_skill = $abilities{ $opts{'g'} }->[ $i ];
            return;
        }
        $i++;
    }
}


while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        undef $next_skill;
        get_next_skill();
        if( not defined $next_skill ) {
            $combo_order_idx = 1; # reset combo
            get_next_skill();
        }

        if ( defined $next_skill ) {
            if ( $time >= $ability_stats{ "time" }->{ $next_skill } ) {
                # time to use next ability

                my $pre_prot_damage = $ability_stats{ "damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill } ] +
                        ($eff_magical_power * $ability_stats{ "scaling" }->{ $next_skill });
                if( $pre_prot_damage > 0 ) { 
                    $damage += calc_mitigated_damage( $pre_prot_damage, $next_skill );
                    if(defined $items{"spear"}) {
                        $spear_stacks++;
                        $spear_end = $time + 5000;
                        if ($spear_stacks > 2) { $spear_stacks = 2; }
                    }
                }

                $pre_prot_damage = $ability_stats{ "tick_damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill } ] +
                        ($eff_magical_power * $ability_stats{ "tick_scaling" }->{ $next_skill });
                if( $pre_prot_damage > 0 ) { 
                    # this ability has ticks, schedule them
                    my $i = 0;
                    while ( $i < $ability_stats{ "num_ticks" }->{ $next_skill } ) {

                        my $tick_time = $time + ($i + 1) * $ability_stats{ "tick_duration" }->{ $next_skill } * 1000;
                        while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                        $ticks{ $tick_time } = $pre_prot_damage;

                        $i++;
                    }
                }

                $ability_stats{ "time" }->{ $next_skill } = $time +
                        (1000*($ability_stats{ "cooldown" }->{ $next_skill } * (1 - $cdr)));

                $combo_order_idx++;
            }
        }

        if ( defined $ticks{ $time } ) {
            $damage += calc_mitigated_damage( $ticks{ $time }, "tick" );
            if(defined $items{"spear"}) {
                $spear_stacks++;
                $spear_end = $time + 5000;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }
        }
        
        if ($opts{'g'} eq "freya" and $time == 0) {
            $has_irradiate = 1;
            $has_pulse = 1;
            $irradiate_end = $time + 5000;
            $pulse_end = $time + 5000;
            if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                $has_polynomicon_buff = 1;
                $polynomicon_time = $time + 3000;
            }
        }

        if ($opts{'g'} eq "sol" and $time == $stellar_burst_detonate_time) {
            # second blast, the time is probably not 100 but it's before the next attack
            my $pre_prot_damage = $stellar_burst_damage[ $stellar_burst_level ] + 0.35 * $eff_magical_power;
            $damage += calc_mitigated_damage( $pre_prot_damage, "stellar burst" );

            if(defined $items{"spear"}) {
                $spear_stacks++;
                $spear_end = $time + 5000;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }

            $heat += 10;
        }

        if ($opts{'g'} eq "sol" and $time == $radiance_time) {
            $heat += $radiance_heat_amount[ $radiance_level ];
            if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                $has_polynomicon_buff = 1;
            }
            $radiance_time += 15000;
        }

        if ( $time == $next_attack ) {

            my $effective_base_damage = $base_damage;

            my $heat_eff_magical_power;
            if ( $opts{ 'g' } eq "sol" ) {
                $heat_eff_magical_power = $eff_magical_power +
                    int(0.25 * $heat * $magical_power / 100);
            }
            else
            {
                $heat_eff_magical_power = $eff_magical_power;
            }
            $messages_to_print{ "heat effective magical power" } = $heat_eff_magical_power;

            my $pre_prot_damage = 0;

            my $heat_eff_base_damage = $base_stats{ "auto_damage" }->{ $opts{ 'g' } }
                    + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
                    + 0.2 * $heat_eff_magical_power;
            $pre_prot_damage += $heat_eff_base_damage;

            if ($has_pulse) {
                $pre_prot_damage += 60 + 0.15 * $heat_eff_magical_power;
            }

            if ($has_irradiate) {
                $pre_prot_damage += 100 + 0.25 * $heat_eff_magical_power;
            }

            # apply sol's bonus only to her base damage, not to polynomicon / telkhines / etc.
            if ( $opts{ 'g' } eq "sol" and $heat == 100 ) { $pre_prot_damage *= 1.25; }

            if ($has_polynomicon_buff) {
                $pre_prot_damage += 0.6 * $heat_eff_magical_power;
                $polynomicon_procs++;
                $polynomicon_damage += 0.6 * $heat_eff_magical_power;
                $has_polynomicon_buff = 0;
                $polynomicon_time = $time + 3000;
            }

            if (defined $items{"telkhines_ring"}) {
                $pre_prot_damage += 40;
            }

            if ($opts{ 'g' } eq "sol" and $time >= $stellar_burst_time) { # stellar burst
                $pre_prot_damage += $stellar_burst_damage[ $stellar_burst_level ]
                        + 0.35 * $heat_eff_magical_power;
                if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                    $has_polynomicon_buff = 1;
                }
                if(defined $items{"spear"}) {
                    $spear_end = $time + 5000;
                    $spear_stacks++;
                    if ($spear_stacks > 2) { $spear_stacks = 2; }
                }
                $stellar_burst_time += 12000;
            }

            $damage += calc_mitigated_damage($pre_prot_damage, "attack");
            $attack_damage += calc_mitigated_damage($pre_prot_damage, "attack");

            # get ready for next attack
            if (defined $items{"spear"} and ($has_irradiate or $has_pulse)) {
                $spear_end = $time + 5000;
                $spear_stacks++;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }

            if (defined $items{"demonic_grip"}) {
                $demonic_grip_end = $time + 3000;
                $demonic_grip_stacks++;
                if ($demonic_grip_stacks > 3) { $demonic_grip_stacks = 3; }
            }

            # attack chain progression
            my $heat_attack_duration = $attack_duration;
            if ( $opts{ 'g' } eq "sol" ) {
                my $heat_attack_rate = $attack_rate + $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * ($heat * 0.25 * 0.012);
                if ( $heat_attack_rate > 2.5 ) { $heat_attack_rate = 2.5; }
                $messages_to_print{ "heat effective attack rate" } = $heat_attack_rate;
                $heat_attack_duration = int(1000 / $heat_attack_rate);
            }
            $next_attack = $time + int($heat_attack_duration * ${attack_chain_progression}[ $next_attack_chain ]);
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            $num_attacks++;

            $heat += 5;
            if ( $heat > 100 ) { $heat = 100; }
        }

        $time++;

        if ($time == $spear_end) { $spear_stacks = 0; }
        if ($time == $demonic_grip_end) { $demonic_grip_stacks = 0; }
        if ($time == $pulse_end) { $has_pulse = 0; }
        if ($time == $irradiate_end) { $has_irradiate = 0; }

    }

    # reset
    $time = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $spear_stacks = 0;
    $spear_end = 0;
    $demonic_grip_stacks = 0;
    $demonic_grip_end = 0;

    $iteration++;

}

foreach my $key (keys %messages_to_print) {
        print $key . " " . $messages_to_print{ $key} . "\n";
}

print "Base attack rate $attack_rate Base attack damage $base_damage\n";
printf "Num attacks: %d avg damage %.2f\n", $total_attacks/$max_iterations, ($attack_damage /$total_attacks);
printf "Total damage %.2f DPS %.2f\n", $damage/$max_iterations, ($damage / ($max_iterations*$max_time/1000));
printf "Damage from basic attacks %.2f Other damage %.2f\n", ($attack_damage/$max_iterations), (($damage - $attack_damage)/$max_iterations);
if ( defined $items{ "polynomicon" } ) {
    print "Polynomicon procs $polynomicon_procs polynomicon damage $polynomicon_damage\n";
}
printf "Total lifesteal %.2f\n", ($damage * $lifesteal)/$max_iterations;
printf "Total gold %d damage/gold %.2f\n", $gold, $damage / $gold;


