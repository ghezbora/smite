#!/usr/bin/perl


# Wish list
#

use strict;
use warnings;

use Getopt::Std;



my %opts;

getopts('g:i:', \%opts);

my @items = split( /\s/, $opts{ 'i' } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}





my %base_stats = (
    "attack_rate" => {
        "freya" => 0.95,
        "sol" => 1,
    },
    "attack_rate_level_scaling" => {
        "freya" => 0.0195,
        "sol" => 0.018,
    },
    "auto_damage" => {
        "freya" => 35,
        "sol" => 34,
    },
    "auto_level_scaling" => {
        "freya" => 1.5,
        "sol" => 1.45,
    },
    "mana" => {
        "freya" => 220,
        "sol" => 300,
    },
    "mana_level_scaling" => {
        "freya" => 37,
        "sol" => 57,
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
    },
);



my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ 'g' } } };
my $next_attack_chain = 0;

my %warnings_to_print;

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ 'g' } }
        * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
my $mana = $base_stats{ "mana" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "mana_level_scaling" }->{ $opts{ 'g' } };

#print "attack rate $attack_rate\n";

my $damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;

my $magical_power = 0;
#my $lifesteal = 0.15; #freya
my $lifesteal = 0;

#my $their_protection = 30 + 18 + 20 + 70 + 40; # bellona with full passive, gaia, spirit robe
#my $their_protection = 30 + 18 + 20 + 50 + 50; # athena with HW, Sov, Void Stone
my $their_protection = 30 + 18 + 70; # athena with HW and Sov
#my $their_protection = 30 + 40; # sol with spirit robe
#my $their_protection = 30 + 18 + 40; # awilix with spirit robe

#my $their_health = 480 + 20 * 85 + 100 + 350 + 325; # bellona with gaia, frostbound, midgardian
my $their_health = 400 + 20 * 75 + 250; #sol with MoR

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;


if (defined $items{"pen_boots"}) {
    $magical_power += 45;
    $flat_pen += 10;
}

if (defined $items{"void_stone"}) {
    $magical_power += 40;
    $flat_reduction += 15;
}

if (defined $items{"demonic_grip"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.25;
    $magical_power += 60;
}
my $demonic_grip_stacks = 0;
my $demonic_grip_end = 0;

if (defined $items{"telkhines_ring"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.1;
    $magical_power += 45;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.3;
}

if (defined $items{"polynomicon"}) {
    $magical_power += 75;
    $mana += 300;
    $lifesteal += .1;
}
my $has_polynomicon_buff = 0;

if (defined $items{"spear"}) {
    $magical_power += 45;
    $flat_pen += 15;
}
my $spear_stacks = 0;
my $spear_end = 0;

if (defined $items{"shard"}) {
    $magical_power += 70;
    $percent_pen += .33;
}

if (defined $items{"bancrofts"}) {
    $magical_power += 100;
    $lifesteal += .12;
}

if (defined $items{"rod"}) {
    $magical_power += 125;
}

if (defined $items{"pythagorems"}) {
    $magical_power += 90;
    $lifesteal += .25;
}

if (defined $items{"book"}) {
    $mana += 875;
    $magical_power += 100 + 0.03 * $mana;
}




#print "attack rate $attack_rate\n";

if ($attack_rate > 2.5) { $attack_rate = 2.5; }

my $eff_magical_power = $magical_power;

if (defined $items{"rod"}) { $eff_magical_power *= 1.25; }

print "effective magical power $eff_magical_power\n";

my $base_damage = $base_stats{ "auto_damage" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
        + $eff_magical_power;
my $attack_duration = int(1000 / $attack_rate);


my $iteration = 0;
my $max_iterations = 1; # no crits, no RNG
my $max_time = 5000;




sub calc_mitigated_damage( $ ) {

    my $pre_prot_damage = shift;

    print "pre_prot_damage = $pre_prot_damage\n";
    print "    their prot = $their_protection\n";

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot *= (1 - 0.1*$spear_stacks);
    $their_eff_prot *= (1 - 0.07*$demonic_grip_stacks);
    print "    their prot after %reduction $their_eff_prot\n";
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot -= 10*$spear_stacks;
    $their_eff_prot -= 5*$demonic_grip_stacks;
    print "    their prot after flat reduction $their_eff_prot\n";
    $their_eff_prot *= (1 - $percent_pen);
    print "    their prot after %pen $their_eff_prot\n";
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }
    print "    their prot after flat pen $their_eff_prot\n";

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;

    print "$damage mitigated damage\n";
    
    return $damage;

}





my $has_irradiate = 0;
my $has_pulse = 0;
my $irradiate_end = 0;
my $pulse_end = 0;

my $heat = 80;


while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        # anything before first attack (initiation) goes here

        #if ($time == 0) {
        #    $has_irradiate = 1;
        #    $has_pulse = 1;
        #    $irradiate_end = $time + 5000;
        #    $pulse_end = $time + 5000;
        #    if ($has_polynomicon) { $has_polynomicon_buff = 1; }
        #}

        if ($time == 100) {
            # second blast, the time is probably not 100 but it's before the next attack
            my $pre_prot_damage = 160 + 0.35 * $eff_magical_power;
            $damage += calc_mitigated_damage( $pre_prot_damage );

            $spear_stacks++;
            if ($spear_stacks > 2) { $spear_stacks = 2; }

            $heat += 10;
        }

        if ( $time == $next_attack ) {

            my $effective_base_damage = $base_damage;

            my $heat_eff_magical_power = $eff_magical_power +
                    int(0.25 * $heat * $magical_power / 100);
            print "mag power $magical_power eff mag power $eff_magical_power heat power $heat_eff_magical_power\n";

            if ($has_polynomicon_buff) {
                $effective_base_damage += 0.6 * $heat_eff_magical_power;
                $has_polynomicon_buff = 0;
            }

            if ($has_pulse) {
                $effective_base_damage += 60 + 0.15 * $heat_eff_magical_power;
            }

            if ($has_irradiate) {
                $effective_base_damage += 100 + 0.25 * $heat_eff_magical_power;
            }

            my $pre_prot_damage = 0;

            $pre_prot_damage += $effective_base_damage;

            if ( $heat == 100 ) { $pre_prot_damage *= 1.25; }

            if (defined $items{"telkhines_ring"}) {
                # apply this AFTER heat % bonus
                $pre_prot_damage += 40;
            }

            if ( $time == 0 ) { # stellar burst
                $pre_prot_damage += 160 + 0.35 * $heat_eff_magical_power;
            }

            $damage += calc_mitigated_damage($pre_prot_damage);

            if ( $time == 0 ) { # stellar burst spear
                $spear_end = $time + 5000;
                $spear_stacks++;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
                if (defined $items{"polynomicon"}) { $has_polynomicon_buff = 1; }
            }

            # get ready for next attack
            if (defined $items{"spear"} and ($has_irradiate or $has_pulse)) {
                $spear_end = $time + 5000;
                $spear_stacks++;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }

            if (defined $items{"demonic_grip"}) {
                $demonic_grip_end = $time + 3000;
                $demonic_grip_stacks++;
                if ($demonic_grip_stacks > 3) { $demonic_grip_stacks = 3; }
            }

            # attack chain progression
            my $heat_attack_rate = $attack_rate + $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * ($heat * 0.25 * 0.012);
            if ( $heat_attack_rate > 2.5 ) { $heat_attack_rate = 2.5; }
            print "heat effective attack rate = $heat_attack_rate\n";
            my $heat_attack_duration = int(1000 / $heat_attack_rate);
            $next_attack = $time + int($heat_attack_duration * ${attack_chain_progression}[ $next_attack_chain ]);
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            $num_attacks++;

            $heat += 5;
            if ( $heat > 100 ) { $heat = 100; }

            print "next attack $next_attack\n";
        }

        $time++;
    }

    if ($time == $spear_end) { $spear_stacks = 0; }
    if ($time == $demonic_grip_end) { $demonic_grip_stacks = 0; }
    if ($time == $pulse_end) { $has_pulse = 0; }
    if ($time == $irradiate_end) { $has_irradiate = 0; }

    # reset
    $time = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $spear_stacks = 0;
    $spear_end = 0;
    $demonic_grip_stacks = 0;
    $demonic_grip_end = 0;

    $iteration++;

}

foreach my $key (keys %warnings_to_print) {
        print $key . "\n";
}

print "Base attack rate $attack_rate Base attack damage $base_damage\n";
print "Num attacks: " . $total_attacks/$max_iterations . ", avg damage " . ($damage / $total_attacks) . "\n";
print "Total damage " . $damage/$max_iterations . " dps " . ($damage / ($max_iterations*$max_time/1000)) . "\n";
print "Total lifesteal " . ($damage * $lifesteal)/$max_iterations . "\n";



