#!/usr/bin/perl


# Wish list
#
# divide magical and physical protection
#
# finish ability logic for other gods
#
# add logic to calculate wave clear (aoe)
#
# add bluestone pendant
#
# add audacity for apollo
# add hou yi
# add poison darts for xbal
# add kali
# add arachne
# add nemesis
# add ne zha
#

use strict;
use warnings;

use Getopt::Std;

#################################################################################
# declare globals
#################################################################################


my %opts;

getopts('vl:t:p:h:g:i:e:r:a:', \%opts);

my $action = "kill";
if ( defined $opts{ 'a' } ) {
    if ( $opts{ 'a' } eq "clear" ) {
        $action = "clear";
    }
}

my $char_level = 20;
if (defined $opts{'l'} ) { $char_level = $opts{'l'}; }

my $verbose = 0;
if ( defined $opts{'v'} ) { $verbose = 1; }

my @items = split( /\s/, $opts{ 'i' } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}




my %protection_stats = (
    "physical_protection" => {
        "bastet" => (12 + 20 * 2.9 + 75), # bastet with breastplate of valor
        "sol" => (9 + 20 * 2.6), # sol
        "khepri" => (19 + 3 * 20 + 65 + 40 + 60), # khepri with Urchin and spirit robe and cloak of US
        "bellona" => (18 + 3 * 20 + 20 + 30), # bellona with mystical mail and full passive
        "hercules" => (18 + 3 * 20 + 30), # herc with mystical mail
    },
    "magical_protection" => {
        "bastet" => (30 + 20 * 0.9), # bastet with breastplate of valor
        "sol" => 30,
        "khepri" => (30 + 20 * 0.9 + 65 + 60 + 40 + 60), # khepri with urchin, bulwark, spirit robe and COUS
        "bellona" => (30 + 20 * 0.9 + 20 + 60), #bellona with bulwark and full passive
        "hercules" => (30 + 20 * 0.9 + 60), #herc with bulwark of hope
    },
    "health" => {
        "bastet" => (415 + 20 * 80),
        "sol" => (400 + 75 * 20),
        "khepri" => (510 + 90*20 + 200 + 200), # khepri with urchin and bulwark
        "bellona" => (480 + 85 * 20 + 200 + 100 ), # TODO wrong?
        "hercules" => (480 + 86 * 20 + 200 + 300 + 350 + 400), #herc with mystical, bulwark, thebes, and gaia
    },
);




my %ability_stats = (
    "cooldown" => {
        "crush" => 10,
        "sic_em" => 10,
        "sentinel" => 15,
        "im_a_monster" => 90,

        "stellar_burst" => 12,
        "radiance" => 15,

        "irradiate" => 11,
        "pulse" => 11,

        "shadow_lock" => 10,
        "siphon_darkness" => 15,
        "shadow_step" => 15,
        "night_terror" => 90,

        "acid_spray" => 14,
        "viper_shot" => 10,

        "suppress_the_insolent" => 10,
        "vengeful_assault" => 14, # TODO this cooldown scales

        "feather_step" => 8,

        "deathbane" => 10,
        "cobras_kiss" => 18,
        "ambush" => 15,
        "last_breath" => 90,

        "mjolnirs_attunement" => 12,
        "tectonic_rift" => 17,
        "spin_to_win" => 13,
        "anvil_of_dawn" => 90,

        "unchained" => 15,
        "brutalize" => 14,
        "ragnarok" => 90,
        
        "pounce" => 12,
        "razor_whip" => 15,
        "declaw" => 10,
        "cat_call" => 90,

        "spirit_arrow" => 15,

        "thrown_axe" => 14,
        "hail_of_arrows" => 15,
        "bladed_arrow" => 14,
    },
    "time" => { # will be updated with cooldown when used
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "stellar_burst" => 0,
        "radiance" => 0,

        "irradiate" => 0,
        "pulse" => 0,

        "acid_spray" => 0,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 0,

        "feather_step" => 0,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 0,

        "unchained" => 0,
        "brutalize" => 0,
        "ragnarok" => 0,

        "pounce" => 12,
        "razor_whip" => 15,
        "declaw" => 10,
        "cat_call" => 90,

        "spirit_arrow" => 0,

        "thrown_axe" => 0,
        "hail_of_arrows" => 0,
        "bladed_arrow" => 0,
    },
    "damage" => {
        "crush" => [ 0, 90, 140, 190, 240, 290 ],
        "sic_em" => [ 0, 60, 110, 160, 210, 260 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 400, 500, 600, 700, 800 ],

        "irradiate" => [ 0, 40, 55, 70, 85, 100 ],
        "pulse" => [ 0, 20, 30, 40, 50, 60 ],

        "stellar_burst" => [ 0, 40, 70, 100, 130, 160 ],

        "acid_spray" => [ 0, 90, 135, 180, 225, 270 ],
        "viper_shot" => [ 0, 0, 0, 0, 0, 0 ],

        "suppress_the_insolent" => [ 0, 80, 130, 180, 230, 280 ],
        "vengeful_assault" => [ 0, 0, 0, 0, 0, 0 ],

        "shadow_lock" => [ 0, 0, 0, 0, 0, 0 ],
        "siphon_darkness" => [ 0, 90, 160, 230, 300, 370 ],
        "shadow_step" => [ 0, 70, 110, 150, 190, 230 ],
        "night_terror" => [ 0, 200, 250, 300, 350, 400 ],

        "deathbane" => [ 0, 60, 80, 100, 120, 140 ],
        "cobras_kiss" => [ 0, 50, 70, 90, 110, 130 ],
        "ambush" => [ 0, 80, 140, 200, 260, 320 ],
        "last_breath" => [ 0, 0, 0, 0, 0, 0 ],

        "mjolnirs_attunement" => [ 0, 150, 270, 390, 510, 690 ],
        "tectonic_rift" => [ 0, 0, 0, 0, 0, 0 ],
        "spin_to_win" => [ 0, 0, 0, 0, 0, 0 ],
        "anvil_of_dawn" => [ 0, 150, 200, 250, 300, 350 ],

        "unchained" => [ 0, 95, 155, 215, 275, 335 ],
        "brutalize" => [ 0, 45, 75, 105, 135, 165 ],
        "ragnarok" => [ 0, 200, 275, 350, 425, 500 ],

        "pounce" => [ 0, 80, 145, 210, 275, 340 ],
        "razor_whip" => [ 0, 0, 0, 0, 0, 0 ],
        "declaw" => [ 0, 70, 120, 170, 220, 270 ],
        "cat_call" => [ 0, 0, 0, 0, 0, 0 ],

        "spirit_arrow" => [ 0, 180, 310, 440, 570, 700 ],

        "thrown_axe" => [ 0, 60, 90, 120, 150, 180 ],
        "hail_of_arrows" => [ 0, 80, 120, 160, 200, 240 ],
        "bladed_arrow" => [ 0, 70, 120, 170, 220, 270 ],
        "expose_weakness" => [ 0, 10, 20, 30, 40, 50 ],
    },
    "aoe" => {
        "suppress_the_insolent" => 3,
        "acid_spray" => 6,
    },
    "hits" => {
        "crush" => 1,
        "sic_em" => 1,
        "sentinel" => 0,
        "im_a_monster" => 1,

        "stellar_burst" => 2,

        "acid_spray" => 1,
        "viper_shot" => 0,

        "suppress_the_insolent" => 1,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 1,
        "night_terror" => 1,

        "deathbane" => 3,
        "cobras_kiss" => 2,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 1,
        "tectonic_rift" => 0,
        "spin_to_win" => 1,
        "anvil_of_dawn" => 1,

        "unchained" => 1,
        "brutalize" => 4,
        "ragnarok" => 1,

        "pounce" => 1,
        "razor_whip" => 0,
        "declaw" => 1,
        "cat_call" => 0,

        "spirit_arrow" => 1,

        "thrown_axe" => 1,
        "hail_of_arrows" => 1,
        "bladed_arrow" => 1,
    },
    "tick_damage" => {
        "viper_shot" => [ 0, 10, 15, 20, 25, 30 ],

        "shadow_lock" => [ 0, 30, 40, 50, 60, 70 ],
        "night_terror" => [ 0, 20, 25, 30, 35, 40 ],

        "last_breath" => [ 0, 46, 68, 91, 114, 137 ],

        "spin_to_win" => [ 0, 20, 40, 60, 80, 100 ],

        "razor_whip" => [ 0, 25, 45, 65, 85, 105 ],
        "cat_call" => [ 0, 75, 105, 135, 165, 195 ],
    },
    "scaling" => {
        "crush" => 0.8,
        "sic_em" => 0.6,
        "sentinel" => 0,
        "im_a_monster" => 1.2,

        "stellar_burst" => 0.35,

        "acid_spray" => 0.7,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0.4,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 0.4,
        "night_terror" => .6,

        "deathbane" => .45,
        "cobras_kiss" => .4,
        "ambush" => .5,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0.9,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 1.2,

        "unchained" => .8,
        "brutalize" => .5,
        "ragnarok" => 1.2,

        "pounce" => 1,
        "razor_whip" => 0,
        "declaw" => 1,
        "cat_call" => 0,

        "spirit_arrow" => 1.8,

        "thrown_axe" => 0.6,
        "hail_of_arrows" => 1.2,
        "bladed_arrow" => 0.7,
    },
    "tick_scaling" => {
        "viper_shot" => 0.1,

        "shadow_lock" => 0.2,
        "night_terror" => .05,

        "last_breath" => 0,

        "spin_to_win" => 0.45,

        "razor_whip" => 0.25,
        "cat_call" => 0.6,
    },
    "tick_duration" => {
        "shadow_lock" => .5,
        "night_terror" => 1,

        "last_breath" => 1,

        "spin_to_win" => 0.4,

        "razor_whip" => 1,
        "cat_call" => 1,
    },
    "num_ticks" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "stellar_burst" => 0,

        "acid_spray" => 0,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0,
        "vengeful_assault" => 0,

        "shadow_lock" => 4,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 5,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 5,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 5,
        "anvil_of_dawn" => 0,

        "unchained" => 0,
        "brutalize" => 0,
        "ragnarok" => 0,

        "pounce" => 0,
        "razor_whip" => 4,
        "declaw" => 0,
        "cat_call" => 10,

        "spirit_arrow" => 0,

        "thrown_axe" => 0,
        "hail_of_arrows" => 0,
        "bladed_arrow" => 0,
    },
    "next_action" => { # time to next action
        # these are mostly guesses
        "crush" => 0.5,
        "sic_em" => 0.5,
        "sentinel" => 0.5,
        "im_a_monster" => 1,

        "stellar_burst" => 0.5,

        "acid_spray" => 0.5,
        "viper_shot" => 0.5,

        "suppress_the_insolent" => 0.5,
        "vengeful_assault" => 0.5,

        "shadow_lock" => 2,
        "siphon_darkness" => 0.5,
        "shadow_step" => 0.5,
        "night_terror" => 1,

        "deathbane" => 1,
        "cobras_kiss" => 0.5,
        "ambush" => 0.5,
        "last_breath" => 1,

        "mjolnirs_attunement" => 0.5,
        "tectonic_rift" => 0.5,
        "spin_to_win" => 2,
        "anvil_of_dawn" => 0.5, # count from dunk time, not chargeup

        "unchained" => .5,
        "brutalize" => 2,
        "ragnarok" => 2,

        "pounce" => 0.5,
        "razor_whip" => 0.5,
        "declaw" => 0.5,
        "cat_call" => 0.5,

        "spirit_arrow" => 0.5,

        "thrown_axe" => 0.5,
        "hail_of_arrows" => 0.5,
        "bladed_arrow" => 0.5,
    },
    "attack_speed_buff" => {
        "vengeful_assault" => [ 0, 0.35, 0.45, 0.55, 0.65, 0.75 ],

        "wield_bow" => [ 0, 0.05, 0.10, 0.15, 0.20, 0.25 ],

        "viper_shot" => [ 0, 0.40, 0.50, 0.60, 0.70, 0.80 ],
    },
    "level" => {
        # character level           [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20 ],
        "crush" =>                  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "sic_em" =>                 [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "sentinel" =>               [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "im_a_monster" =>           [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "irradiate" =>              [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "pulse" =>                  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "stellar_burst" =>          [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "radiance" =>               [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "suppress_the_insolent" =>  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "vengeful_assault" =>       [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "viper_shot" =>             [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "acid_spray" =>             [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "shadow_lock" => 5,
        "siphon_darkness" => 5,
        "shadow_step" => 5,
        "night_terror" => 5,

        "deathbane" => 5,
        "cobras_kiss" => 5,
        "ambush" => 5,
        "last_breath" => 5,

        "mjolnirs_attunement" => 5,
        "tectonic_rift" => 5,
        "spin_to_win" => 5,
        "anvil_of_dawn" => 5,

        "unchained" => 5,
        "brutalize" => 5,
        "ragnarok" => 5,

        "pounce" => 5,
        "razor_whip" => 5,
        "declaw" => 5,
        "cat_call" => 5,

        "spirit_arrow" => 5,

        "thrown_axe" =>             [ 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "bladed_arrow" =>           [ 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "expose_weakness" =>        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5 ],
        "hail_of_arrows" =>         [ 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "weild_bow" =>              [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],
    },
);



my %combos = (
    "scylla" => [ "sic_em", "crush", "im_a_monster" ],
    "nox" => [ "shadow_lock", "siphon_darkness", "night_terror" ],
    "freya" => [ ],
    "sol" => [ "stellar_burst" ],
    "artemis" => [ ],
    #"awilix" => [ "moonlight_charge", "gravity_surge" ],
    "awilix" => [ ],
    "medusa" => [ ],
    "xbal" => [ ],
    "rama" => [ ],
    "serqet" => [ "cobras_kiss", "deathbane", "last_breath" ],
    #"thor" => [ "anvil_of_dawn", "mjolnirs_attunement", "tectonic_rift", "spin_to_win" ],
    "thor" => [ "spin_to_win" ],
    "fenrir" => [ "unchained", "ragnarok", "brutalize" ],
    "bastet" => [ "pounce", "razor_whip", "cat_call" ],
    "apollo" => [ ],
    "mercury" => [ ],
    "neith" => [ "spirit_arrow", ],
    "ullr" => [ "thrown_axe", "hail_of_arrows", "bladed_arrow" ],
);


my %clear_skills = (
    "medusa" => [ "acid_spray" ],
    "artemis" => [ "suppress_the_insolent" ],
);




#my %abilities = (
#    "scylla" => [ "sic_em", "crush", "sentinel", "im_a_monster" ],
#    "nox" => [ "shadow_lock", "siphon_darkness", "shadow_step", "night_terror" ],
#    "freya" => [ "irradiate", "pulse", "banish", "valkyries_discretion" ],
#    "sol" => [ "radiance", "stellar_burst", "disapparate", "supernova" ],
#    "artemis" => [ "transgressors_fate", "vengeful_assault", "suppress_the_insolent", "calydonian_boar" ],
#    "awilix" => [ "summon_suku", "feather_step", "moonlight_charge", "gravity_surge" ],
#    "medusa" => [ "viper_shot", "acid_spray", "lacerate", "petrify" ],
#    "xbal" => [ "branching_bolas", "poison_darts", "rising_jaguar", "darkest_of_nights" ],
#    "rama" => [ "astral_strike", "pick_me_up", "rolling_assault", "astral_barrage" ],
#    "ullr" => [ "bladed_arrow", "expose_weakness", "hail_of_arrows", "wield_bow" ],
#    "serqet" => [ "cobras_kiss", "deathbane", "ambush", "last_breath" ],
#    "thor" => [ "anvil_of_dawn", "mjolnirs_attunement", "tectonic_rift", "spin_to_win" ],
#);






my %base_stats = (
    "type" => {
        "freya" => "magical",
        "sol" => "magical",
        "scylla" => "magical",
        "nox" => "magical",

        "artemis" => "physical",
        "awilix" => "physical",
        "medusa" => "physical",
        "xbal" => "physical",
        "rama" => "physical",
        "ullr" => "physical",
        "serqet" => "physical",
        "thor" => "physical",
        "fenrir" => "physical",
        "bastet" => "physical",
        "apollo" => "physical",
        "neith" => "physical",
        "mercury" => "physical",
    },
    "mvmt_speed" => {
        "mercury" => 375,
    },
    "attack_rate" => {
        "freya" => 0.95,
        "sol" => 1,
        "scylla" => 1,
        "nox" => 1,

        "artemis" => 0.95,
        "awilix" => 1,
        "medusa" => 0.95,
        "xbal" => 0.95,
        "rama" => 0.95,
        "ullr" => 0.95,
        "serqet" => 1,
        "thor" => 1,
        "fenrir" => 1,
        "bastet" => 1,
        "apollo" => 0.95,
        "neith" => 0.95,
        "mercury" => 1,
    },
    "attack_rate_level_scaling" => {
        "freya" => 0.0195,
        "sol" => 0.018,
        "scylla" => 0.008,
        "nox" => 0.008,

        "artemis" => 0.014,
        "awilix" => 0.0189,
        "medusa" => 0.014,
        "xbal" => 0.01,
        "rama" => 0.017,
        "ullr" => 0.015,
        "serqet" => 0.0216,
        "thor" => 0.0145,
        "fenrir" => 0.017,
        "bastet" => 0.0198,
        "apollo" => 0.017,
        "neith" => 0.016,
        "mercury" => 0.024,
    },
    "auto_damage" => {
        "freya" => 35,
        "sol" => 34,
        "scylla" => 34,
        "nox" => 34,

        "artemis" => 35,
        "awilix" => 38,
        "medusa" => 38,
        "xbal" => 37,
        "rama" => 40,
        "ullr" => 38,
        "serqet" => 39,
        "thor" => 39,
        "fenrir" => 38,
        "bastet" => 38,
        "apollo" => 40,
        "neith" => 35,
        "mercury" => 38,
    },
    "auto_level_scaling" => {
        "freya" => 1.5,
        "sol" => 1.45,
        "scylla" => 1.45,
        "nox" => 1.5,

        "artemis" => 2.05,
        "awilix" => 2.16,
        "medusa" => 2.6,
        "xbal" => 2.5,
        "rama" => 2.5,
        "ullr" => 2.4,
        "serqet" => 2.25,
        "thor" => 2.4,
        "fenrir" => 2.3,
        "bastet" => 2.13,
        "apollo" => 2.6,
        "neith" => 2.3,
        "mercury" => 2.13,
    },
    "mana" => {
        "freya" => 220,
        "sol" => 300,
        "scylla" => 298,
        "nox" => 250,

        "artemis" => 205,
        "awilix" => 220,
        "medusa" => 220,
        "xbal" => 220,
        "rama" => 205,
        "ullr" => 230,
        "serqet" => 240,
        "thor" => 240,
        "fenrir" => 200,
        "bastet" => 215,
        "apollo" => 225,
        "neith" => 230,
        "mercury" => 200,
    },
    "mana_level_scaling" => {
        "freya" => 37,
        "sol" => 57,
        "scylla" => 56,
        "nox" => 38,

        "artemis" => 34,
        "awilix" => 38,
        "medusa" => 34,
        "xbal" => 37,
        "rama" => 34,
        "ullr" => 40,
        "serqet" => 40,
        "thor" => 38,
        "fenrir" => 35,
        "bastet" => 39,
        "apollo" => 40,
        "neith" => 39,
        "mercury" => 40,
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
        "scylla" => [ 1 ],
        "nox" => [ 1 ],

        "artemis" => [ 1 ],
        "awilix" => [ 1, 0.75, 1.25 ],
        "medusa" => [ 1 ],
        "xbal" => [ 1 ],
        "rama" => [ 1 ],
        "ullr" => [ 1 ],
        "serqet" => [ 1, 0.75, 1.25 ],
        "thor" => [ 1 ],
        "fenrir" => [ 1 ],
        "bastet" => [ 1, 0.7, 1.3 ],
        "apollo" => [ 1 ],
        "neith" => [ 1 ],
        "mercury" => [ 1, 0.75, 1.25 ],
    },
);



my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ 'g' } } };
my $next_attack_chain = 0;

my %messages_to_print;

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ 'g' } }
        * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
my $mana = $base_stats{ "mana" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "mana_level_scaling" }->{ $opts{ 'g' } };

my $base_crit_chance = 0;
my $crits = 0;
my $damage = 0;
my $attack_damage = 0;
my $malice_damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;
my $gold = 0;

my $physical_power = 0;
my $magical_power = 0;
my $lifesteal = 0;
if ( $opts{ 'g' } eq "freya" ) { $lifesteal += 0.15; }
my $cdr = 0;
my $item_mvmt_speed = 0;

my $enemy_god = "bastet";
if ( defined $opts{ 'e' } ) { $enemy_god = $opts{ 'e' }; }

my $their_protection;
if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
    $their_protection = $protection_stats{ "physical_protection" }->{ $enemy_god };
} else {
    $their_protection = $protection_stats{ "magical_protection" }->{ $enemy_god };
}
if ( defined $opts{'p'} ) {
    $their_protection = $opts{'p'};
}
if ( $action eq "clear" ) { $their_protection = 0; }

my $their_health = $protection_stats{ "health" }->{ $enemy_god };
if ( defined $opts{ 'h' } ) {
    $their_health = $opts{ 'h' };
}

my $their_flat_reduction = 0;
if ( defined $opts{ 'r' } ) {
    $their_flat_reduction = $opts{ 'r' };
}

my $their_percent_reduction = 0;
if ( $action eq "clear" ) {
    $their_percent_reduction = 0.1; # at the start of the match
}

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;

#################################################################################
# magical items
#################################################################################
if (defined $items{"pen_boots"}) {
    $magical_power += 45;
    $flat_pen += 10;
    $gold += 1700;
}

if (defined $items{"cooldown_boots"}) {
    $magical_power += 30;
    $cdr += 0.10;
    $mana += 250;
    $gold += 1600;
}

if (defined $items{"void_stone"}) {
    $magical_power += 40;
    $flat_reduction += 15;
    $gold += 2350;
}

if (defined $items{"demonic_grip"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.25;
    $magical_power += 60;
    $gold += 2280;
}

if (defined $items{"telkhines_ring"} or defined $items{ "telkhines" }) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $magical_power += 45;
    $gold += 2125;
}

if (defined $items{ "spear_of_desolation" }) {
    $magical_power += 120;
    $flat_pen += 20;
    $gold += 3800;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.3;
    $gold += 2140;
}

if (defined $items{"polynomicon"}) {
    $magical_power += 75;
    $mana += 300;
    $lifesteal += .1;
    $gold += 2300;
}

if (defined $items{"spear"}) {
    $magical_power += 45;
    $flat_pen += 15;
    $gold += 2150;
}

if (defined $items{"shard"}) {
    $magical_power += 70;
    $percent_pen += .33;
    $gold += 2050;
}

if (defined $items{"bancrofts"}) {
    $magical_power += 100;
    $lifesteal += .12;
    $gold += 2400;
}

if (defined $items{"rod"}) {
    $magical_power += 125;
    $gold += 3320;
}

if (defined $items{"chronos"}) {
    $magical_power += 75;
    $cdr += 0.20;
    $gold += 2400;
}

if (defined $items{"pythagorems"} or defined $items{"pythags"}) {
    $magical_power += 90;
    $lifesteal += .25;
    $cdr += 0.1;
    $gold += 2600;
}

if (defined $items{"gem"} ) {
    $magical_power += 70;
    $mana += 250;
    $gold += 2850;
}

if (defined $items{"doom_orb"} ){
    $magical_power += 140; #assume full stacks
    $mana += 200;
    $gold += 2050;
}

if (defined $items{"book"}) {
    $mana += 875;
    $magical_power += 100 + 0.03 * $mana; # TODO having this last computes bonus right... probably?
    $gold += 2650;
}

#################################################################################
# physical items
#################################################################################

# jotunn's wrath
if (defined $items{"jotunns"} or defined $items{ "jotunns_wrath" }) {
    $physical_power += 40;
    $flat_pen += 10;
    $mana += 150;
    $cdr += 0.20;
    $gold += 2440;
}

# qin's sais
if (defined $items{"qins"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $physical_power += 40;
    $gold += 2700;
}

# asi
if (defined $items{"asi"}) {
    $flat_pen += 15;
    $lifesteal += 0.15;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1780;
}

# brawler's beatstick
if (defined $items{"brawlers"}) {
    $physical_power += 40;
    $flat_pen += 20;
    $gold += 2400;
}

# titan's bane
if (defined $items{"titans"} or defined $items{"titans_bane"}) {
    $physical_power += 30;
    $percent_pen += 0.33;
    $gold += 2050;
}

# warrior tabi
if (defined $items{"warrior_tabi"}) {
    $physical_power += 40;
    $gold += 1550;
    $item_mvmt_speed += 0.18;
}

# ninja tabi
if (defined $items{"ninja_tabi"}) {
    $physical_power += 20;
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1500;
    $item_mvmt_speed += 0.18;
}

# executioner
if (defined $items{"executioner"}) {
    $physical_power += 30;
    $attack_rate += 0.25 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 2250;
}

# ichaival
if (defined $items{"ichaival"}) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $flat_pen += 10;
    $gold += 1700;
}

# dev's gloves
if (defined $items{"devs_gloves"}) {
    $physical_power += 55;
    $lifesteal += 0.25; # assume full stacks
    $gold += 2050;
}

# soul eater
if (defined $items{"soul_eater"}) {
    $attack_rate += 0.30 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $lifesteal += 0.3; # assume full stacks
    $item_mvmt_speed += 0.1;
    $gold += 2000;
}

# stone cutting sword
if (defined $items{"stone_cutting_sword"}) {
    $physical_power += 50;
    $item_mvmt_speed += .1;
    $gold += 2900;
}

# masamune
if (defined $items{"masamune"}) {
    $physical_power += 30;
    $item_mvmt_speed += .1;
    $gold += 2200;
}

# heartseeker
if (defined $items{ "heartseeker" }) {
    $physical_power += 25;
    $item_mvmt_speed += 0.1;
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } }; # assume stacked
    #TODO deal with heartseeker stacks
}

# golden bow
if (defined $items{"golden_bow"}) {
    $base_crit_chance += 0.1;
    $physical_power += 35;
    $gold += 2330;
    $item_mvmt_speed += 0.05;
}

# rage
if (defined $items{"rage"}) {
    $base_crit_chance += 0.2;
    $physical_power += 30;
    $gold += 2600;
}

# malice
if (defined $items{"malice"}) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3000;
}
my $total_malice_procs = 0;
my $next_malice_proc = 0;
my $malice_procs_left = 0;

# deathbringer
if (defined $items{"deathbringer"} or defined $items{ "db" }) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3200;
}

# hydras lament
if (defined $items{"hydras"}) {
    $cdr += 0.15;
    $physical_power += 30;
}

# transcendence
if (defined $items{"transcendence"}) {
    $mana += 1050;
    $physical_power += 35;
    $physical_power += 0.03 * $mana; # TODO having this last computes bonus right... probably?
    $gold += 2600;
}



#################################################################################
# calculate stats
#################################################################################
if ($cdr > 0.4) { $cdr = 0.4; }

if ($attack_rate > 2.5) { $attack_rate = 2.5; }

if ( $opts{'g'} eq "scylla" ) {
    if ( $ability_stats{ "level" }->{ "crush" }->[ $char_level ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sic_em" }->[ $char_level ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "im_a_monster" }->[ $char_level ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sentinel" }->[ $char_level ] == 5 ) { $magical_power += 20; }
}

if (defined $items{"rod"}) { $magical_power *= 1.25; }



#################################################################################
# iteration and time mgmt
#################################################################################

my $iteration = 0;
my $max_iterations = 1000;
if ( $base_stats{ "type" }->{ $opts{ 'g'} } eq "magical" ) {
    $max_iterations = 1; # no crit, no rng
}
my $max_time = 5100;
if (defined $opts{'t'}) { $max_time = $opts{'t'}; }




#################################################################################
# buffs and stacks
#################################################################################

my %buffs = (
    "max" => {
        "rage" => 6,
        "executioner" => 4, # really a debuff on the target
        "demonic_grip" => 4, # really a debuff on the target
        "spear" => 2, # really a debuff on the target
        "still_target" => 3,
        "xbal_passive" => 6,
        "initiative" => 1,
        "vengeful_assault" => 1,
        "expose_weakness" => 1,
        "pick_me_up" => 1,
        "gravity_surge" => 1,
        "maximum_velocity" => 1,
        "branching_bolas" => 1,
        "open_wound" => 1, # really a debuff on the target
        "serqet_poisons" => 3, # really a debuff on the target
        "hydras_lament" => 1,
        "polynomicon" => 1,
        "ichaival" => 3, # both a buff and a debuff
        "irradiate" => 1,
        "pulse" => 1,
        "astral_strike" => 1,
        "stone_cutting_sword" => 3, # both a buff and a debuff
    },
    "current" => {
        "rage" => 0,
        "executioner" => 0, # really a debuff on the target
        "demonic_grip" => 0, # really a debuff on the target
        "spear" => 0, # really a debuff on the target
        "still_target" => 0,
        "xbal_passive" => 0,
        "initiative" => 0,
        "vengeful_assault" => 0,
        "expose_weakness" => 0,
        "pick_me_up" => 0,
        "gravity_surge" => 0,
        "maximum_velocity" => 0,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 0, # really a debuff on the target
        "hydras_lament" => 0,
        "polynomicon" => 0,
        "ichaival" => 0, # both a buff and a debuff
        "irradiate" => 0,
        "pulse" => 0,
        "astral_strike" => 0,
        "stone_cutting_sword" => 0, # both a buff and a debuff
    },
    "time" => { # end time for buffs, cooldown time for hydras / polynomicon
        "rage" => 0,
        "executioner" => 0, # really a debuff on the target
        "demonic_grip" => 0, # really a debuff on the target
        "spear" => 0, # really a debuff on the target
        "still_target" => 0,
        "xbal_passive" => 0,
        "initiative" => 0,
        "vengeful_assault" => 0,
        "expose_weakness" => 0,
        "pick_me_up" => 0,
        "gravity_surge" => 0,
        "maximum_velocity" => 0,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 0, # really a debuff on the target
        "hydras_lament" => 0,
        "polynomicon" => 0,
        "ichaival" => 0, # both a buff and a debuff
        "irradiate" => 0,
        "pulse" => 0,
        "astral_strike" => 0,
        "stone_cutting_sword" => 0, # both a buff and a debuff
    },
    "duration" => {
        "rage" => 0,
        "executioner" => 3000, # really a debuff on the target
        "demonic_grip" => 3000, # really a debuff on the target
        "spear" => 5000, # really a debuff on the target
        "still_target" => 4000,
        "xbal_passive" => 0,
        "initiative" => 2500,
        "vengeful_assault" => 5000,
        "expose_weakness" => 5000,
        "pick_me_up" => 5000,
        "gravity_surge" => 6000,
        "maximum_velocity" => 5000,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 20000, # really a debuff on the target
        "hydras_lament" => 3000, # cooldown time
        "polynomicon" => 3000, # cooldown time
        "ichaival" => 3000, # both a buff and a debuff
        "irradiate" => 5000,
        "pulse" => 5000,
        "astral_strike" => 0,
        "stone_cutting_sword" => 3000, # both a buff and a debuff
    },
);

my $viper_shots_left = 0;
my $astral_arrows = 0;

my $heat = 0;
my @radiance_heat_amount = ( 0, 40, 50, 60, 70, 80 );

my $polynomicon_procs = 0;
my $polynomicon_damage = 0;

my $telkhines_damage = 0;

my $hydras_procs = 0;
my $hydras_damage = 0;

my %ticks = ();

my $combo_idx = 0;
my $next_skill;



#################################################################################
# calculations
#################################################################################

sub add_stack($) {
    my $buff = shift;
    $buffs{ "current" }->{ $buff } += 1;
    if ( $buffs{ "current" }->{ $buff } > $buffs{ "max" }->{ $buff } ) {
        $buffs{ "current" }->{ $buff } = $buffs{ "max" }->{ $buff };
    }
}


sub reset_buff_time($) {
    my $buff = shift;
    if ( $buffs{ "duration" }->{ $buff } != 0 ) {
        $buffs{ "time" }->{ $buff } = $time + $buffs{ "duration" }->{ $buff };
    }
}


sub ability_crits($) {
    my $pre_prot_damage = shift;

    # some abilities can crit, but they do not proc rage
    # not sure if the crit chance for abilities is affected by rage stacks TODO

    # crit chance
    my $total_crit_chance = $base_crit_chance;

    my $rng = rand();
    if ( $rng < $total_crit_chance ) {
        # critical hit
        $pre_prot_damage *= 2;
        if (defined $items{ "deathbringer" }) {
            $pre_prot_damage *= 1.2; # 240%
        }

        # handle malice
        if ($malice_procs_left == 0) {
            # no procs, set next proc for 1 sec from now, otherwise just refresh count
            $next_malice_proc = $time + 1000;
        }
        $malice_procs_left = 3;
    }

    return $pre_prot_damage;
}


sub get_eff_power() {
    
    if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
        my $eff_physical_power = $physical_power
                + 5 * $buffs{ "current" }->{ "xbal_passive" }
                + 10 * $buffs{ "current" }->{ "ichaival" };
        if (defined $items{ "masamune" }) {
            # TODO does masamune work this way? or is it more like telkhines?
            my $bonus = int(0.1 * ($their_health - 2000)); # 1 for every 10 health diff
            if ($bonus > 50) { $bonus = 50; }
            $eff_physical_power += $bonus;
        }
        if ($buffs{ "current" }->{ "initiative" } > 0) {
            $eff_physical_power *= 1.3;
        }
        return $eff_physical_power
    }
    else
    {
        my $eff_magical_power = $magical_power;
        if ( $opts{ 'g' } eq "sol" ) {
            $eff_magical_power *= (1 + 0.25 * $heat / 100);
            $eff_magical_power = int( $eff_magical_power );
        }
        return $eff_magical_power;
    }
}

sub get_mvmt_speed() {
    my $mvmt_speed = $base_stats{ "mvmt_speed" }->{ $opts{'g'} } * ($item_mvmt_speed + 0.4); # assume sprint is active TODO handle sprint duration
    return $mvmt_speed;
}

sub get_basic_attack_damage() {

    if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
        my $eff_physical_base_dmg  = ($base_stats{ "auto_damage" }->{ $opts{ 'g' } }
                + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
                + get_eff_power())
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_physical_base_dmg;
    }
    else
    {
        my $eff_magical_base_dmg = ($base_stats{ "auto_damage" }->{ $opts{ 'g' } }
                + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
                + 0.2 * get_eff_power()) # TODO is magical power scaling always 0.2?
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_magical_base_dmg;
    }
}

sub calc_mitigated_damage( $ $ $ $ ) {

    my $pre_prot_damage = shift;
    my $damage_source = shift;
    my $print = shift;
    my $num_targets = shift;

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot *= (1 - 0.1 * $buffs{ "current" }->{ "spear" });
    $their_eff_prot *= (1 - 0.08 * $buffs{ "current" }->{ "demonic_grip" });
    $their_eff_prot *= (1 - 0.08 * $buffs{ "current" }->{ "executioner" });
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot -= 10 * $buffs{ "current" }->{ "spear" };
    $their_eff_prot -= 10 * $buffs{ "current" }->{ "stone_cutting_sword" };
    $their_eff_prot *= (1 - $percent_pen);
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;

    $damage -= $their_flat_reduction;
    $damage *= (1 - $their_percent_reduction);

    if ( $verbose and $print ) {
        printf "time %6d %16s prot %4d -> %4d damage %4d -> %4d ",
                $time, $damage_source, $their_protection, $their_eff_prot, $pre_prot_damage, $damage;
        if ( defined $items{ "spear" } ) {
            printf " %d spear stacks ", $buffs{ "current" }->{ "spear" };
        }
        if ( defined $items{ "demonic_grip" } ) {
            printf " %d grip stacks ", $buffs{ "current" }->{ "demonic_grip" };
        }
        if ( defined $items{ "executioner" } ) {
            printf " %d executioner stacks ", $buffs{ "current" }->{ "executioner" };
        }
        if ( defined $items{ "executioner" } ) {
            printf " %d SCS stacks ", $buffs{ "current" }->{ "stone_cutting_sword" };
        }
        #if ( $opts{'g'} eq "sol" ) {
        #    print " $heat heat ";
        #}
        print "\n";
    }
    
    return ($num_targets * $damage);

}


#################################################################################
# skill ordering and cooldowns
#################################################################################
sub get_next_skill() {
    if ( $action eq "clear" ) {
        if ( scalar( $clear_skills{ $opts{'g'} } ) == 0 ) {
            return undef;
        }
        if ( scalar( $clear_skills{ $opts{'g'} } ) < $combo_idx ) {
            $combo_idx = 0;
        }
        return $clear_skills{ $opts{ 'g' } }->[ $combo_idx ];
    }
    else
    {
        if ( scalar( $combos{ $opts{'g'} } ) == 0 ) {
            return undef;
        }
        if ( scalar( $combos{ $opts{'g'} } ) < $combo_idx ) {
            $combo_idx = 0;
        }
        return $combos{ $opts{ 'g' } }->[ $combo_idx ];
    }
}

#################################################################################
# main loop
#################################################################################


print "effective power " . get_eff_power() . "\n";
print "base attack damage " . get_basic_attack_damage() . "\n";
print "base attack rate $attack_rate\n";


while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        #################################################################################
        # execute skills
        #################################################################################
        undef $next_skill;
        $next_skill = get_next_skill();
        if ( defined $next_skill ) {
            if ( $time >= $ability_stats{ "time" }->{ $next_skill } ) {
                # time to use next ability
                my $pre_prot_damage = $ability_stats{ "damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill }->[ $char_level ] ] +
                        (get_eff_power() * $ability_stats{ "scaling" }->{ $next_skill });
                my $hit = 0;
                if ( $buffs{ "current" }->{ "open_wound" } ) { $pre_prot_damage *= 1.15; }
                while ( $hit < $ability_stats{ "hits" }->{ $next_skill } ) {
                    if( $pre_prot_damage > 0 ) { 
                        if ( $next_skill eq "deathbane" ) {
                            # deathbane can crit
                            $pre_prot_damage = ability_crits( $pre_prot_damage );
                        }
                        $damage += calc_mitigated_damage( $pre_prot_damage, $next_skill, 1,
                                $ability_stats{ "aoe" }->{ $next_skill } );
                        if(defined $items{"spear"}) {
                            reset_buff_time("spear");
                            add_stack("spear");
                        }
                    }
                    $hit++;
                }

                if ( 0 < $ability_stats{ "num_ticks" }->{ $next_skill } ) {
                    $pre_prot_damage = $ability_stats{ "tick_damage" }->{ $next_skill }->[
                            $ability_stats{ "level" }->{ $next_skill }->[ $char_level ] ] +
                            (get_eff_power() * $ability_stats{ "tick_scaling" }->{ $next_skill });
                    if ( $buffs{ "current" }->{ "open_wound" } ) { $pre_prot_damage *= 1.15; }
                    # this ability has ticks, schedule them
                    my $i = 0;
                    while ( $i < $ability_stats{ "num_ticks" }->{ $next_skill } ) {

                        my $tick_time = $time + ($i + 1) * $ability_stats{ "tick_duration" }->{ $next_skill } * 1000;
                        while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                        if ( $next_skill ne "last_breath" ) {
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick", 0 ];
                        } else {
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick", 1 ];
                        }

                        $i++;
                    }
                }

                if ( $buffs{ "current" }->{ "open_wound" } ) {
                    $buffs{ "current" }->{ "open_wound" } = 0;
                } elsif ( $opts{'g'} eq "bastet" ) {
                    $buffs{ "current" }->{ "open_wound" } = 1;
                }

                if ( $opts{ 'g' } eq "serqet" ) {
                    add_stack( "serqet_poisons" );
                }

                if (defined $items{"polynomicon"} and $buffs{ "time" }->{ "polynomicon" } <= $time) {
                    $buffs{ "current" }->{ "polynomicon" } = 1;
                }
                if (defined $items{"hydras"} and $buffs{ "time" }->{ "hydras_lament" } <= $time) {
                    $buffs{ "current" }->{ "hydras_lament" } = 1;
                }

                $ability_stats{ "time" }->{ $next_skill } = $time +
                        (1000*($ability_stats{ "cooldown" }->{ $next_skill } * (1 - $cdr)));

                $next_attack_chain = 0;
                if ( $next_attack < $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill } ) {
                    $next_attack = $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill };
                }

                $combo_idx++;
            }
        }

        #################################################################################
        # execute ticks
        #################################################################################
        if ( defined $ticks{ $time } ) {
            if ( $ticks{ $time }->[ 2 ] == 0 ) {
                if ( defined $ability_stats{ "aoe" }->{ $ticks{ $time }->[1] } ) {
                    $damage += calc_mitigated_damage( $ticks{ $time }->[0], $ticks{ $time }->[1], 1,
                            $ability_stats{ "aoe" }->{ $ticks{ $time }->[1] } );
                } else {
                    $damage += calc_mitigated_damage( $ticks{ $time }->[0], $ticks{ $time }->[1], 1, 1 );
                }
            } else {
                # true damage; here for last breath
                $damage += $ticks{ $time }->[0];
                if ( $verbose ) {
                    printf "time %d %s damage %d\n", $time, $ticks{ $time }->[1], $ticks{ $time }->[0];
                }
            }
            if(defined $items{"spear"}) {
                reset_buff_time("spear");
                add_stack("spear");
            }
        }
        
        #################################################################################
        # execute buffs TODO can we merge these into the general skill logic?
        #################################################################################
        if ($opts{'g'} eq "freya" and $time == 0) {
            reset_buff_time( "irradiate" );
            reset_buff_time( "pulse" );
            add_stack( "irradiate" );
            add_stack( "pulse" );
            if (defined $items{"polynomicon"} and $buffs{ "time" }->{ "polynomicon" } <= $time) {
                $buffs{ "current" }->{ "polynomicon" } = 1;
            }
        }

        if ($opts{'g'} eq "sol" and $time >= $ability_stats{ "time" }->{ "radiance" }) {
            $heat += $radiance_heat_amount[
                   $ability_stats{ "level" }->{ "radiance" }->[ $char_level ] ];
            if (defined $items{"polynomicon"} and $buffs{ "time" }->{ "polynomicon" } <= $time) {
                $buffs{ "current" }->{ "polynomicon" } = 1;
            }
            $ability_stats{ "time" }->{ "radiance" } =
                    $time + 1000 * $ability_stats{ "cooldown" }->{ "radiance" };
        }

        if ($opts{'g'} eq 'xbal' and $time == 0) {
            $buffs{ "current" }->{ "branching_bolas" }= 1;
        }

        if ($opts{'g'} eq 'mercury' and $time == 0) {
            reset_buff_time("maximum_velocity");
            add_stack("maximum_velocity");
        }

        if ($opts{'g'} eq "rama" and $time == 0) {
            reset_buff_time("pick_me_up");
            add_stack("pick_me_up");
            reset_buff_time("astral_strike");
            add_stack("astral_strike");
            $astral_arrows = 5;
        }

        if ($opts{'g'} eq "ullr" and $time == 0) {
            add_stack("expose_weakness");
            reset_buff_time( "expose_weakness" );
        }

        if ($opts{'g'} eq "artemis" and $time == 0) {
            # start with tusky
            #my $pre_prot_damage = 450 + $base_damage;
            #$damage += calc_mitigated_damage($pre_prot_damage);
            add_stack("vengeful_assault");
            reset_buff_time("vengeful_assault");
        }

        if ($opts{'g'} eq "awilix" and $time == 0) {
            # start combo with moonlight charge + Ult
            # TODO use normal combo logic for this
            # TODO use normal ability stats logic
            my $pre_prot_damage = 250 + 0.6 * get_eff_power();
            $damage += calc_mitigated_damage($pre_prot_damage, "moonlight charge", 1, 1);

            $pre_prot_damage = 400 + 0.8 * get_eff_power();
            $damage += calc_mitigated_damage($pre_prot_damage, "gravity surge", 1, 1);

            $buffs{ "current" }->{ "initiative" } = 1;
            $buffs{ "end" }->{ "initiative" }= $time + 2500;

            if (defined $items{"hydras"} and $buffs{ "time" }->{ "hydras_lament" } <= $time) {
                $buffs{ "current" }->{ "hydras_lament" }= 1;
            }

            $next_attack = 250;
        }

        #################################################################################
        # execute attack-chain dependent skills
        #################################################################################
        if ($opts{'g'} eq "medusa" and $num_attacks == 1 and $viper_shots_left == 0) {
            # start viper shot after the first AA for AA cancel benefit
            $viper_shots_left = 3;
            my $viper_attack_rate = $attack_rate +
                    $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 
                    $ability_stats{ "attack_speed_buff" }->{ "viper_shot" }->[
                        $ability_stats{ "level" }->{ "viper_shot" }->[ $char_level ] ];
            if ($viper_attack_rate > 2.5) {
                $messages_to_print{ "overcapping viper attack rate" } = 1;
                $viper_attack_rate = 2.5;
            }
            if (defined $items{"hydras"} and $buffs{ "time" }->{ "hydras_lament" } <= $time) {
                $buffs{ "current" }->{ "hydras_lament" }= 1;
            }

            my $viper_attack_duration = int(1000 / $viper_attack_rate);
            $next_attack = $time + $viper_attack_duration;
        }

        if ($opts{'g'} eq "awilix" and $next_attack_chain == 2 and
                $ability_stats{ "time" }->{ "feather_step" } <= $time ) {
            # time to feather step
            my $pre_prot_damage = 360 + get_eff_power(); # TODO use hashed scaling/damage

            $damage += calc_mitigated_damage($pre_prot_damage, "feather step", 1, 1);

            # reset attack chain
            $next_attack_chain = 0;
            $next_attack = $time + 250; # don't know actual AA cancel durations

            if (defined $items{"hydras"} and $buffs{ "time" }->{ "hydras_lament" } <= $time) {
                $buffs{ "current" }->{ "hydras_lament" }= 1;
            }

            $ability_stats{ "time" }->{ "feather_step" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "feather_step" } * (1 - $cdr)));
        }



        #################################################################################
        # execute basic attacks
        #################################################################################
        if ( $time == $next_attack ) {

            my $pre_prot_damage = get_basic_attack_damage();
            
            if($buffs{ "current" }->{ "expose_weakness" }) { 
                $pre_prot_damage += $ability_stats{ "damage" }->{ "expose_weakness" }->[
                        $ability_stats{ "level" }->{ "expose_weakness" }->[ $char_level ] ];
            }

            if($buffs{ "current" }->{ "branching_bolas" }) { 
                $pre_prot_damage += $ability_stats{ "damage" }->{ "branching_bolas" }->[
                        $ability_stats{ "level" }->{ "branching_bolas" }->[ $char_level ] ];
            }

            if($buffs{ "current" }->{ "astral_strike" } and $astral_arrows > 0) {
                $astral_arrows--;
                $pre_prot_damage += $ability_stats{ "damage" }->{ "astral_strike" }->[
                        $ability_stats{ "level" }->{ "astral_strike" }->[ $char_level ] ];
            }

            if ( $opts{'g'} eq "mercury" and $num_attacks == 0 ) {
                # assume passiv is procced on first auto
                $pre_prot_damage += get_eff_power() * 0.75;
            }

            if ( $opts{'g'} eq "mercury" ) {
                $pre_prot_damage += 0.3 * get_mvmt_speed();
            }

            # crit chance
            my $total_crit_chance = $base_crit_chance;

            if ($opts{ 'g' } eq "artemis") {
                $total_crit_chance += 0.05 * $buffs{ "current" }->{ "still_target" };

                add_stack( "still_target" );
                reset_buff_time( "still_target" );
            }

            if (defined $items{ "rage" }) {
                $total_crit_chance += 0.1 * $buffs{ "current" }->{ "rage" };
            }

            my $rng = rand();
            if ( $rng < $total_crit_chance ) {
                # critical hit
                $pre_prot_damage *= 2;
                if (defined $items{ "deathbringer" }) {
                    $pre_prot_damage *= 1.2; # 240%
                }
                $crits++;

                # handle rage
                $buffs{ "current" }->{ "rage" } = 0;

                # handle malice
                if ($malice_procs_left == 0) {
                    # no procs, set next proc for 1 sec from now, otherwise just refresh count
                    $next_malice_proc = $time + 1000;
                }
                $malice_procs_left = 3;
            }
            else
            {
                add_stack( "rage" );
            }

            # ability buffs
            if ($buffs{ "current" }->{ "pulse" }) {
                $pre_prot_damage += $ability_stats{ "damage" }->{ "pulse" }->[
                        $ability_stats{ "level" }->{ "pulse" }->[ $char_level ] ] + 0.15 * get_eff_power();
            }

            if ($buffs{ "current" }->{ "irradiate" }) {
                $pre_prot_damage += $ability_stats{ "damage" }->{ "irradiate" }->[
                        $ability_stats{ "level" }->{ "irradiate" }->[ $char_level ] ] + 0.25 * get_eff_power();
            }

            if ($buffs{ "current" }->{ "serqet_poisons" } >= 2) {
                $pre_prot_damage += $their_health * 0.1;
                if ($buffs{ "current" }->{ "serqet_poisons" } == 3) {
                    $pre_prot_damage += $their_health * 0.1;
                }
            }
            $buffs{ "current" }->{ "serqet_poisons" } = 0;

            # apply sol's bonus only to her base damage, not to polynomicon / telkhines / etc.
            if ( $opts{ 'g' } eq "sol" and $heat == 100 ) { $pre_prot_damage *= 1.25; }

            # add viper shot extra damage
            if ($viper_shots_left > 0) {
                $viper_shots_left--;
                my $pre_prot_damage = $ability_stats{ "tick_damage" }->{ "viper_shot" }->[
                        $ability_stats{ "level" }->{ "viper_shot" }->[ $char_level ] ]
                         + get_eff_power() * $ability_stats{ "tick_scaling" }->{ "viper_shot" };
                my $i = 0;
                # this ability has ticks, schedule them
                while ( $i < 3 ) {
                    # viper shot 3 ticks at 0.5 seconds
                    my $tick_time = $time + ($i + 1) * 0.5 * 1000;
                    while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                    $ticks{ $tick_time } = +[ $pre_prot_damage, "viper shot tick", 0 ];

                    $i++;
                }
            }


            # item buffs

            if($buffs{ "current" }->{ "hydras_lament" }) {
                $hydras_damage += 0.25 * get_basic_attack_damage();
                $hydras_procs++;
                $pre_prot_damage += 0.25 * get_basic_attack_damage();
                $buffs{ "current" }->{ "hydras_lament" } = 0;
                reset_buff_time( "hydras_lament" );
            }

            if ($buffs{ "current" }->{ "polynomicon" }) {
                $damage += calc_mitigated_damage( 0.75 * get_eff_power(), "polynomicon", 1, 1 );
                $polynomicon_procs++;
                $polynomicon_damage = int(calc_mitigated_damage( 0.75 * get_eff_power(), "polynomicon", 0, 1 ));
                $buffs{ "current" }->{ "polynomicon" } = 0;
                reset_buff_time("polynomicon");
            }

            if (defined $items{"telkhines_ring"} or defined $items{ "telkhines" }) {
                #$pre_prot_damage += 35;
                $damage += calc_mitigated_damage( 35, "telkhines", 1, 1 );
                $telkhines_damage += calc_mitigated_damage( 35, "telkhines", 0, 1 );
            }

            if (defined $items{ "qins" }) {
                $pre_prot_damage += 0.04 * $their_health;
            }

            # all damage calcs done, execute the attack
            if ( $action eq "clear" and defined $items{ "golden_bow" } ) {
                $damage += calc_mitigated_damage($pre_prot_damage, "attack", 1, 1);
                $damage += calc_mitigated_damage(0.5 * $pre_prot_damage, "attack", 1, 2);
                $attack_damage += calc_mitigated_damage($pre_prot_damage, "attack", 0, 1);
                $attack_damage += calc_mitigated_damage(0.5 * $pre_prot_damage, "attack", 0, 2);
            } else {
                $damage += calc_mitigated_damage($pre_prot_damage, "attack", 1, 1);
                $attack_damage += calc_mitigated_damage($pre_prot_damage, "attack", 0, 1);
            }

            # get ready for next attack
            if (defined $items{"spear"} and
                    ($buffs{ "current" }->{ "pulse" } or $buffs{ "current" }->{ "irradiate" })) {
                reset_buff_time( "spear" );
                add_stack("spear");
            }

            if (defined $items{"demonic_grip"}) {
                reset_buff_time( "demonic_grip" );
                add_stack("demonic_grip");
            }

            if (defined $items{ "ichaival" }) {
                reset_buff_time( "ichaival" );
                add_stack("ichaival");
            }

            if (defined $items{ "executioner" }) {
                reset_buff_time( "executioner" );
                add_stack("executioner");
            }

            # attack chain progression
            my $eff_attack_rate = $attack_rate;
            if ( $opts{ 'g' } eq "sol" ) {
                $eff_attack_rate = $attack_rate +
                        $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * ($heat * 0.25 * 0.012);
                $messages_to_print{ "heat effective attack rate" } = $eff_attack_rate;
            }
            if ( $opts{'g'} eq "ullr" ) {
                $eff_attack_rate = $attack_rate +
                        $ability_stats{ "attack_speed_buff" }->{ "wield_bow" }->[
                        $ability_stats{ "level" }->{ "wield_bow" }->[ $char_level ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ( $buffs{ "current" }->{ "vengeful_assault" } ) {
                $eff_attack_rate = $attack_rate + 
                $ability_stats{ "attack_speed_buff" }->{ "vengeful_assault" }->[
                        $ability_stats{ "level" }->{ "vengeful_assault" }->[ $char_level ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ( $buffs{ "current" }->{ "pick_me_up" } ) { 
                $eff_attack_rate = $attack_rate + 0.5 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
                # TODO use normal stats logic
            }
            if ( $buffs{ "current" }->{ "maximum_velocity" } ) {
                $eff_attack_rate = $attack_rate + 0.7 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
                # TODO use normal stats logic
            }
            if ($viper_shots_left > 0) {
                $eff_attack_rate = $attack_rate +
                        $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 
                        $ability_stats{ "attack_speed_buff" }->{ "vengeful_assault" }->[
                        $ability_stats{ "level" }->{ "vengeful_assault" }->[ $char_level ] ];
            }

            if ( $eff_attack_rate > 2.5 ) { $eff_attack_rate = 2.5; }

            my $eff_attack_duration = int(1000 / $eff_attack_rate);
            $next_attack = $time + int($eff_attack_duration * ${attack_chain_progression}[ $next_attack_chain ]);
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            $num_attacks++;

            $heat += 5;
            if ( $heat > 100 ) { $heat = 100; }
        }

        #################################################################################
        # get ready for next tick of time
        #################################################################################


        if ( defined $items{ "malice" }
                and $time == $next_malice_proc and $malice_procs_left > 0 )
        {
            $total_malice_procs++;
            my $pre_prot_damage = 0.25 * get_basic_attack_damage();

            $damage += calc_mitigated_damage($pre_prot_damage, "malice", 1, 1);
            $malice_damage += calc_mitigated_damage($pre_prot_damage, "malice", 0, 1);

            $malice_procs_left -= 1;
            $next_malice_proc += 1000;
        }

        foreach my $buff (keys $buffs{ "time" } ) {
            if ( $time == $buffs{ "time" }->{ $buff } and $time != 0 ) {
                # time's up, reset stacks for this buff
                $buffs{ "current" }->{ $buff } = 0;
            }
        }

        $time++;

    }

    #################################################################################
    # get ready for next iteration
    #################################################################################
    foreach my $ability ( keys $ability_stats{ "time" } )
    {
        # reset all cooldowns
        $ability_stats{ "time" }->{ $ability } = 0;
    }
    foreach my $buff ( keys $buffs{ "time" } ) {
        # reset all buffs
        $buffs{ "time" }->{ $buff } = 0;
        $buffs{ "current" }->{ $buff } = 0;
    }
    %ticks = ();
    $time = 0;
    $combo_idx = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $malice_procs_left = 0;
    $next_malice_proc = 0;
    $viper_shots_left = 0;

    $iteration++;

}

#################################################################################
# output
#################################################################################
foreach my $key (keys %messages_to_print) {
        print $key . " " . $messages_to_print{ $key} . "\n";
}

printf "Num attacks: %d avg damage %.2f\n", $total_attacks/$max_iterations, ($attack_damage /$total_attacks);
printf "Total damage %.2f DPS %.2f\n", $damage/$max_iterations, ($damage / ($max_iterations*$max_time/1000));
printf "Damage from basic attacks %.2f Other damage %.2f\n", ($attack_damage/$max_iterations), (($damage - $attack_damage)/$max_iterations);
if ( defined $items{ "polynomicon" } ) {
    print "Polynomicon procs $polynomicon_procs polynomicon damage $polynomicon_damage\n";
}
if ( defined $items{ "telkhines" } or defined $items{ "telkhines_ring" } ) {
    printf "Telkhines damage %.2f\n", $telkhines_damage;
}
if ( defined $items{ "hydras" } ) {
    print "Hydras procs $hydras_procs hydras damage $hydras_damage\n";
}
if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
    printf "Num crits: %d total crit chance %.2f\n", $crits/$max_iterations, ($crits / $total_attacks);
}
if (defined $items{ "malice" }) {
    printf  "Total Malice procs %d Malice procs/crit %.2f Malice damage %.2f Malice bonus damage per crit %.2f\n", $total_malice_procs/$max_iterations, ($total_malice_procs/$crits), $malice_damage/$max_iterations, ($malice_damage)/($crits);
}
printf "Total lifesteal %.2f\n", ($damage * $lifesteal)/$max_iterations;
printf "Total gold %d damage/gold %.2f\n", $gold, ($damage/$max_iterations) / $gold;


