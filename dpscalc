#!/usr/bin/perl


# Wish list
# divide magical and physical protection
#

use strict;
use warnings;

use Getopt::Std;

#################################################################################
# declare globals
#################################################################################


my %opts;

getopts('vl:t:p:h:g:i:', \%opts);

my $char_level = 20;
if (defined $opts{'l'} ) { $char_level = $opts{'l'}; }

my $verbose = 0;
if ( defined $opts{'v'} ) { $verbose = 1; }

my @items = split( /\s/, $opts{ 'i' } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}







my %ability_stats = (
    "cooldown" => {
        "crush" => 10,
        "sic_em" => 10,
        "sentinel" => 15,
        "im_a_monster" => 90,

        "shadow_lock" => 10,
        "siphon_darkness" => 15,
        "shadow_step" => 15,
        "night_terror" => 90,

        "feather_step" => 8,

        "deathbane" => 10,
        "cobras_kiss" => 18,
        "ambush" => 15,
        "last_breath" => 90,

        "mjolnirs_attunement" => 12,
        "tectonic_rift" => 17,
        "spin_to_win" => 13,
        "anvil_of_dawn" => 90,

    },
    "time" => { # will be updated with cooldown when used
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 0,

        "feather_step" => 0,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 0,

    },
    "damage" => {
        "crush" => [ 0, 90, 140, 190, 240, 290 ],
        "sic_em" => [ 0, 60, 110, 160, 210, 260 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 400, 500, 600, 700, 800 ],

        "shadow_lock" => [ 0, 0, 0, 0, 0, 0 ],
        "siphon_darkness" => [ 0, 90, 160, 230, 300, 370 ],
        "shadow_step" => [ 0, 70, 110, 150, 190, 230 ],
        "night_terror" => [ 0, 200, 250, 300, 350, 400 ],

        "deathbane" => [ 0, 60, 80, 100, 120, 140 ],
        "cobras_kiss" => [ 0, 50, 70, 90, 110, 130 ],
        "ambush" => [ 0, 80, 140, 200, 260, 320 ],
        "last_breath" => [ 0, 0, 0, 0, 0, 0 ],

        "mjolnirs_attunement" => [ 0, 150, 270, 390, 510, 690 ],
        "tectonic_rift" => [ 0, 0, 0, 0, 0, 0 ],
        "spin_to_win" => [ 0, 0, 0, 0, 0, 0 ],
        "anvil_of_dawn" => [ 0, 150, 200, 250, 300, 350 ],

    },
    "hits" => {
        "crush" => 1,
        "sic_em" => 1,
        "sentinel" => 0,
        "im_a_monster" => 1,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 1,
        "night_terror" => 1,

        "deathbane" => 3,
        "cobras_kiss" => 2,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 1,
        "tectonic_rift" => 0,
        "spin_to_win" => 1,
        "anvil_of_dawn" => 1,

    },
    "tick_damage" => {
        "crush" => [ 0, 0, 0, 0, 0, 0 ],
        "sic_em" => [ 0, 0, 0, 0, 0, 0 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 0, 0, 0, 0, 0 ],

        "shadow_lock" => [ 0, 30, 40, 50, 60, 70 ],
        "siphon_darkness" => [ 0, 0, 0, 0, 0, 0 ],
        "shadow_step" => [ 0, 0, 0, 0, 0, 0 ],
        "night_terror" => [ 0, 20, 25, 30, 35, 40 ],

        "deathbane" => [ 0, 0, 0, 0, 0, 0 ],
        "cobras_kiss" => [ 0, 0, 0, 0, 0, 0 ],
        "ambush" => [ 0, 0, 0, 0, 0, 0 ],
        "last_breath" => [ 0, 46, 68, 91, 114, 137 ],

        "mjolnirs_attunement" => [ 0, 0, 0, 0, 0, 0 ],
        "tectonic_rift" => [ 0, 0, 0, 0, 0, 0 ],
        "spin_to_win" => [ 0, 20, 40, 60, 80, 100 ],
        "anvil_of_dawn" => [ 0, 0, 0, 0, 0, 0 ],

    },
    "scaling" => {
        "crush" => 0.8,
        "sic_em" => 0.6,
        "sentinel" => 0,
        "im_a_monster" => 1.2,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 0.4,
        "night_terror" => .6,

        "deathbane" => .45,
        "cobras_kiss" => .4,
        "ambush" => .5,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0.9,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 1.2,

    },
    "tick_scaling" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 0.2,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => .05,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 0.45,
        "anvil_of_dawn" => 0,

    },
    "tick_duration" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => .5,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 1,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 1,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 0.4,
        "anvil_of_dawn" => 0,

    },
    "num_ticks" => {
        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "shadow_lock" => 4,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 5,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 5,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 5,
        "anvil_of_dawn" => 0,

    },
    "next_action" => { # time to next action
        # these are mostly guesses
        "crush" => 0.5,
        "sic_em" => 0.5,
        "sentinel" => 0.5,
        "im_a_monster" => 1,

        "shadow_lock" => 2,
        "siphon_darkness" => 0.5,
        "shadow_step" => 0.5,
        "night_terror" => 1,

        "deathbane" => 1,
        "cobras_kiss" => 0.5,
        "ambush" => 0.5,
        "last_breath" => 1,

        "mjolnirs_attunement" => 0.5,
        "tectonic_rift" => 0.5,
        "spin_to_win" => 2,
        "anvil_of_dawn" => 0.5, # count from dunk time, not chargeup

    },
    "level" => {
        "crush" => 5,
        "sic_em" => 5,
        "sentinel" => 5,
        "im_a_monster" => 5,

        "shadow_lock" => 5,
        "siphon_darkness" => 5,
        "shadow_step" => 5,
        "night_terror" => 5,

        "deathbane" => 5,
        "cobras_kiss" => 5,
        "ambush" => 5,
        "last_breath" => 5,

        "mjolnirs_attunement" => 5,
        "tectonic_rift" => 5,
        "spin_to_win" => 5,
        "anvil_of_dawn" => 5,

    },
);



my %combos = (
    "scylla" => [ "sic_em", "crush", "im_a_monster" ],
    "nox" => [ "shadow_lock", "siphon_darkness", "night_terror" ],
    "freya" => [ ],
    "sol" => [ ],
    "artemis" => [ ],
    #"awilix" => [ "moonlight_charge", "gravity_surge" ],
    "awilix" => [ ],
    "medusa" => [ ],
    "xbal" => [ ],
    "serqet" => [ "cobras_kiss", "deathbane", "last_breath" ],
    "thor" => [ "anvil_of_dawn", "mjolnirs_attunement", "tectonic_rift", "spin_to_win" ],
);




#my %abilities = (
#    "scylla" => [ "sic_em", "crush", "sentinel", "im_a_monster" ],
#    "nox" => [ "shadow_lock", "siphon_darkness", "shadow_step", "night_terror" ],
#    "freya" => [ "irradiate", "pulse", "banish", "valkyries_discretion" ],
#    "sol" => [ "radiance", "stellar_burst", "disapparate", "supernova" ],
#    "artemis" => [ "transgressors_fate", "vengeful_assault", "suppress_the_insolent", "calydonian_boar" ],
#    "awilix" => [ "summon_suku", "feather_step", "moonlight_charge", "gravity_surge" ],
#    "medusa" => [ "viper_shot", "acid_spray", "lacerate", "petrify" ],
#    "xbal" => [ "branching_bolas", "poison_darts", "rising_jaguar", "darkest_of_nights" ],
#    "rama" => [ "astral_strike", "pick_me_up", "rolling_assault", "astral_barrage" ],
#    "ullr" => [ "bladed_arrow", "expose_weakness", "hail_of_arrows", "wield_bow" ],
#    "serqet" => [ "cobras_kiss", "deathbane", "ambush", "last_breath" ],
#    "thor" => [ "anvil_of_dawn", "mjolnirs_attunement", "tectonic_rift", "spin_to_win" ],
#);






my %base_stats = (
    "type" => {
        "freya" => "magical",
        "sol" => "magical",
        "scylla" => "magical",
        "nox" => "magical",

        "artemis" => "physical",
        "awilix" => "physical",
        "medusa" => "physical",
        "xbal" => "physical",
        "rama" => "physical",
        "ullr" => "physical",
        "serqet" => "physical",
        "thor" => "physical",
    },
    "attack_rate" => {
        "freya" => 0.95,
        "sol" => 1,
        "scylla" => 1,
        "nox" => 1,

        "artemis" => 0.95,
        "awilix" => 1,
        "medusa" => 0.95,
        "xbal" => 0.95,
        "rama" => 0.95,
        "ullr" => 0.95,
        "serqet" => 1,
        "thor" => 1,
    },
    "attack_rate_level_scaling" => {
        "freya" => 0.0195,
        "sol" => 0.018,
        "scylla" => 0.008,
        "nox" => 0.008,

        "artemis" => 0.014,
        "awilix" => 0.0189,
        "medusa" => 0.014,
        "xbal" => 0.01,
        "rama" => 0.017,
        "ullr" => 0.015,
        "serqet" => 0.0216,
        "thor" => 0.0145
    },
    "auto_damage" => {
        "freya" => 35,
        "sol" => 34,
        "scylla" => 34,
        "nox" => 34,

        "artemis" => 35,
        "awilix" => 38,
        "medusa" => 38,
        "xbal" => 37,
        "rama" => 40,
        "ullr" => 38,
        "serqet" => 39,
        "thor" => 39,
    },
    "auto_level_scaling" => {
        "freya" => 1.5,
        "sol" => 1.45,
        "scylla" => 1.45,
        "nox" => 1.5,

        "artemis" => 2.05,
        "awilix" => 2.16,
        "medusa" => 2.6,
        "xbal" => 2.5,
        "rama" => 2.5,
        "ullr" => 2.4,
        "serqet" => 2.25,
        "thor" => 2.4,
    },
    "mana" => {
        "freya" => 220,
        "sol" => 300,
        "scylla" => 298,
        "nox" => 250,

        "artemis" => 205,
        "awilix" => 220,
        "medusa" => 220,
        "xbal" => 220,
        "rama" => 205,
        "ullr" => 230,
        "serqet" => 240,
        "thor" => 240,
    },
    "mana_level_scaling" => {
        "freya" => 37,
        "sol" => 57,
        "scylla" => 56,
        "nox" => 38,

        "artemis" => 34,
        "awilix" => 38,
        "medusa" => 34,
        "xbal" => 37,
        "rama" => 34,
        "ullr" => 40,
        "serqet" => 40,
        "thor" => 38,
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
        "scylla" => [ 1 ],
        "nox" => [ 1 ],

        "artemis" => [ 1 ],
        "awilix" => [ 1, 0.75, 1.25 ],
        "medusa" => [ 1 ],
        "xbal" => [ 1 ],
        "rama" => [ 1 ],
        "ullr" => [ 1 ],
        "serqet" => [ 1, 0.75, 1.25 ],
        "thor" => [ 1 ],
    },
);



my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ 'g' } } };
my $next_attack_chain = 0;

my %messages_to_print;

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ 'g' } }
        * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
my $mana = $base_stats{ "mana" }->{ $opts{ 'g' } }
        + $char_level * $base_stats{ "mana_level_scaling" }->{ $opts{ 'g' } };

my $base_crit_chance = 0;
my $crits = 0;
my $damage = 0;
my $attack_damage = 0;
my $malice_damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;
my $gold = 0;

my $physical_power = 0;
my $magical_power = 0;
my $lifesteal = 0;
if ( $opts{ 'g' } eq "freya" ) { $lifesteal += 0.15; }
my $cdr = 0;

my $their_protection = 9 + 2.6 * 20 + 40; # Sol with MoR
if ( defined $opts{'p'} ) {
    $their_protection = $opts{'p'};
}

my $their_health = 400 + 20 * 75 + 250; #sol with MoR
if ( defined $opts{ 'h' } ) {
    $their_health = $opts{ 'h' };
}

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;

#################################################################################
# magical items
#################################################################################
if (defined $items{"pen_boots"}) {
    $magical_power += 45;
    $flat_pen += 10;
    $gold += 1700;
}

if (defined $items{"cooldown_boots"}) {
    $magical_power += 30;
    $cdr += 0.15;
    $mana += 250;
    $gold += 1600;
}

if (defined $items{"void_stone"}) {
    $magical_power += 40;
    $flat_reduction += 15;
    $gold += 2350;
}

if (defined $items{"demonic_grip"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.25;
    $magical_power += 60;
    $gold += 2280;
}
my $demonic_grip_stacks = 0;
my $demonic_grip_end = 0;

if (defined $items{"telkhines_ring"} or defined $items{ "telkhines" }) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.1;
    $magical_power += 45;
    $gold += 2125;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.3;
    $gold += 2140;
}

if (defined $items{"polynomicon"}) {
    $magical_power += 75;
    $mana += 300;
    $lifesteal += .1;
    $gold += 2300;
}
my $has_polynomicon_buff = 0;

if (defined $items{"spear"}) {
    $magical_power += 45;
    $flat_pen += 15;
    $gold += 2150;
}
my $spear_stacks = 0;
my $spear_end = 0;

if (defined $items{"shard"}) {
    $magical_power += 70;
    $percent_pen += .33;
    $gold += 2050;
}

if (defined $items{"bancrofts"}) {
    $magical_power += 100;
    $lifesteal += .12;
    $gold += 2400;
}

if (defined $items{"rod"}) {
    $magical_power += 125;
    $gold += 3320;
}

if (defined $items{"chronos"}) {
    $magical_power += 75;
    $cdr += 0.25;
    $gold += 2400;
}

if (defined $items{"pythagorems"}) {
    $magical_power += 90;
    $lifesteal += .25;
    $cdr += 0.1;
    $gold += 2600;
}

if (defined $items{"book"}) {
    $mana += 875;
    $magical_power += 100 + 0.03 * $mana;
    $gold += 2650;
}

if (defined $items{"gem"} ) {
    $magical_power += 70;
    $mana += 250;
    $gold += 2850;
}


#################################################################################
# physical items
#################################################################################

# jotunn's wrath
if (defined $items{"jotunns"} or defined $items{ "jotunns_wrath" }) {
    $physical_power += 40;
    $flat_pen += 11;
    $mana += 150;
    $cdr += 0.25;
    $gold += 2440;
}

# transcendence
if (defined $items{"transcendence"}) {
    $mana += 1050;
    $physical_power += 35;
    $physical_power += 0.03 * $mana;
    $gold += 2600;
}

# qin's sais
if (defined $items{"qins"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $physical_power += 30;
    $gold += 2850;
}

# asi
if (defined $items{"asi"}) {
    $flat_pen += 15;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1780;
}

# brawler's beatstick
if (defined $items{"brawlers"}) {
    $physical_power += 40;
    $flat_pen += 20;
    $gold += 2400;
}

# titan's bane
if (defined $items{"titans"} or defined $items{"titans_bane"}) {
    $percent_pen += 0.33;
    $gold += 2050;
}

# warrior tabi
if (defined $items{"warrior_tabi"}) {
    $physical_power += 40;
    $gold += 1550;
}

# ninja tabi
if (defined $items{"ninja_tabi"}) {
    $physical_power += 20;
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1500;
}

# executioner
if (defined $items{"executioner"}) {
    $physical_power += 30;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 2250;
}
my $executioner_stacks = 0;
my $executioner_end = 0;

# ichaival
if (defined $items{"ichaival"}) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $flat_pen += 10;
    $gold += 1700;
}
my $ichaival_stacks = 0;
my $ichaival_end = 0;

# dev's gloves
if (defined $items{"devs_gloves"}) {
    $physical_power += 55;
    $lifesteal += 0.25;
    $gold += 2050;
}

# soul eater
if (defined $items{"soul_eater"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $physical_power += 15;
    $lifesteal += 0.2;
    $gold += 2000;
}

# golden bow
if (defined $items{"golden_bow"}) {
    $base_crit_chance += 0.1;
    $physical_power += 35;
    $gold += 2330;
}

# rage
if (defined $items{"rage"}) {
    $base_crit_chance += 0.3;
    $physical_power += 30;
    $gold += 2755;
}
my $rage_stacks = 0;

# malice
if (defined $items{"malice"}) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 2900;
}
my $total_malice_procs = 0;
my $next_malice_proc = 0;
my $malice_procs_left = 0;

# deathbringer
if (defined $items{"deathbringer"} or defined $items{ "db" }) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3150;
}

if (defined $items{"hydras"}) {
    $cdr += 0.15;
    $physical_power += 30;
}
my $has_hydras_buff = 0;



#################################################################################
# calculate stats
#################################################################################
if ($cdr > 0.4) { $cdr = 0.4; }

if ($attack_rate > 2.5) { $attack_rate = 2.5; }

if ( $opts{'g'} eq "scylla" ) {
    if ( $ability_stats{ "level" }->{ "crush" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sic_em" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "im_a_monster" } == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sentinel" } == 5 ) { $magical_power += 20; }
}

if (defined $items{"rod"}) { $magical_power *= 1.25; }



#################################################################################
# iteration and time mgmt
#################################################################################

my $iteration = 0;
my $max_iterations = 1000;
if ( $base_stats{ "type" }->{ $opts{ 'g'} } eq "magical" ) {
    $max_iterations = 1; # no crit, no rng
}
my $max_time = 5100;
if (defined $opts{'t'}) { $max_time = $opts{'t'}; }




#################################################################################
# buffs and stacks
#################################################################################

my $serqet_poisons = 0;
my $expose_weakness = 0;
my $expose_weakness_end = 0;
my $viper_shots_left = 0;
my $vengeful_assault = 0;
my $vengeful_assault_end = 0;
my $astral_strike = 0;
my $astral_arrows = 0;
my $pick_me_up = 0;
my $pick_me_up_end = 0;
my $gravity_surge = 0;
my $gravity_surge_end = 0;
my $has_initiative = 0;
my $initiative_end = 0;
my $has_branching_bolas = 0;
my $xbal_passive_stacks = 0;
if ( $opts{'g'} eq "xbal" ) {
    $xbal_passive_stacks = 6;
}
my $still_target_stacks = 0;
my $still_target_end = 0;

my $has_irradiate = 0;
my $has_pulse = 0;
my $irradiate_end = 0;
my $pulse_end = 0;

my $heat = 0;
my $radiance_time = 0;
my $radiance_level = 5;
my @radiance_heat_amount = ( 0, 40, 50, 60, 70, 80 );
my $stellar_burst_time = 0;
my $stellar_burst_detonate_time = $stellar_burst_time + 100;
my $stellar_burst_level = 5;
my @stellar_burst_damage = ( 0, 40, 70, 100, 130, 160 );

my $polynomicon_procs = 0;
my $polynomicon_damage = 0;
my $polynomicon_time = 0;

my $hydras_procs = 0;
my $hydras_damage = 0;
my $hydras_time = 0;

my $shadow_lock_ticks_left = 0;
my $shadow_lock_next_tick = 0;
my $night_terror_ticks_left = 0;
my $night_terror_next_tick = 0;

my %ticks = ();

my $combo_idx = 0;
my $next_skill;



#################################################################################
# calculations
#################################################################################

sub ability_crits($) {
    my $pre_prot_damage = shift;

    # some abilities can crit, but they do not proc rage
    # not sure if the crit chance for abilities is affected by rage stacks TODO

    # crit chance
    my $total_crit_chance = $base_crit_chance;

    my $rng = rand();
    if ( $rng < $total_crit_chance ) {
        # critical hit
        $pre_prot_damage *= 2;
        if (defined $items{ "deathbringer" }) {
            $pre_prot_damage *= 1.2; # 240%
        }

        # handle malice
        if ($malice_procs_left == 0) {
            # no procs, set next proc for 1 sec from now, otherwise just refresh count
            $next_malice_proc = $time + 1000;
        }
        $malice_procs_left = 3;
    }

    return $pre_prot_damage;
}


sub get_eff_power() {
    
    if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
        my $eff_physical_power = $physical_power + 5 * $xbal_passive_stacks + 10 * $ichaival_stacks;
        if ($has_initiative) {
            $eff_physical_power *= 1.3;
        }
        return $eff_physical_power
    }
    else
    {
        my $eff_magical_power = $magical_power;
        if ( $opts{ 'g' } eq "sol" ) {
            $eff_magical_power *= (1 + 0.25 * $heat / 100);
            $eff_magical_power = int( $eff_magical_power );
        }
        return $eff_magical_power;
    }
}

sub get_basic_attack_damage() {

    if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
        my $eff_physical_base_dmg  = ($base_stats{ "auto_damage" }->{ $opts{ 'g' } }
                + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
                + get_eff_power())
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_physical_base_dmg;
    }
    else
    {
        my $eff_magical_base_dmg = ($base_stats{ "auto_damage" }->{ $opts{ 'g' } }
                + $char_level * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
                + 0.2 * get_eff_power())
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_magical_base_dmg;
    }
}

sub calc_mitigated_damage( $ $ $ ) {

    my $pre_prot_damage = shift;
    my $damage_source = shift;
    my $print = shift;

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot *= (1 - 0.1*$spear_stacks);
    $their_eff_prot *= (1 - 0.07*$demonic_grip_stacks);
    $their_eff_prot *= (1 - 0.08 * $executioner_stacks);
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot -= 10*$spear_stacks;
    $their_eff_prot -= 6 * $executioner_stacks;
    $their_eff_prot -= 5*$demonic_grip_stacks;
    $their_eff_prot *= (1 - $percent_pen);
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;


    if ( $verbose and $print ) {
        printf "time %6d %16s prot %4d -> %4d damage %4d -> %4d ",
                $time, $damage_source, $their_protection, $their_eff_prot, $pre_prot_damage, int(( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage);
        if ( defined $items{ "spear" } ) {
            print " $spear_stacks spear stacks "
        }
        if ( defined $items{ "demonic_grip" } ) {
            print " $demonic_grip_stacks grip stacks";
        }
        if ( defined $items{ "executioner" } ) {
            print " $executioner_stacks executioner stacks";
        }
        #if ( $opts{'g'} eq "sol" ) {
        #    print " $heat heat ";
        #}
        print "\n";
    }
    
    return $damage;

}


#################################################################################
# skill ordering and cooldowns
#################################################################################
sub get_next_skill() {
    if ( scalar( $combos{ $opts{'g'} } ) == 0 ) {
        return undef;
    }
    if ( scalar( $combos{ $opts{'g'} } ) < $combo_idx ) {
        $combo_idx = 0;
    }
    return $combos{ $opts{ 'g' } }->[ $combo_idx ];
}

#################################################################################
# main loop
#################################################################################


print "effective power " . get_eff_power() . "\n";
print "base attack damage " . get_basic_attack_damage() . "\n";
print "base attack rate $attack_rate\n";


while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        #################################################################################
        # execute skills
        #################################################################################
        undef $next_skill;
        $next_skill = get_next_skill();
        if ( defined $next_skill ) {
            if ( $time >= $ability_stats{ "time" }->{ $next_skill } ) {
                # time to use next ability
                my $pre_prot_damage = $ability_stats{ "damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill } ] +
                        (get_eff_power() * $ability_stats{ "scaling" }->{ $next_skill });
                my $hit = 0;
                while ( $hit < $ability_stats{ "hits" }->{ $next_skill } ) {
                    if( $pre_prot_damage > 0 ) { 
                        if ( $next_skill eq "deathbane" ) {
                            # deathbane can crit
                            $pre_prot_damage = ability_crits( $pre_prot_damage );
                        }
                        $damage += calc_mitigated_damage( $pre_prot_damage, $next_skill, 1 );
                        if(defined $items{"spear"}) {
                            $spear_stacks++;
                            $spear_end = $time + 5000;
                            if ($spear_stacks > 2) { $spear_stacks = 2; }
                        }
                    }
                    $hit++;
                }

                $pre_prot_damage = $ability_stats{ "tick_damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill } ] +
                        (get_eff_power() * $ability_stats{ "tick_scaling" }->{ $next_skill });
                if( $pre_prot_damage > 0 ) { 
                    # this ability has ticks, schedule them
                    my $i = 0;
                    while ( $i < $ability_stats{ "num_ticks" }->{ $next_skill } ) {

                        my $tick_time = $time + ($i + 1) * $ability_stats{ "tick_duration" }->{ $next_skill } * 1000;
                        while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                        if ( $next_skill ne "last_breath" ) {
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick", 0 ];
                        } else {
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick", 1 ];
                        }

                        $i++;
                    }
                }

                if ( $opts{ 'g' } eq "serqet" ) {
                    $serqet_poisons++;
                }

                if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                    $has_polynomicon_buff = 1;
                }
                if (defined $items{"hydras"} and $hydras_time <= $time) {
                    $has_hydras_buff = 1;
                }

                $ability_stats{ "time" }->{ $next_skill } = $time +
                        (1000*($ability_stats{ "cooldown" }->{ $next_skill } * (1 - $cdr)));

                $next_attack_chain = 0;
                if ( $next_attack < $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill } ) {
                    $next_attack = $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill };
                }

                $combo_idx++;
            }
        }

        if ( defined $ticks{ $time } ) {
            if ( $ticks{ $time }->[ 2 ] == 0 ) {
                $damage += calc_mitigated_damage( $ticks{ $time }->[0], $ticks{ $time }->[1], 1 );
            } else {
                # true damage; here for last breath
                $damage += $ticks{ $time }->[0];
                if ( $verbose ) {
                    printf "time %d %s damage %d\n", $time, $ticks{ $time }->[1], $ticks{ $time }->[0];
                }
            }
            if(defined $items{"spear"}) {
                $spear_stacks++;
                $spear_end = $time + 5000;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }
        }
        
        if ($opts{'g'} eq "freya" and $time == 0) {
            $has_irradiate = 1;
            $has_pulse = 1;
            $irradiate_end = $time + 5000;
            $pulse_end = $time + 5000;
            if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                $has_polynomicon_buff = 1;
            }
        }

        if ($opts{'g'} eq "sol" and $time == $stellar_burst_detonate_time) {
            # second blast, the time is probably not 100 but it's before the next attack
            my $pre_prot_damage = $stellar_burst_damage[ $stellar_burst_level ] +
                    0.35 * get_eff_power();
            $damage += calc_mitigated_damage( $pre_prot_damage, "stellar burst", 1 );

            if(defined $items{"spear"}) {
                $spear_stacks++;
                $spear_end = $time + 5000;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }

            $heat += 10;
        }

        if ($opts{'g'} eq "sol" and $time == $radiance_time) {
            $heat += $radiance_heat_amount[ $radiance_level ];
            if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                $has_polynomicon_buff = 1;
            }
            $radiance_time += 15000;
        }

        if ($opts{'g'} eq 'xbal' and $time == 0) {
            $has_branching_bolas = 1;
        }

        if ($opts{'g'} eq "medusa" and $time == -1) {
            # start combo with ult
            my $pre_prot_damage = 700 + get_eff_power();
            $damage += calc_mitigated_damage($pre_prot_damage, "petrify", 1);

            $next_attack = 250;
        }

        if ($opts{'g'} eq "rama" and $time == 0) {
            $pick_me_up = 1;
            $pick_me_up_end = $time + 5000;
            $astral_strike = 1;
            $astral_arrows = 5;
        }

        if ($opts{'g'} eq "ullr" and $time == 0) {
            $expose_weakness = 1;
            $expose_weakness_end = $time + 5000;
        }

        if ($opts{'g'} eq "artemis" and $time == 0) {
            # start with tusky
            #my $pre_prot_damage = 450 + $base_damage;
            #$damage += calc_mitigated_damage($pre_prot_damage);
            $vengeful_assault = 1;
            $vengeful_assault_end = $time + 5000;
        }

        if ($opts{'g'} eq "awilix" and $time == 0) {
            # start combo with moonlight charge + Ult
            # TODO use normal combo logic for this
            my $pre_prot_damage = 250 + 0.6 * get_eff_power();
            $damage += calc_mitigated_damage($pre_prot_damage, "moonlight charge", 1);

            $pre_prot_damage = 400 + 0.8 * get_eff_power();
            $damage += calc_mitigated_damage($pre_prot_damage, "gravity surge", 1);

            $has_initiative = 1;
            $initiative_end = $time + 2500;

            if (defined $items{"hydras"} and $hydras_time <= $time) {
                $has_hydras_buff = 1;
            }

            $next_attack = 250;
        }

        if ($opts{'g'} eq "medusa" and $num_attacks == 1 and $viper_shots_left == 0) {
            # start viper shot after the first AA for AA cancel benefit
            $viper_shots_left = 3;
            my $viper_attack_rate = $attack_rate +
                    $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 0.8;
            if ($viper_attack_rate > 2.5) {
                $messages_to_print{ "overcapping viper attack rate" } = 1;
                $viper_attack_rate = 2.5;
            }
            if (defined $items{"hydras"} and $hydras_time <= $time) {
                $has_hydras_buff = 1;
            }

            my $viper_attack_duration = int(1000 / $viper_attack_rate);
            $next_attack = $time + $viper_attack_duration;
        }

        if ($opts{'g'} eq "awilix" and $next_attack_chain == 2 and
                $ability_stats{ "time" }->{ "feather_step" } <= $time ) {
            # time to feather step
            my $pre_prot_damage = 360 + get_eff_power(); # TODO use hashed scaling/damage

            $damage += calc_mitigated_damage($pre_prot_damage, "feather step", 1);

            # reset attack chain
            $next_attack_chain = 0;
            $next_attack = $time + 250; # don't know actual AA cancel durations

            if (defined $items{"hydras"} and $hydras_time <= $time) {
                $has_hydras_buff = 1;
            }

            $ability_stats{ "time" }->{ "feather_step" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "feather_step" } * (1 - $cdr)));
        }



        #################################################################################
        # execute basic attacks
        #################################################################################
        if ( $time == $next_attack ) {

            my $pre_prot_damage = get_basic_attack_damage();
            
            if($expose_weakness or $has_branching_bolas) { $pre_prot_damage += 50; }

            if($astral_strike and $astral_arrows > 0) {
                $pre_prot_damage += 50;
                $astral_arrows--;
            }

            # crit chance
            my $total_crit_chance = $base_crit_chance;

            if ($opts{ 'g' } eq "artemis") {
                $total_crit_chance += 0.05 * $still_target_stacks;

                $still_target_stacks += 1;
                if ($still_target_stacks > 3) {$still_target_stacks = 3;}
                $still_target_end = $time + 4000;
            }

            if (defined $items{ "rage" }) {
                $total_crit_chance += 0.1 * $rage_stacks;
            }

            my $rng = rand();
            if ( $rng < $total_crit_chance ) {
                # critical hit
                $pre_prot_damage *= 2;
                if (defined $items{ "deathbringer" }) {
                    $pre_prot_damage *= 1.2; # 240%
                }
                $crits++;

                # handle rage
                $rage_stacks = 0;

                # handle malice
                if ($malice_procs_left == 0) {
                    # no procs, set next proc for 1 sec from now, otherwise just refresh count
                    $next_malice_proc = $time + 1000;
                }
                $malice_procs_left = 3;
            }
            else
            {
                # handle rage
                if ( $rage_stacks < 5 ) {
                    $rage_stacks++;
                }
            }

            # ability buffs
            if ($has_pulse) {
                $pre_prot_damage += 60 + 0.15 * get_eff_power();
            }

            if ($has_irradiate) {
                $pre_prot_damage += 100 + 0.25 * get_eff_power();
            }

            if ($serqet_poisons >= 2) {
                $pre_prot_damage += $their_health * 0.1;
                if ($serqet_poisons == 3) {
                    $pre_prot_damage += $their_health * 0.1;
                }
            }
            $serqet_poisons = 0;

            # apply sol's bonus only to her base damage, not to polynomicon / telkhines / etc.
            if ( $opts{ 'g' } eq "sol" and $heat == 100 ) { $pre_prot_damage *= 1.25; }

            # add viper shot extra damage
            if ($viper_shots_left > 0) {
                $viper_shots_left--;
                my $pre_prot_damage = 30 + get_eff_power() * 0.1;
                my $i = 0;
                # this ability has ticks, schedule them
                while ( $i < 3 ) {
                    # viper shot 3 ticks at 0.5 seconds
                    my $tick_time = $time + ($i + 1) * 0.5 * 1000;
                    while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                    $ticks{ $tick_time } = +[ $pre_prot_damage, "viper shot tick", 0 ];

                    $i++;
                }
            }


            # item buffs

            if($has_hydras_buff) {
                $hydras_damage += 0.25 * get_basic_attack_damage();
                $hydras_procs++;
                $pre_prot_damage += 0.25 * get_basic_attack_damage();
                $has_hydras_buff = 0;
                $hydras_time = $time + 3000;
            }

            if ($has_polynomicon_buff) {
                $pre_prot_damage += 0.6 * get_eff_power();
                $polynomicon_procs++;
                $polynomicon_damage += 0.6 * get_eff_power();
                $has_polynomicon_buff = 0;
                $polynomicon_time = $time + 3000;
            }

            if (defined $items{"telkhines_ring"}) {
                $pre_prot_damage += 40;
            }

            if ($opts{ 'g' } eq "sol" and $time >= $stellar_burst_time) { # stellar burst
                $pre_prot_damage += $stellar_burst_damage[ $stellar_burst_level ]
                        + 0.35 * get_eff_power();
                if (defined $items{"polynomicon"} and $polynomicon_time <= $time) {
                    $has_polynomicon_buff = 1;
                }
                if(defined $items{"spear"}) {
                    $spear_end = $time + 5000;
                    $spear_stacks++;
                    if ($spear_stacks > 2) { $spear_stacks = 2; }
                }
                $stellar_burst_time += 12000;
            }

            if (defined $items{ "qins" }) {
                $pre_prot_damage += 0.04 * $their_health;
            }

            # all damage calcs done, execute the attack
            $damage += calc_mitigated_damage($pre_prot_damage, "attack", 1);
            $attack_damage += calc_mitigated_damage($pre_prot_damage, "attack", 0);

            # get ready for next attack
            if (defined $items{"spear"} and ($has_irradiate or $has_pulse)) {
                $spear_end = $time + 5000;
                $spear_stacks++;
                if ($spear_stacks > 2) { $spear_stacks = 2; }
            }

            if (defined $items{"demonic_grip"}) {
                $demonic_grip_end = $time + 3000;
                $demonic_grip_stacks++;
                if ($demonic_grip_stacks > 3) { $demonic_grip_stacks = 3; }
            }

            if (defined $items{ "ichaival" }) {
                $ichaival_stacks += 1;
                if ($ichaival_stacks > 3) {
                    $ichaival_stacks = 3;
                }
                $ichaival_end = $time + 3000;
            }

            if (defined $items{ "executioner" }) {
                $executioner_stacks += 1;
                if ($executioner_stacks > 3) {
                    $executioner_stacks = 3;
                }
                $executioner_end = $time + 3000;
            }

            # attack chain progression
            my $eff_attack_rate = $attack_rate;
            if ( $opts{ 'g' } eq "sol" ) {
                $eff_attack_rate = $attack_rate +
                        $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * ($heat * 0.25 * 0.012);
                $messages_to_print{ "heat effective attack rate" } = $eff_attack_rate;
            }
            if ( $opts{'g'} eq "ullr" ) {
                # wield bow
                $eff_attack_rate = $attack_rate + 0.25 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ( $vengeful_assault ) {
                $eff_attack_rate = $attack_rate + 0.75 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ( $pick_me_up ) { 
                $eff_attack_rate = $attack_rate + 0.5 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ($viper_shots_left > 0) {
                $eff_attack_rate = $attack_rate +
                        $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 0.8;
            }

            if ( $eff_attack_rate > 2.5 ) { $eff_attack_rate = 2.5; }

            my $eff_attack_duration = int(1000 / $eff_attack_rate);
            $next_attack = $time + int($eff_attack_duration * ${attack_chain_progression}[ $next_attack_chain ]);
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            $num_attacks++;

            $heat += 5;
            if ( $heat > 100 ) { $heat = 100; }
        }

        #################################################################################
        # get ready for next loop
        #################################################################################


        if ( defined $items{ "malice" }
                and $time == $next_malice_proc and $malice_procs_left > 0 )
        {
            $total_malice_procs++;
            my $pre_prot_damage = 0.25 * get_basic_attack_damage();

            $damage += calc_mitigated_damage($pre_prot_damage, "malice", 1);
            $malice_damage += calc_mitigated_damage($pre_prot_damage, "malice", 0);

            $malice_procs_left -= 1;
            $next_malice_proc += 1000;
        }

        if ($time == $still_target_end) { $still_target_stacks = 0; }
        if ($time == $expose_weakness_end) { $expose_weakness = 0; }
        if ($time == $pick_me_up_end) { $pick_me_up = 0; }
        if ($time == $vengeful_assault_end) { $vengeful_assault = 0; }
        if ($time == $gravity_surge_end) { $gravity_surge = 0; }
        if ($time == $executioner_end ) { $executioner_stacks = 0; }
        if ($time == $ichaival_end ) { $ichaival_stacks = 0; }
        if ($time == $initiative_end ) { $has_initiative = 0; }
        if ($time == $spear_end) { $spear_stacks = 0; }
        if ($time == $demonic_grip_end) { $demonic_grip_stacks = 0; }
        if ($time == $pulse_end) { $has_pulse = 0; }
        if ($time == $irradiate_end) { $has_irradiate = 0; }

        $time++;

    }

    #################################################################################
    # get ready for next loop
    #################################################################################
    foreach my $ability ( keys $ability_stats{ "time" } )
    {
        # reset all cooldowns
        $ability_stats{ "time" }->{ $ability } = 0;
    }
    %ticks = ();
    $time = 0;
    $combo_idx = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $spear_stacks = 0;
    $spear_end = 0;
    $demonic_grip_stacks = 0;
    $demonic_grip_end = 0;
    $executioner_stacks = 0;
    $executioner_end = 0;
    $still_target_stacks = 0;
    $still_target_end = 0;
    $rage_stacks = 0;
    $malice_procs_left = 0;
    $next_malice_proc = 0;
    $time = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $vengeful_assault_end = 0;
    $gravity_surge_end = 0;
    $viper_shots_left = 0;
    $serqet_poisons = 0;

    $iteration++;

}

#################################################################################
# output
#################################################################################
foreach my $key (keys %messages_to_print) {
        print $key . " " . $messages_to_print{ $key} . "\n";
}

printf "Num attacks: %d avg damage %.2f\n", $total_attacks/$max_iterations, ($attack_damage /$total_attacks);
printf "Total damage %.2f DPS %.2f\n", $damage/$max_iterations, ($damage / ($max_iterations*$max_time/1000));
printf "Damage from basic attacks %.2f Other damage %.2f\n", ($attack_damage/$max_iterations), (($damage - $attack_damage)/$max_iterations);
if ( defined $items{ "polynomicon" } ) {
    print "Polynomicon procs $polynomicon_procs polynomicon damage $polynomicon_damage\n";
}
if ( defined $items{ "hydras" } ) {
    print "Hydras procs $hydras_procs hydras damage $hydras_damage\n";
}
if ( $base_stats{ "type" }->{ $opts{'g'} } eq "physical" ) {
    printf "Num crits: %d total crit chance %.2f\n", $crits/$max_iterations, ($crits / $total_attacks);
}
if (defined $items{ "malice" }) {
    printf  "Total Malice procs %d Malice procs/crit %.2f Malice damage %.2f Malice bonus damage per crit %.2f\n", $total_malice_procs/$max_iterations, ($total_malice_procs/$crits), $malice_damage/$max_iterations, ($malice_damage)/($crits);
}
printf "Total lifesteal %.2f\n", ($damage * $lifesteal)/$max_iterations;
printf "Total gold %d damage/gold %.2f\n", $gold, ($damage/$max_iterations) / $gold;


