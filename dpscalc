#!/usr/bin/perl


# Wish list
#

use strict;
use warnings;

# base stats
#my $base_attack_rate = 0.95; # artemis
#my $attack_rate_level_scaling = 0.014; # artemis
#my $base_attack_rate = 1; #awilix
#my $attack_rate_level_scaling = 0.0189; #awilix
my $base_attack_rate = 0.95; # medusa
my $attack_rate_level_scaling = 0.014; # medusa
#my $base_auto_damage = 35; #artemis
#my $auto_level_scaling = 2.05; #artemis
#my $base_auto_damage = 38; #awilix
#my $auto_level_scaling = 2.16; #awilix
my $base_auto_damage = 38; #medusa
my $auto_level_scaling = 2.6; #medusa
#my $base_mana = 205; #artemis
#my $mana_level_scaling = 34; #artemis
#my $base_mana = 220; #awilix
#my $mana_level_scaling = 38; #awilix
my $base_mana = 220; #medusa
my $mana_level_scaling = 34; #medusa
my $base_crit_chance = 0;

#my @attack_chain_progression = ( 1, 0.75, 1.25 );
my @attack_chain_progression = ( 1 );
my $next_attack_chain = 0;

my $has_still_target = 0;
my $still_target_stacks = 0;
my $still_target_end = 0;

my $has_rage            = 1;
my $has_malice          = 0;
my $has_deathbringer    = 1;
my $has_golden_bow      = 0;
my $has_soul_eater      = 1;
my $has_warrior_tabi    = 0;
my $has_ninja_tabi      = 1;
my $has_executioner     = 1;
my $has_titans_bane     = 0;
my $has_brawlers        = 0;
my $has_asi             = 0;
my $has_transcendence   = 0;
my $has_qins            = 1;
my $has_jotunns         = 0;

my $attack_rate = $base_attack_rate + 20 * $attack_rate_level_scaling * $base_attack_rate;
my $mana = $base_mana + 20 * $mana_level_scaling;

my $crits = 0;
my $damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;

my $physical_power = 0;

my $their_protection = 18 + 60 + 20 + 60 + 40 + 55; # bellona with full passive, Mystical, MoR, and Runeforged
#my $their_protection = 9 + (20*2.6) + 40; # Sol with MoR

my $their_health = 480 + 20 * 85 + 200 + 250 + 325 + 100 + 350; # bellona with Mystical, MoR, Frostbound, Runeforged, and Gaia
#my $their_health = 400 + 20 * 75 + 250; #sol with MoR

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;

# jotunn's wrath
if ($has_jotunns) {
    $physical_power += 40;
    $flat_pen += 11;
    $mana += 150;
}

# transcendence
if ($has_transcendence) {
    $mana += 1050;
    $physical_power += 35;
    $physical_power += 0.03 * $mana;
}

# qin's sais
if ($has_qins) {
    $attack_rate += 0.15 * $base_attack_rate;
    $physical_power += 30;
}

# asi
if ($has_asi) {
    $flat_pen += 15;
    $attack_rate += 0.2 * $base_attack_rate;
}

# brawler's beatstick
if ($has_brawlers) {
    $physical_power += 40;
    $flat_pen += 20;
}

# titan's bane
if ($has_titans_bane) {
    $percent_pen += 0.33;
}

# warrior tabi
if ($has_warrior_tabi) {
    $physical_power += 40;
}

# ninja tabi
if ($has_ninja_tabi) {
    $physical_power += 20;
    $attack_rate += 0.15 * $base_attack_rate;
}

# executioner
if ($has_executioner) {
    $physical_power += 30;
    $attack_rate += 0.2 * $base_attack_rate;
}
my $executioner_stacks = 0;
my $executioner_end = 0;

# soul eater
if ($has_soul_eater) {
    $attack_rate += $base_attack_rate * 0.15;
    $physical_power += 15;
}

# golden bow
if ($has_golden_bow) {
    $base_crit_chance += 0.1;
    $physical_power += 35;
}

# rage
if ($has_rage) {
    $base_crit_chance += 0.3;
    $physical_power += 30;
}
my $rage_stacks = 0;

# malice
if ($has_malice) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
}
my $total_malice_procs = 0;
my $next_malice_proc = 0;
my $malice_procs_left = 0;

# deathbringer
if ($has_deathbringer) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
}



my $viper_shots_left = 0;



my $has_buff = 0;
#my $buff_attack_increase = 0.75; # vengeful assault
#my $buff_power_increase = 0; # vengeful assault
my $buff_attack_increase = 0.70; # gravity surge
my $buff_power_increase = 60; # gravity surge

if ($has_buff) {
    $attack_rate += $base_attack_rate * $buff_attack_increase;
    $physical_power += $buff_power_increase;
}

if ($attack_rate > 2.5) { $attack_rate = 2.5; }


my $base_damage = $base_auto_damage + 20 * $auto_level_scaling + $physical_power;
my $attack_duration = int(1000 / $attack_rate);


my $iteration = 0;
my $max_iterations = 1000;
my $max_time = 3000;

my $feather_step_cooldown = 0;













sub calc_mitigated_damage( $ ) {

    my $pre_prot_damage = shift;

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot *= (1 - $percent_pen);
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;
    
    return $damage;

}
























while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        if ($time == -1) {
            # start combo with ult
            my $pre_prot_damage = 700 + $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            $next_attack = 250;
        }


        if ($time == -1) {
            # start combo with moonlight charge + Ult
            my $pre_prot_damage = 250 + 0.6 * $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            
            $pre_prot_damage = 400 + 0.8 * $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            $next_attack = 250;
        }

        if ( $time == $next_attack ) {

            my $total_crit_chance = $base_crit_chance;

            if ($has_still_target) {
                $total_crit_chance += 0.05 * $still_target_stacks;

                $still_target_stacks += 1;
                if ($still_target_stacks > 3) {$still_target_stacks = 3;}
                $still_target_end = $time + 4000;
            }

            if ($has_rage) {
                $total_crit_chance += 0.1 * $rage_stacks;
            }

            my $pre_prot_damage = 0;

            my $rng = rand();
            if ( $rng < $total_crit_chance ) {
                # critical hit
                $pre_prot_damage += $base_damage * 2;
                if ($has_deathbringer) {
                    $pre_prot_damage += $base_damage * 0.4;
                }
                $crits++;

                # handle rage
                $rage_stacks = 0;

                # handle malice
                if ($malice_procs_left == 0) {
                    # no procs, set next proc for 1 sec from now, otherwise just refresh count
                    $next_malice_proc = $time + 1000;
                }
                $malice_procs_left = 3;
            }
            else
            {
                $pre_prot_damage += $base_damage;

                # handle rage
                if ( $rage_stacks < 5 ) {
                    $rage_stacks++;
                }
            }

            if ($has_qins) {
                $pre_prot_damage += 0.04 * $their_health;
            }

            if ($has_executioner) {
                $executioner_stacks += 1;
                if ($executioner_stacks > 3) {
                    $executioner_stacks = 3;
                }
                $executioner_end = $time + 3000;
            }

            my $their_eff_prot = $their_protection;
            $their_eff_prot *= (1 - $percent_reduction);
            if ($has_executioner) {
                $their_eff_prot *= (1 - 0.08 * $executioner_stacks);
            }
            $their_eff_prot -= $flat_reduction;
            if ($has_executioner) {
                $their_eff_prot -= 6 * $executioner_stacks;
            }
            $their_eff_prot *= (1 - $percent_pen);
            $their_eff_prot -= $flat_pen;
            if ($their_eff_prot < 0) { $their_eff_prot = 0; }

            $damage += ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;

            # attack chain progression
            $next_attack = $time + $attack_duration * ${attack_chain_progression}[ $next_attack_chain ];
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }
            $next_attack = int($next_attack + .99999);

            if ($viper_shots_left > 0) {
                $viper_shots_left--;
                my $pre_prot_damage = 90 + $base_damage * 0.3;
                $damage += calc_mitigated_damage( $pre_prot_damage );
                my $viper_attack_rate = $attack_rate + $base_attack_rate * 0.8;
                if ($viper_attack_rate > 2.5) {
                    #print "overcapping viper attack rate\n";
                    $viper_attack_rate = 2.5;
                }
                my $viper_attack_duration = int(1000 / $viper_attack_rate);
                $next_attack = $time + $viper_attack_duration;
            }

            $num_attacks++;
        }

        if ($num_attacks == 1 and $viper_shots_left == 0) {
            $viper_shots_left = 3;
            my $viper_attack_rate = $attack_rate + $base_attack_rate * 0.8;
            if ($viper_attack_rate > 2.5) {
                print "overcapping viper attack rate\n";
                $viper_attack_rate = 2.5;
            }
            my $viper_attack_duration = int(1000 / $viper_attack_rate);
            $next_attack = $time + $viper_attack_duration;
        }

#        if ($feather_step_cooldown < $time and $num_attacks == 2) {
#            # time to feather step
#            my $pre_prot_damage = 360 + $base_damage;
#
#            $damage += calc_mitigated_damage($pre_prot_damage);
#
#            # reset attack chain
#            $next_attack_chain = 0;
#            $next_attack = $time + 250; # don't know actual AA cancel durations
#
#            $feather_step_cooldown += 8000;
#        }

        if ($time == $still_target_end) {
            $still_target_stacks = 0;
        }

        if ( $time == $executioner_end ) {
            $executioner_stacks = 0;
        }

        if ( $has_malice and $time == $next_malice_proc and $malice_procs_left > 0 )
        {
            $total_malice_procs++;
            my $pre_prot_damage = 0.25 * $base_damage;

            $damage += calc_mitigated_damage($pre_prot_damage);

            $malice_procs_left -= 1;
            $next_malice_proc += 1000;
        }
        $time++;
    }

    # reset
    $executioner_stacks = 0;
    $executioner_end = 0;
    $still_target_stacks = 0;
    $still_target_end = 0;
    $rage_stacks = 0;
    $malice_procs_left = 0;
    $next_malice_proc = 0;
    $time = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $feather_step_cooldown = 0;

    $iteration++;

}

print "Base attack rate $attack_rate Base attack damage $base_damage\n";
print "Num attacks: " . $total_attacks/$max_iterations . ", avg damage " . ($damage / $total_attacks) . "\n";
print "Total damage " . $damage/$max_iterations . " dps " . ($damage / ($max_iterations*$max_time/1000)) . "\n";
print "Num crits: " . $crits/$max_iterations .", total crit chance " . ($crits / $total_attacks) . "\n";
if ($has_malice) {
    print  "Total Malice procs " . $total_malice_procs/$max_iterations . " Malice procs/crit " . ($total_malice_procs/$crits) . " Malice bonus DPS " . ($total_malice_procs * 0.25 * $base_damage)/($max_iterations*$max_time/1000) . "\n";
}



