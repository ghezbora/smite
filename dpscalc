#!/usr/bin/perl


# Wish list
#
# implement pre-hit duration and post-hit duration correctly
# 
# implement long-term sustainable damage (very high # targets)
#
# add isis
# add nu wa
# add janus
# add poseidon
# add ravana
# add bellona
# add amaterasu
# add poison darts for xbal
# add ne zha
#

use strict;
use warnings;

use Getopt::Std;
use Getopt::Long;
use Data::Dumper;

#################################################################################
# opts
#################################################################################

my %opts;

my $VERBOSITY_QUIET = 1;
my $VERBOSITY_NORMAL = 3;
my $VERBOSITY_EXTRA = 5;
my $VERBOSITY_EPIC = 7;
my $VERBOSITY_LEGENDARY = 9;

# set defaults
$opts{ "enemy" } = "chiron";
$opts{ "verbosity" } = $VERBOSITY_NORMAL;
$opts{ "action" } = "kill";
$opts{ "level" } = 20;

GetOptions( 'god=s' => \$opts{ "god" },
            'enemy=s' => \$opts{"enemy"},
            'items=s' => \$opts{"items"},
            'enemy_items=s' => \$opts{"enemy_items"},
            'verbosity=i' => \$opts{"verbosity"},
            'action=s' => \$opts{"action"},
            'iterations=i' => \$opts{"iterations"},
            'level=i' => \$opts{"level"} );

if ( not defined $opts{ "god" } or not defined $opts{ "items" } ) {
    print "god and items are required options\n";
    exit;
}

my @items = split( /\s/, $opts{ "items" } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}


#################################################################################
# stat tables
#################################################################################



my %protection_stats = (
    "physical_protection" => {
        "bastet" => (12 + 2.9 * $opts{"level"}),
        "chiron" => (12 + 2.8 * $opts{"level"}),
        "sol" => (9 + 2.6 * $opts{"level"}),
        "khepri" => (19 + 3 * $opts{"level"}), # TODO do this for base god stats too
        "bellona" => (18 + 3 * $opts{"level"}),
        "hercules" => (18 + 3 * $opts{"level"}),
    },
    "magical_protection" => {
        "bastet" => (30 + 0.9 * $opts{"level"}),
        "chiron" => (30 + 0.9 * $opts{"level"}),
        "sol" => 30,
        "khepri" => (30 + 0.9 * $opts{"level"}),
        "bellona" => (30 + 0.9 * $opts{"level"}),
        "hercules" => (30 + 0.9 * $opts{"level"}),
    },
    "health" => {
        "bastet" => (415 + 80 * $opts{"level"}),
        "chiron" => (460 + 75 * $opts{"level"}),
        "sol" => (400 + 75 * $opts{"level"}),
        "khepri" => (510 + 90 * $opts{"level"}),
        "bellona" => (480 + 85 * $opts{"level"} ),
        "hercules" => (480 + 86 * $opts{"level"}),
    },
    "default_items" => {
        "bastet" => "void_shield",
        "sol" => "",
        "chiron" => "",
        "khepri" => "sov heartward spirit_robe winged_blade bov",
        "bellona" => "bov urchin frostbound bulwark void_shield",
        "hercules" => "thebes gaia bulwark urchin",
    },
);


my @enemy_items;

if (defined $opts{"enemy_items"} ) {
    @enemy_items = split( /\s/, $opts{ "enemy_items" } );
} else {
    @enemy_items = split( /\s/, $protection_stats{ "default_items" }->{ $opts{"enemy" } } );
}

my %enemy_items;

foreach my $item (@enemy_items) {
    $enemy_items{ $item } = 1;
}


my %ability_stats = (
    "cooldown" => {
        "slice_and_dice" => 13,
        "divine_judgment" => 70,

        "venomous_bite" => 15, # TODO scales
        "cocoon" => 15,

        "lash" => 15, # TODO scales
        "incense" => 18,

        "crush" => 10,
        "sic_em" => 10,
        "sentinel" => 15,
        "im_a_monster" => 90,

        "so_beautiful" => 15, #TODO scales

        "ricochet" => 10,
        "mark_of_golden_crow" => 18,
        "divebomb" => 15,
        "sunbreaker" => 90,

        "whirlwind" => 15, # TODO scales
        "zephyr" => 7,
        "slipstream" => 15,
        "nine_winds" => 80,

        "moonlight_charge" => 12,
        "feather_step" => 8,
        "gravity_surge" => 90,

        "stellar_burst" => 12,
        "radiance" => 15,

        "irradiate" => 11,
        "pulse" => 11,

        "stop_time" => 18, # TODO scales
        "time_rift" => 5,

        "shadow_lock" => 10,
        "siphon_darkness" => 15,
        "shadow_step" => 15,
        "night_terror" => 90,

        "acid_spray" => 14,
        "viper_shot" => 10,

        "suppress_the_insolent" => 10,
        "vengeful_assault" => 14, # TODO this cooldown scales

        "feather_step" => 8,

        "deathbane" => 10,
        "cobras_kiss" => 18,
        "ambush" => 15,
        "last_breath" => 90,

        "mjolnirs_attunement" => 12,
        "tectonic_rift" => 17,
        "spin_to_win" => 13,
        "anvil_of_dawn" => 90,

        "unchained" => 15,
        "brutalize" => 14,
        "ragnarok" => 90,
        
        "pounce" => 12,
        "razor_whip" => 15,
        "declaw" => 10,
        "cat_call" => 90,

        "spirit_arrow" => 15,

        "thrown_axe" => 14,
        "hail_of_arrows" => 15,
        "bladed_arrow" => 14,

        "training_exercise" => 15,
    },
    "time" => { # will be updated with cooldown when used
        "slice_and_dice" => 0,
        "divine_judgment" => 0,

        "venomous_bite" => 0,
        "cocoon" => 0,

        "lash" => 0,
        "incense" => 0,

        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "moonlight_charge" => 0,
        "feather_step" => 0,
        "gravity_surge" => 0,

        "so_beautiful" => 0,

        "ricochet" => 0,
        "mark_of_golden_crow" => 0,
        "divebomb" => 0,
        "sunbreaker" => 0,

        "whirlwind" => 0,
        "zephyr" => 0,
        "slipstream" => 0,
        "nine_winds" => 0,

        "stellar_burst" => 0,
        "radiance" => 0,

        "irradiate" => 0,
        "pulse" => 0,

        "stop_time" => 0,
        "time_rift" => 0,

        "acid_spray" => 0,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 0,

        "feather_step" => 0,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 0,

        "unchained" => 0,
        "brutalize" => 0,
        "ragnarok" => 0,

        "pounce" => 0,
        "razor_whip" => 0,
        "declaw" => 0,
        "cat_call" => 0,

        "spirit_arrow" => 0,

        "thrown_axe" => 0,
        "hail_of_arrows" => 0,
        "bladed_arrow" => 0,

        "training_exercise" => 0,
    },
    "damage" => {
        "astral_strike" => [ 0, 10, 20, 30, 40, 50 ],

        "slice_and_dice" => [ 0, 40, 65, 90, 115, 140 ],
        "divine_judgment" => [ 0, 0.3, 0.35, 0.4, 0.45, 0.5 ], # damage is %hp

        "venomous_bite" => [ 0, 50, 75, 100, 125, 150 ],
        "cocoon" => [ 0, 0, 0, 0, 0, 0 ],

        "lash" => [ 0, 35, 45, 55, 65, 75 ],
        "incense" => [ 0, 0, 0, 0, 0, 0 ],

        "crush" => [ 0, 90, 140, 190, 240, 290 ],
        "sic_em" => [ 0, 60, 110, 160, 210, 260 ],
        "sentinel" => [ 0, 0, 0, 0, 0, 0 ],
        "im_a_monster" => [ 0, 400, 500, 600, 700, 800 ],

        "so_beautiful" => [ 0, 80, 135, 190, 245, 300 ],

        "ricochet" => [ 0, 70, 110, 150, 190, 230 ],
        "mark_of_golden_crow" => [ 0, 0, 0, 0, 0, 0 ],
        "sunbreaker" => [ 0, 0, 0, 0, 0, 0 ],

        "whirlwind" => [ 0, 0, 0, 0, 0, 0 ],
        "zephyr" => [ 0, 60, 105, 150, 195, 240 ],
        "slipstream" => [ 0, 0, 0, 0, 0, 0 ],
        "nine_winds" => [ 0, 400, 500, 600, 700, 800 ],

        "moonlight_charge" => [ 0, 90, 130, 170, 210, 250],
        "feather_step" => [ 0, 120, 180, 240, 300, 360],
        "gravity_surge" => [ 0, 200, 250, 300, 350, 400],

        "irradiate" => [ 0, 40, 55, 70, 85, 100 ],
        "pulse" => [ 0, 20, 30, 40, 50, 60 ],

        "stellar_burst" => [ 0, 40, 70, 100, 130, 160 ],

        "stop_time" => [ 0, 30, 50, 70, 90, 110 ],
        "time_rift" => [ 0, 80, 125, 170, 215, 260 ],

        "acid_spray" => [ 0, 90, 135, 180, 225, 270 ],
        "viper_shot" => [ 0, 0, 0, 0, 0, 0 ],

        "suppress_the_insolent" => [ 0, 80, 130, 180, 230, 280 ],
        "vengeful_assault" => [ 0, 0, 0, 0, 0, 0 ],

        "shadow_lock" => [ 0, 0, 0, 0, 0, 0 ],
        "siphon_darkness" => [ 0, 90, 160, 230, 300, 370 ],
        "shadow_step" => [ 0, 70, 110, 150, 190, 230 ],
        "night_terror" => [ 0, 200, 250, 300, 350, 400 ],

        "deathbane" => [ 0, 60, 80, 100, 120, 140 ],
        "cobras_kiss" => [ 0, 50, 70, 90, 110, 130 ],
        "ambush" => [ 0, 80, 140, 200, 260, 320 ],
        "last_breath" => [ 0, 0, 0, 0, 0, 0 ],

        "mjolnirs_attunement" => [ 0, 150, 270, 390, 510, 690 ],
        "tectonic_rift" => [ 0, 0, 0, 0, 0, 0 ],
        "spin_to_win" => [ 0, 0, 0, 0, 0, 0 ],
        "anvil_of_dawn" => [ 0, 150, 200, 250, 300, 350 ],

        "unchained" => [ 0, 95, 155, 215, 275, 335 ],
        "brutalize" => [ 0, 45, 75, 105, 135, 165 ],
        "ragnarok" => [ 0, 200, 275, 350, 425, 500 ],

        "pounce" => [ 0, 80, 145, 210, 275, 340 ],
        "razor_whip" => [ 0, 0, 0, 0, 0, 0 ],
        "declaw" => [ 0, 70, 120, 170, 220, 270 ],
        "cat_call" => [ 0, 0, 0, 0, 0, 0 ],

        #"spirit_arrow" => [ 0, 180, 310, 440, 570, 700 ],
        "spirit_arrow" => [ 0, 90, 155, 220, 285, 350 ],

        "thrown_axe" => [ 0, 60, 90, 120, 150, 180 ],
        "hail_of_arrows" => [ 0, 80, 120, 160, 200, 240 ],
        "bladed_arrow" => [ 0, 70, 120, 170, 220, 270 ],

        "training_exercise" => [ 0, 70, 120, 170, 220, 270 ],
    },
    "aoe" => { # for clear calculations, how many minions hit
        "slice_and_dice" => 6,
        "divine_judgment" => 0,

        "venomous_bite" => 1,
        "cocoon" => 0,

        "lash" => 3,
        "incense" => 0,

        "crush" => 6,
        "sic_em" => 1,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "so_beautiful" => 6,

        "ricochet" => 6,
        "mark_of_golden_crow" => 0,
        "sunbreaker" => 0,

        "moonlight_charge" => 6,
        "feather_step" => 3,
        "gravity_surge" => 0,

        "whirlwind" => 6,
        "zephyr" => 1,
        "slipstream" => 0,
        "nine_winds" => 0,

        "stellar_burst" => 6,

        "stop_time" => 6,
        "time_rift" => 3,

        "viper_shot" => 1,
        "acid_spray" => 6,

        "suppress_the_insolent" => 3,

        "shadow_lock" => 0,
        "siphon_darkness" => 6,
        "shadow_step" => 0,
        "night_terror" => 0,

        "deathbane" => 3,
        "cobras_kiss" => 1,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 6,
        "tectonic_rift" => 0,
        "spin_to_win" => 3,
        "anvil_of_dawn" => 0,

        "unchained" => 3,
        "brutalize" => 3,
        "ragnarok" => 1,

        "pounce" => 3,
        "razor_whip" => 3,
        "declaw" => 1,
        "cat_call" => 0,

        "spirit_arrow" => 6,

        "thrown_axe" => 1, # TODO does this pierce?
        "hail_of_arrows" => 3,
        "bladed_arrow" => 6,

        "training_exercise" => 6,
    },
    "hits" => {
        "slice_and_dice" => 1,
        "divine_judgment" => 1,

        "venomous_bite" => 1,
        "cocoon" => 0,

        "lash" => 3,
        "incense" => 0,

        "crush" => 1,
        "sic_em" => 1,
        "sentinel" => 0,
        "im_a_monster" => 1,

        "so_beautiful" => 1,

        "ricochet" => 1,
        "mark_of_golden_crow" => 0,
        "sunbreaker" => 0,

        "moonlight_charge" => 1,
        "feather_step" => 1,
        "gravity_surge" => 1,

        "whirlwind" => 0,
        "zephyr" => 1,
        "slipstream" => 0,
        "nine_winds" => 1,

        "stellar_burst" => 2,

        "stop_time" => 2,
        "time_rift" => 1,

        "acid_spray" => 1,
        "viper_shot" => 0,

        "suppress_the_insolent" => 1,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 1,
        "night_terror" => 1,

        "deathbane" => 3,
        "cobras_kiss" => 2,
        "ambush" => 0,
        "last_breath" => 0,

        "mjolnirs_attunement" => 1,
        "tectonic_rift" => 0,
        "spin_to_win" => 1,
        "anvil_of_dawn" => 1,

        "unchained" => 1,
        "brutalize" => 4,
        "ragnarok" => 1,

        "pounce" => 1,
        "razor_whip" => 0,
        "declaw" => 1,
        "cat_call" => 0,

        "spirit_arrow" => 1,

        "thrown_axe" => 1,
        "hail_of_arrows" => 1,
        "bladed_arrow" => 1,

        "training_exercise" => 1,
    },
    "tick_damage" => {
        "venomous_bite" => [ 0, 10, 20, 30, 40, 50 ],

        "lash" => [ 0, 5, 10, 15, 20, 25 ],

        "viper_shot" => [ 0, 10, 15, 20, 25, 30 ],

        "sunbreaker" => [ 0, 80, 90, 100, 110, 120 ],

        "whirlwind" => [ 0, 10, 20, 30, 40, 50 ],

        "shadow_lock" => [ 0, 30, 40, 50, 60, 70 ],
        "night_terror" => [ 0, 20, 25, 30, 35, 40 ],

        "last_breath" => [ 0, 46, 68, 91, 114, 137 ],

        "spin_to_win" => [ 0, 20, 40, 60, 80, 100 ],

        "razor_whip" => [ 0, 25, 45, 65, 85, 105 ],
        "cat_call" => [ 0, 75, 105, 135, 165, 195 ],
    },
    "scaling" => {
        "slice_and_dice" => 0.4,
        "divine_judgment" => 0,

        "venomous_bite" => 0.35,
        "cocoon" => 0,

        "lash" => 0.2,
        "incense" => 0,

        "crush" => 0.8,
        "sic_em" => 0.6,
        "sentinel" => 0,
        "im_a_monster" => 1.2,

        "so_beautiful" => 0.8,

        "ricochet" => 0.6,
        "mark_of_golden_crow" => 0,
        "divebomb" => 0,
        "sunbreaker" => 0,

        "moonlight_charge" => 0.6,
        "feather_step" => 1,
        "gravity_surge" => 0.8,

        "whirlwind" => 0,
        "zephyr" => 0.6,
        "slipstream" => 0,
        "nine_winds" => 1.2,

        "stellar_burst" => 0.35,

        "stop_time" => 0.4,
        "time_rift" => 0.85,

        "acid_spray" => 0.7,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0.4,
        "vengeful_assault" => 0,

        "shadow_lock" => 0,
        "siphon_darkness" => 1,
        "shadow_step" => 0.4,
        "night_terror" => .6,

        "deathbane" => .45,
        "cobras_kiss" => .4,
        "ambush" => .5,
        "last_breath" => 0,

        "mjolnirs_attunement" => 0.9,
        "tectonic_rift" => 0,
        "spin_to_win" => 0,
        "anvil_of_dawn" => 1.2,

        "unchained" => .8,
        "brutalize" => .5,
        "ragnarok" => 1.2,

        "pounce" => 1,
        "razor_whip" => 0,
        "declaw" => 1,
        "cat_call" => 0,

        "spirit_arrow" => 1.8,

        "thrown_axe" => 0.6,
        "hail_of_arrows" => 1.2,
        "bladed_arrow" => 0.7,

        "training_exercise" => 0.8,
    },
    "tick_scaling" => {
        "venomous_bite" => 0.1,

        "lash" => 0.05,

        "viper_shot" => 0.1,

        "sunbreaker" => 0.25,

        "whirlwind" => 0.15,

        "shadow_lock" => 0.2,
        "night_terror" => .05,

        "last_breath" => 0,

        "spin_to_win" => 0.45,

        "razor_whip" => 0.25,
        "cat_call" => 0.6,
    },
    "tick_duration" => {
        "venomous_bite" => 0.5,

        "lash" => 0.5,

        "shadow_lock" => .5,
        "night_terror" => 1,
        
        "sunbreaker" => 0.5,

        "whirlwind" => 0.5,

        "last_breath" => 1,

        "spin_to_win" => 0.4,

        "razor_whip" => 1,
        "cat_call" => 1,
    },
    "num_ticks" => {
        "slice_and_dice" => 0,
        "divine_judgment" => 0,

        "venomous_bite" => 6,
        "cocoon" => 0,

        "lash" => 6,
        "incense" => 0,

        "so_beautiful" => 0,

        "ricochet" => 0,

        "crush" => 0,
        "sic_em" => 0,
        "sentinel" => 0,
        "im_a_monster" => 0,

        "sunbreaker" => 9,

        "stop_time" => 0,
        "time_rift" => 0,

        "moonlight_charge" => 0,
        "feather_step" => 0,
        "gravity_surge" => 0,

        "whirlwind" => 5,
        "zephyr" => 0,
        "slipstream" => 0,
        "nine_winds" => 0,

        "stellar_burst" => 0,

        "acid_spray" => 0,
        "viper_shot" => 0,

        "suppress_the_insolent" => 0,
        "vengeful_assault" => 0,

        "shadow_lock" => 4,
        "siphon_darkness" => 0,
        "shadow_step" => 0,
        "night_terror" => 5,

        "deathbane" => 0,
        "cobras_kiss" => 0,
        "ambush" => 0,
        "last_breath" => 5,

        "mjolnirs_attunement" => 0,
        "tectonic_rift" => 0,
        "spin_to_win" => 5,
        "anvil_of_dawn" => 0,

        "unchained" => 0,
        "brutalize" => 0,
        "ragnarok" => 0,

        "pounce" => 0,
        "razor_whip" => 4,
        "declaw" => 0,
        "cat_call" => 10,

        "spirit_arrow" => 0,

        "thrown_axe" => 0,
        "hail_of_arrows" => 0,
        "bladed_arrow" => 0,

        "training_exercise" => 0,
    },
    "next_action" => { # time to next action
        "slice_and_dice" => 0.5,
        "divine_judgment" => 0.5,

        "venomous_bite" => 0.5,
        "cocoon" => 0.5,

        "lash" => 0.5,
        "incense" => 0.5,

        "so_beautiful" => 0.5,

        # these are mostly guesses
        "crush" => 0.5,
        "sic_em" => 0.5,
        "sentinel" => 0.5,
        "im_a_monster" => 1,

        "ricochet" => 0.5,
        "mark_of_golden_crow" => 0.5,
        "divebomb" => 0.5,
        "sunbreaker" => 0.5,

        "moonlight_charge" => 0.5,
        "feather_step" => 0.5,
        "gravity_surge" => 0.5,

        "whirlwind" => 0.5,
        "zephyr" => 0.5,
        "slipstream" => 0.5,
        "nine_winds" => 0.5,

        "stellar_burst" => 0.5,

        "stop_time" => 0.5,
        "time_rift" => 0.5,

        "acid_spray" => 0.5,
        "viper_shot" => 0.5,

        "suppress_the_insolent" => 0.5,
        "vengeful_assault" => 0.5,

        "shadow_lock" => 2,
        "siphon_darkness" => 0.5,
        "shadow_step" => 0.5,
        "night_terror" => 1,

        "deathbane" => 1,
        "cobras_kiss" => 0.5,
        "ambush" => 0.5,
        "last_breath" => 1,

        "mjolnirs_attunement" => 0.5,
        "tectonic_rift" => 0.5,
        "spin_to_win" => 2,
        "anvil_of_dawn" => 0.5, # count from dunk time, not chargeup

        "unchained" => .5,
        "brutalize" => 2,
        "ragnarok" => 2,

        "pounce" => 0.5,
        "razor_whip" => 0.5,
        "declaw" => 0.5,
        "cat_call" => 0.5,

        "spirit_arrow" => 0.5,

        "thrown_axe" => 0.5,
        "hail_of_arrows" => 0.5,
        "bladed_arrow" => 0.5,

        "training_exercise" => 0.5,
    },
    "power_buff" => {
        "expose_weakness" => [ 0, 10, 20, 30, 40, 50 ],
        "branching_bolas" => [ 0, 10, 20, 30, 40, 50 ],
        "gravity_surge" => [ 0, 20, 30, 40, 50, 60 ],
        "incense" => [ 0, 10, 20, 30, 40, 50 ],

    },
    "attack_speed_buff" => {
        "cocoon" => [ 0, 0.3, 0.4, 0.5, 0.6, 0.7 ],

        "pick_me_up" => [ 0, 0.30, 0.35, 0.40, 0.45, 0.50 ],

        "maximum_velocity" => [ 0, 0.30, 0.40, 0.50, 0.60, 0.70 ],

        "vengeful_assault" => [ 0, 0.35, 0.45, 0.55, 0.65, 0.75 ],

        "accelerate" => [ 0, 0.15, 0.20, 0.25, 0.30, 0.35 ],

        "wield_bow" => [ 0, 0.05, 0.10, 0.15, 0.20, 0.25 ],

        "viper_shot" => [ 0, 0.40, 0.50, 0.60, 0.70, 0.80 ],

        "gravity_surge" => [ 0, 0.3, 0.4, 0.5, 0.6, 0.7 ],
    },
    "level" => {
        # character level           [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20 ],
        "slice_and_dice" =>         [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "divine_judgment" =>        [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "venomous_bite" =>          [ 0, 0, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "cocoon" =>                 [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "web" =>                    [ 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "infinite_web" =>           [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "nimble_strike" =>          [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "lash" =>                   [ 0, 1, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "incense" =>                [ 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "maximum_velocity" =>       [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "pick_me_up" =>             [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "crush" =>                  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "sic_em" =>                 [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "sentinel" =>               [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "im_a_monster" =>           [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "so_beautiful" =>           [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "astral_strike" =>          [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "ricochet" =>               [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "mark_of_golden_crow" =>    [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "divebomb" =>               [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "sunbreaker" =>             [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "whirlwind" =>              [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "zephyr" =>                 [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "slipstream" =>             [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "nine_winds" =>             [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "irradiate" =>              [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "pulse" =>                  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "banish" =>                 [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "valkyries_discretion" =>   [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "time_rift" =>              [ 0, 1, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "stop_time" =>              [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "accelerate" =>             [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5 ],

        "stellar_burst" =>          [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "radiance" =>               [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "suppress_the_insolent" =>  [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "vengeful_assault" =>       [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

        "viper_shot" =>             [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "acid_spray" =>             [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "siphon_darkness" =>        [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "shadow_lock" =>            [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "shadow_step" =>            [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "night_terror" =>           [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "deathbane" =>              [ 0, 1, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "cobras_kiss" =>            [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "ambush" =>                 [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "last_breath" =>            [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "feather_step" =>           [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "moonlight_charge" =>       [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "gravity_surge" =>          [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "mjolnirs_attunement" =>    [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "tectonic_rift" =>          [ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "spin_to_win" =>            [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "anvil_of_dawn" =>          [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "brutalize" =>              [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "unchained" =>              [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "ragnarok" =>               [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "razor_whip" =>             [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "pounce" =>                 [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "declaw" =>                 [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
        "cat_call" =>               [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "spirit_arrow" =>           [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],

        "thrown_axe" =>             [ 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "bladed_arrow" =>           [ 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "expose_weakness" =>        [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5 ],
        "hail_of_arrows" =>         [ 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "wield_bow" =>              [ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],

        "training_exercise" =>      [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
    },
);



my %combos = (
    "chronos" => [ "stop_time", "time_rift" ],
    "scylla" => [ "sic_em", "crush", "im_a_monster" ],
    "nox" => [ "shadow_lock", "siphon_darkness", "night_terror" ],
    "freya" => [ ],
    "sol" => [ "stellar_burst" ],
    "kukulkan" => [ "whirlwind", "zephyr" ],
    "artemis" => [ ],
    "awilix" => [ "moonlight_charge", "gravity_surge" ],
    "medusa" => [ ],
    "xbal" => [ ],
    "rama" => [ ],
    "hou_yi" => [ ],
    "serqet" => [ "cobras_kiss", "deathbane", "last_breath" ],
    "thor" => [ "anvil_of_dawn", "mjolnirs_attunement", "tectonic_rift", "spin_to_win" ],
    "fenrir" => [ "unchained", "ragnarok" ],
    "bastet" => [ "pounce", "razor_whip", "cat_call" ],
    "apollo" => [ "so_beautiful" ],
    "mercury" => [ ],
    "neith" => [ "spirit_arrow", ],
    "ullr" => [ "thrown_axe", "hail_of_arrows", "bladed_arrow" ],
    "chiron" => [ ],
    "nemesis" => [ "divine_judgment" ],
    "arachne" => [ "venomous_bite", "cocoon" ],
    "kali" => [ "lash" ],
);


my %clear_skills = (
    "rama" => [ ],
    "chronos" => [ "time_rift", "stop_time" ],
    "sol" => [ "stellar_burst" ],
    "freya" => [ ],
    "hou_yi" => [ "ricochet" ],
    "medusa" => [ "acid_spray" ],
    "artemis" => [ "suppress_the_insolent" ],
    "kukulkan" => [ "whirlwind" ],
    "bastet" => [ "razor_whip" ],
    "apollo" => [ "so_beautiful" ],
    "fenrir" => [ "brutalize" ],
    "chiron" => [ "training_exercise" ],
    "neith" => [ "spirit_arrow", ],
    "nemesis" => [ "slice_and_dice" ],
    "arachne" => [ "cocoon" ],
    "kali" => [ "lash" ],
);




my %base_stats = (
    "type" => {
        "freya" => "magical",
        "sol" => "magical",
        "scylla" => "magical",
        "nox" => "magical",
        "kukulkan" => "magical",
        "chronos" => "magical",

        "artemis" => "physical",
        "awilix" => "physical",
        "medusa" => "physical",
        "xbal" => "physical",
        "rama" => "physical",
        "ullr" => "physical",
        "serqet" => "physical",
        "thor" => "physical",
        "fenrir" => "physical",
        "bastet" => "physical",
        "apollo" => "physical",
        "neith" => "physical",
        "mercury" => "physical",
        "chiron" => "physical",
        "hou_yi" => "physical",
        "nemesis" => "physical",
        "arachne" => "physical",
        "kali" => "physical",
    },
    "mvmt_speed" => {
        "mercury" => 375,
    },
    "attack_rate" => {
        "freya" => 0.95,
        "sol" => 1,
        "scylla" => 1,
        "nox" => 1,
        "kukulkan" => 0.87,
        "chronos" => 1,

        "artemis" => 0.95,
        "awilix" => 1,
        "medusa" => 0.95,
        "xbal" => 0.95,
        "rama" => 0.95,
        "ullr" => 0.95,
        "serqet" => 1,
        "thor" => 1,
        "fenrir" => 1,
        "bastet" => 1,
        "apollo" => 0.95,
        "neith" => 0.95,
        "mercury" => 1,
        "chiron" => 1,
        "hou_yi" => 0.9,
        "nemesis" => 1,
        "arachne" => 1,
        "kali" => 1,
    },
    "attack_rate_level_scaling" => {
        "freya" => 0.0195,
        "sol" => 0.018,
        "scylla" => 0.008,
        "nox" => 0.008,
        "kukulkan" => 0.0091,
        "chronos" => 0.008,

        "artemis" => 0.014,
        "awilix" => 0.0189,
        "medusa" => 0.014,
        "xbal" => 0.01,
        "rama" => 0.017,
        "ullr" => 0.015,
        "serqet" => 0.0216,
        "thor" => 0.0145,
        "fenrir" => 0.017,
        "bastet" => 0.0198,
        "apollo" => 0.017,
        "neith" => 0.016,
        "mercury" => 0.024,
        "chiron" => .011,
        "hou_yi" => 0.012,
        "nemesis" => 0.0216,
        "arachne" => 0.02,
        "kali" => 0.0216,
    },
    "auto_damage" => {
        "freya" => 35,
        "sol" => 34,
        "scylla" => 34,
        "nox" => 34,
        "kukulkan" => 34,
        "chronos" => 35,

        "artemis" => 35,
        "awilix" => 38,
        "medusa" => 38,
        "xbal" => 37,
        "rama" => 40,
        "ullr" => 38,
        "serqet" => 39,
        "thor" => 39,
        "fenrir" => 38,
        "bastet" => 38,
        "apollo" => 40,
        "neith" => 35,
        "mercury" => 38,
        "chiron" => 35,
        "hou_yi" => 38,
        "nemesis" => 39,
        "arachne" => 38,
        "kali" => 37,
    },
    "auto_level_scaling" => {
        "freya" => 1.5,
        "sol" => 1.45,
        "scylla" => 1.45,
        "nox" => 1.5,
        "kukulkan" => 1.45,
        "chronos" => 1.5,

        "artemis" => 2.05,
        "awilix" => 2.16,
        "medusa" => 2.6,
        "xbal" => 2.5,
        "rama" => 2.5,
        "ullr" => 2.4,
        "serqet" => 2.25,
        "thor" => 2.4,
        "fenrir" => 2.3,
        "bastet" => 2.13,
        "apollo" => 2.6,
        "neith" => 2.3,
        "mercury" => 2.13,
        "chiron" => 2.35,
        "hou_yi" => 2.8,
        "nemesis" => 2.25,
        "arachne" => 2.2,
        "kali" => 2.32,
    },
    "mana" => {
        "freya" => 220,
        "sol" => 300,
        "scylla" => 298,
        "nox" => 250,
        "kukulkan" => 265,
        "chronos" => 240,

        "artemis" => 205,
        "awilix" => 220,
        "medusa" => 220,
        "xbal" => 220,
        "rama" => 205,
        "ullr" => 230,
        "serqet" => 240,
        "thor" => 240,
        "fenrir" => 200,
        "bastet" => 215,
        "apollo" => 225,
        "neith" => 230,
        "mercury" => 200,
        "chiron" => 225,
        "hou_yi" => 240,
        "nemesis" => 210,
        "arachne" => 210,
        "kali" => 205,
    },
    "mana_level_scaling" => {
        "freya" => 37,
        "sol" => 57,
        "scylla" => 56,
        "nox" => 38,
        "kukulkan" => 45,
        "chronos" => 42,

        "artemis" => 34,
        "awilix" => 38,
        "medusa" => 34,
        "xbal" => 37,
        "rama" => 34,
        "ullr" => 40,
        "serqet" => 40,
        "thor" => 38,
        "fenrir" => 35,
        "bastet" => 39,
        "apollo" => 40,
        "neith" => 39,
        "mercury" => 40,
        "chiron" => 40,
        "hou_yi" => 38,
        "nemesis" => 38,
        "arachne" => 41,
        "kali" => 34,
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
        "scylla" => [ 1 ],
        "nox" => [ 1 ],
        "kukulkan" => [ 1 ],
        "chronos" => [ 1 ],

        "artemis" => [ 1 ],
        "awilix" => [ 1, 0.75, 1.25 ],
        "medusa" => [ 1 ],
        "xbal" => [ 1 ],
        "rama" => [ 1 ],
        "ullr" => [ 1 ],
        "serqet" => [ 1, 0.75, 1.25 ],
        "thor" => [ 1 ],
        "fenrir" => [ 1 ],
        "bastet" => [ 1, 0.7, 1.3 ],
        "apollo" => [ 1 ],
        "neith" => [ 1 ],
        "mercury" => [ 1, 0.75, 1.25 ],
        "chiron" => [ 1 ],
        "hou_yi" => [ 1 ],
        "nemesis" => [ 1, 1, .75, 1.25 ],
        "arachne" => [ .5, 1, 1 ],
        "kali" => [ 1, .5, .5 ],
    },
);


#################################################################################
# my base stats
#################################################################################

my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ "god" } } };
my $next_attack_chain = 0;

my %messages_to_print;
my @one_pass_verbosity;

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ "god" } }
        + $opts{ "level" } * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ "god" } }
        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
my $mana = $base_stats{ "mana" }->{ $opts{ "god" } }
        + $opts{ "level" } * $base_stats{ "mana_level_scaling" }->{ $opts{ "god" } };

my $base_crit_chance = 0;
my $crits = 0;
my $damage = 0;
my $total_damage = 0;
my $attack_damage = 0;
my $malice_damage = 0;
my $time = 0;
my $next_attack = 0;
my $next_skill_time = 0;
my $num_attacks = 0;
my $total_attacks = 0;
my $gold = 0;
my $ttk = 0;
my $total_ttk = 0;

my $physical_power = 0;
my $magical_power = 0;
my $lifesteal = 0;
if ( $opts{ "god" } eq "freya" ) { $lifesteal += 0.15; }
my $cdr = 0;
my $item_mvmt_speed = 0;
my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;


#################################################################################
# target base stats
#################################################################################

my @targets;

if ( $opts{"action"} eq "clear" ) {
    # minions
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 370,
            "current_health" => 370, "name" => "melee minion" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 370,
            "current_health" => 370, "name" => "melee minion" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 370,
            "current_health" => 370, "name" => "melee minion" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 265,
            "current_health" => 265, "name" => "archer minion" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 265,
            "current_health" => 265, "name" => "archer minion" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 265,
            "current_health" => 265, "name" => "archer minion" };
} elsif ( $opts{ "action"} eq "tower" ) {
    $lifesteal = 0; #can't lifesteal towers
    if ( $base_stats{ "type" }->{ $opts{"god"} } eq "physical" ) {
        push @targets, +{ "phys_prot" => 150, "mag_prot" => 150, "percent_red" => 0.15, "max_health" => 2000,
                "current_health" => 2000, "name" => "tower" };
    } else {
        push @targets, +{ "phys_prot" => 150, "mag_prot" => 150, "percent_red" => -0.2, "max_health" => 2000,
                "current_health" => 2000, "name" => "tower" };
    }
} elsif ( $opts{ "action" } eq "jungle" ) {
    # jungle camp, 3 minions
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 960,
            "current_health" => 960, "name" => "jungle buff" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 180,
            "current_health" => 180, "name" => "jungle little" };
    push @targets, +{ "phys_prot" => 0, "mag_prot" => 0, "percent_red" => 0.1, "max_health" => 180,
            "current_health" => 180, "name" => "jungle little" };
} elsif ( $opts{ "action" } eq "kill" ) {
    # TODO enemy item handling is totally gone until it gets done per-target as well
    push @targets, +{ "phys_prot" => $protection_stats{ "physical_protection" }->{ $opts{"enemy"} },
            "mag_prot" => $protection_stats{ "magical_protection" }->{ $opts{"enemy"} },
            "percent_red" => 0, "max_health" => $protection_stats{ "health" }->{ $opts{"enemy"} },
            "current_health" => $protection_stats{ "health" }->{ $opts{"enemy"} },
            "name" => $opts{"enemy"} };
}

#################################################################################
# magical items
#################################################################################

if (defined $items{"purple_pot"} ){
    $magical_power += 50;
    $gold += 450;
}

if (defined $items{"vamp_shroud"} ) {
    $magical_power += 20;
    $gold += 800;
}

if (defined $items{"ancient_blade"} ) {
    $attack_rate += 0.1 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 590;
}

if (defined $items{"emerald_ring"}) {
    $magical_power += 20;
    $attack_rate += 0.05 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 690;
}

if (defined $items{"enchanted_ring"}) {
    $magical_power += 30;
    $attack_rate += 0.1 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 1075;
}

if (defined $items{"lost_artifact"} ){
    $magical_power += 15;
    $gold += 600;
}

if (defined $items{"tiny_trinket"} ){
    $magical_power += 20;
    $lifesteal += 0.04;
    $gold += 540;
}

if (defined $items{"pen_boots"}) {
    $magical_power += 45;
    $flat_pen += 10;
    $gold += 1600;
}

if (defined $items{"cooldown_boots"}) {
    $magical_power += 30;
    $cdr += 0.10;
    $mana += 250;
    $gold += 1500;
}

if (defined $items{"void_stone"}) {
    $magical_power += 40;
    $flat_reduction += 15;
    $gold += 2350;
}

if (defined $items{"demonic_grip"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ "god" } }* 0.25;
    $magical_power += 60;
    $gold += 2280;
}

if (defined $items{"telkhines_ring"} or defined $items{ "telkhines" }) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $magical_power += 45;
    $gold += 2125;
}

if (defined $items{ "spear_of_desolation" }) {
    $magical_power += 120;
    $flat_pen += 20;
    $gold += 3800;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ "god" } }* 0.3;
    $gold += 2140;
}

if (defined $items{"polynomicon"}) {
    $magical_power += 75;
    $mana += 300;
    $lifesteal += .1;
    $gold += 2300;
}

if (defined $items{"spear"}) {
    $magical_power += 45;
    $flat_pen += 15;
    $gold += 2150;
}

if (defined $items{"shard"}) {
    $magical_power += 70;
    $percent_pen += .33;
    $gold += 2050;
}

if (defined $items{"bancrofts"}) {
    $magical_power += 100;
    $lifesteal += .12;
    $gold += 2400;
}

if (defined $items{"rod"}) {
    $magical_power += 125;
    $gold += 3320;
}

if (defined $items{"chronos"}) {
    $magical_power += 75;
    $cdr += 0.20;
    $gold += 2400;
}

if (defined $items{"pythagorems"} or defined $items{"pythags"}) {
    $magical_power += 90;
    $lifesteal += .25;
    $cdr += 0.1;
    $gold += 2600;
}

if (defined $items{"gem"} ) {
    $magical_power += 70;
    $mana += 250;
    $gold += 2850;
}

if (defined $items{"doom_orb"} ){
    $magical_power += 140; #assume full stacks
    $mana += 200;
    $gold += 2050;
}

if (defined $items{"soul_reaver"}){
    $magical_power += 100;
    $mana += 300;
    $gold += 2940;
}

if (defined $items{"book"}) {
    $mana += 875;
    $magical_power += 100 + 0.03 * $mana; # TODO having this last computes bonus right... probably?
    $gold += 2650;
}

#################################################################################
# physical items
#################################################################################

if (defined $items{"red_pot"} ){
    $physical_power += 20;
    $gold += 450;
}

if (defined $items{"throwing_dagger"} ){
    $physical_power += 20;
    $base_crit_chance += 0.1;
    $gold += 1300;
}

if (defined $items{ "charged_morningstar" } ) {
    $physical_power += 20;
    $mana += 150;
    $gold += 1200;
}

if (defined $items{ "bluestone" } ) {
    $physical_power += 15;
    $mana += 100;
    $gold += 800;
}

if (defined $items{ "deaths_toll" } ) {
    $physical_power += 15;
    $gold += 800;
}

# void shield
if (defined $items{ "void_shield" } ) {
	$physical_power += 30;
	$flat_reduction += 20;
	$gold += 2600;
}

# jotunn's wrath
if (defined $items{"jotunns"} or defined $items{ "jotunns_wrath" }) {
    $physical_power += 40;
    $flat_pen += 10;
    $mana += 150;
    $cdr += 0.20;
    $gold += 2440;
}

# qin's sais
if (defined $items{"qins"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $physical_power += 40;
    $gold += 2700;
}

# asi
if (defined $items{"asi"}) {
    $flat_pen += 15;
    $lifesteal += 0.15;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 1780;
}

# crusher
if (defined $items{"crusher"}) {
    $physical_power += 40;
    $flat_pen += 20;
    $gold += 2300;
}

# brawler's beatstick
if (defined $items{"brawlers"}) {
    $physical_power += 40;
    $flat_pen += 20;
    $gold += 2400;
}

# titan's bane
if (defined $items{"titans"} or defined $items{"titans_bane"}) {
    $physical_power += 30;
    $percent_pen += 0.33;
    $gold += 2050;
}

# warrior tabi
if (defined $items{"warrior_tabi"}) {
    $physical_power += 40;
    $gold += 1550;
    $item_mvmt_speed += 0.18;
}

# ninja tabi
if (defined $items{"ninja_tabi"}) {
    $physical_power += 20;
    $attack_rate += 0.20 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 1500;
	$mana += 100;
    $item_mvmt_speed += 0.18;
}

# ghez tabi
if (defined $items{"ghez_tabi"}){
    $physical_power += 20;
    $flat_pen += 10;
    $gold += 1500;
    $item_mvmt_speed += 0.18;
}

# executioner
if (defined $items{"executioner"}) {
    $physical_power += 30;
    $attack_rate += 0.25 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 2250;
}

# short bow
if(defined $items{"short_bow"}){
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 600;
}

# ichaival
if (defined $items{"ichaival"}) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $flat_pen += 10;
    $gold += 1700;
}

# dev's gloves
if (defined $items{"devs_gloves"}) {
    $physical_power += 55;
    $lifesteal += 0.25; # assume full stacks
    $gold += 2050;
}

# soul eater
if (defined $items{"soul_eater"}) {
    $attack_rate += 0.30 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $lifesteal += 0.3; # assume full stacks
    $item_mvmt_speed += 0.1;
    $gold += 2000;
}

# stone cutting sword
if (defined $items{"stone_cutting_sword"} or defined $items{ "scs" }) {
    $physical_power += 50;
    $item_mvmt_speed += .1;
    $gold += 2900;
}

# masamune
if (defined $items{"masamune"}) {
    $physical_power += 50;
    $item_mvmt_speed += .1;
    $gold += 2200;
}

# heartseeker
if (defined $items{ "heartseeker" }) {
    $physical_power += 25;
    $item_mvmt_speed += 0.1;
}

# golden bow
if (defined $items{"golden_bow"}) {
    $base_crit_chance += 0.1;
    $physical_power += 35;
    $gold += 2330;
    $item_mvmt_speed += 0.05;
}

# odysseus bow
if (defined $items{"obow"} or defined $items{"odysseus_bow"}) {
    $attack_rate += 0.4 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 2450;
}

if (defined $items{"charged_bow"}) {
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
    $gold += 1200;
}

# rage
if (defined $items{"rage"}) {
    $base_crit_chance += 0.2;
    $physical_power += 30;
    $gold += 2600;
}

# malice
if (defined $items{"malice"}) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3000;
}
my $total_malice_procs = 0;
my $next_malice_proc = 0;
my $malice_procs_left = 0;

# deathbringer
if (defined $items{"deathbringer"} or defined $items{ "db" }) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3200;
}

# hydras lament
if (defined $items{"hydras"} or defined $items{"hydras_lament"}) {
    $cdr += 0.15;
    $physical_power += 30;
}

# transcendence
if (defined $items{"transcendence"}) {
    $mana += 300;
    my $stacks = 10 * ($opts{"level"}-5); # stack from level 5 to 15
    if ( $stacks > 50 ){ $stacks = 50; }
    if ( $stacks < 0 ){ $stacks = 0; }
    $mana += 15 * $stacks;
    $physical_power += 35;
    $physical_power += 0.03 * $mana; # TODO having this last computes bonus right... probably?
    $gold += 2600;
}

#################################################################################
# enemy items (defensive)
#################################################################################

if ( $opts{"action"} eq "kill") {
    # TODO currenly handle only one enemy god
    # if we want to handle teams, we will have to loop over this logic

    if (defined $enemy_items{ "bov" }) {
        $targets[0]->{"phys_prot"} += 75;
    }

	if (defined $items{ "void_shield" } ) {
		$targets[0]->{"phys_prot"} += 50;
	}

    if (defined $enemy_items{ "bulwark" }) {
        $targets[0]->{"max_health"} += 200;
        $targets[0]->{"mag_prot"} += 60;
    }

    if (defined $enemy_items{ "urchin" }) {
        $targets[0]->{"max_health"} += 250;
        $targets[0]->{"mag_prot"} += 65;
        $targets[0]->{"phys_prot"} += 65;
    }

    if (defined $enemy_items{ "mantle_of_discord" }) {
        $targets[0]->{"mag_prot"} += 60;
        $targets[0]->{"phys_prot"} += 60;
    }

    if (defined $enemy_items{ "spirit_robe" }) {
        $targets[0]->{"mag_prot"} += 40;
        $targets[0]->{"phys_prot"} += 40;
    }

    if (defined $enemy_items{ "magis" }) {
        $targets[0]->{"max_health"} += 350;
        $targets[0]->{"mag_prot"} += 15;
        $targets[0]->{"phys_prot"} += 15;
    }

    if (defined $enemy_items{ "mystical_mail" }) {
        $targets[0]->{"max_health"} += 350;
        $targets[0]->{"phys_prot"} += 30;
    }

    if (defined $enemy_items{ "sov" }) {
        $targets[0]->{"max_health"} += 200;
		$targets[0]->{"phys_prot"} += 60;
    }

    if (defined $enemy_items{ "heartward" }) {
        $targets[0]->{"max_health"} += 200;
		$targets[0]->{"mag_prot"} += 50;
    }

    if (defined $enemy_items{ "midgardian" }) {
        $targets[0]->{"max_health"} += 350;
        $targets[0]->{"phys_prot"} += 30;
    }

    if (defined $enemy_items{ "nemean" }) {
        $targets[0]->{"phys_prot"} += 90;
    }

    if (defined $enemy_items{ "spectral_armor" }) {
        $targets[0]->{"phys_prot"} += 80;
    }

    if (defined $enemy_items{ "frostbound" }) {
        $targets[0]->{"max_health"} += 300;
    }

    if (defined $enemy_items{ "winged_blade" }) {
        $targets[0]->{"max_health"} += 300;
    }

    if (defined $enemy_items{ "witchblade" }) {
        $targets[0]->{"phys_prot"} += 60;
        # TODO handle aura
    }

    if (defined $enemy_items{ "runic_shield" }) {
        $targets[0]->{"mag_prot"} += 50;
        # TODO handle aura
    }

    if (defined $enemy_items{ "mail_of_renewal" } or defined $enemy_items{ "mor" }) {
        $targets[0]->{"max_health"} += 350;
    }

    if (defined $enemy_items{ "gaia" }) {
        $targets[0]->{"max_health"} += 350;
    }

    if (defined $enemy_items{ "thebes" }) {
        $targets[0]->{"max_health"} += 350;
    }

    if (defined $enemy_items{ "oni" }) {
        $targets[0]->{"mag_prot"} += 60;
    }

    if (defined $enemy_items{ "genji" }) {
        $targets[0]->{"mag_prot"} += 80;
    }
}

#################################################################################
# 
#################################################################################




#################################################################################
# stat calculations (some must be done post-items)
#################################################################################



if ( $opts{ "god" } eq "scylla" ) {
    if ( $ability_stats{ "level" }->{ "crush" }->[ $opts{ "level" } ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sic_em" }->[ $opts{ "level" } ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "im_a_monster" }->[ $opts{ "level" } ] == 5 ) { $magical_power += 20; }
    if ( $ability_stats{ "level" }->{ "sentinel" }->[ $opts{ "level" } ] == 5 ) { $magical_power += 20; }
}

if ( $opts{ "god" } eq "kukulkan" ) {
    $magical_power += 0.05 * $mana;
}

if (defined $items{"rod"}) { $magical_power *= 1.25; } # does this multiply passives or only items? TODO

# enforce maxima
if ($cdr > 0.4) { $cdr = 0.4; }
if ($attack_rate > 2.5) { $attack_rate = 2.5; }
if ($magical_power > 900) { $magical_power = 900; }
if ($physical_power > 400) { $physical_power = 400; }
if ($flat_pen > 50) { $flat_pen = 50; }


#################################################################################
# iteration and time mgmt
#################################################################################

my $iteration = 0;
my $max_iterations = 1000;
if ( $base_stats{ "type" }->{ $opts{ "god" } } eq "magical" ) {
    $max_iterations = 1; # no crit, no rng
}
if ( $base_crit_chance == 0 and $opts{ "god" } ne "artemis" ) {
    $max_iterations = 1; # no crit, no rng
}
if ( $opts{"action"} eq "tower" ) {
    $max_iterations = 1; #can't crit towers
}
if ( defined $opts{ "iterations" } ) {
    $max_iterations = $opts{"iterations"};
}

#################################################################################
# buffs and stacks
#################################################################################

my %buffs = (
    "max" => {
        "divine_judgment" => 1, # buff and debuff
        "cocoon" => 3,
        "incense" => 1,
        "crusher" => 5,
        "soul_reaver" => 1,
        "midgardian" => 1,
        "accelerate" => 1,
        "rage" => 6,
        "executioner" => 4, # really a debuff on the target
        "demonic_grip" => 4, # really a debuff on the target
        "spear" => 3, # really a debuff on the target
        "still_target" => 3,
        "xbal_passive" => 6,
        "initiative" => 1,
        "vengeful_assault" => 1,
        "expose_weakness" => 1,
        "pick_me_up" => 1,
        "gravity_surge" => 1,
        "maximum_velocity" => 1,
        "branching_bolas" => 1,
        "open_wound" => 1, # really a debuff on the target
        "serqet_poisons" => 3, # really a debuff on the target
        "hydras_lament" => 1,
        "polynomicon" => 1,
        "ichaival" => 3, # both a buff and a debuff
        "irradiate" => 1,
        "pulse" => 1,
        "astral_strike" => 1,
        "stone_cutting_sword" => 3, # both a buff and a debuff
        "oni" => 3, # buff for enemy
        "spectral_armor" => 1, # buff for enemy
        "heartseeker" => 5,
    },
    "current" => {
        "divine_judgment" => 0, # buff and debuff
        "cocoon" => 0,
        "incense" => 0,
        "crusher" => 0,
        "soul_reaver" => 0,
        "midgardian" => 0,
        "accelerate" => 0,
        "rage" => 0,
        "executioner" => 0, # really a debuff on the target
        "demonic_grip" => 0, # really a debuff on the target
        "spear" => 0, # really a debuff on the target
        "still_target" => 0,
        "xbal_passive" => 0,
        "initiative" => 0,
        "vengeful_assault" => 0,
        "expose_weakness" => 0,
        "pick_me_up" => 0,
        "gravity_surge" => 0,
        "maximum_velocity" => 0,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 0, # really a debuff on the target
        "hydras_lament" => 0,
        "polynomicon" => 0,
        "ichaival" => 0, # both a buff and a debuff
        "irradiate" => 0,
        "pulse" => 0,
        "astral_strike" => 0,
        "stone_cutting_sword" => 0, # both a buff and a debuff
        "oni" => 3, # buff for enemy, assume this starts fully stacked
        "spectral_armor" => 0, # buff for enemy
        "heartseeker" => 0,
    },
    cooldown => {
        "spectral_armor" => 0, # TODO
        "polynomicon" => 3000,
        "soul_reaver" => 60000,
    },
    cooldown_time => {
        "spectral_armor" => 0,
        "polynomicon" => 0,
        "soul_reaver" => 0,
    },
    "time" => { # end time for buffs
        "divine_judgment" => 0, # buff and debuff
        "cocoon" => 0,
        "incense" => 0,
        "crusher" => 0,
        "soul_reaver" => 0,
        "midgardian" => 0,
        "accelerate" => 0,
        "rage" => 0,
        "executioner" => 0, # really a debuff on the target
        "demonic_grip" => 0, # really a debuff on the target
        "spear" => 0, # really a debuff on the target
        "still_target" => 0,
        "xbal_passive" => 0,
        "initiative" => 0,
        "vengeful_assault" => 0,
        "expose_weakness" => 0,
        "pick_me_up" => 0,
        "gravity_surge" => 0,
        "maximum_velocity" => 0,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 0, # really a debuff on the target
        "hydras_lament" => 0,
        "polynomicon" => 0,
        "ichaival" => 0, # both a buff and a debuff
        "irradiate" => 0,
        "pulse" => 0,
        "astral_strike" => 0,
        "stone_cutting_sword" => 0, # both a buff and a debuff
        "oni" => 0, # buff for enemy
        "spectral_armor" => 0, # buff for enemy
        "heartseeker" => 0,
    },
    "duration" => {
        "divine_judgment" => 5000, # buff lasts 8, debuff lasts 5 TODO
        "cocoon" => 0,
        "incense" => 8000, # TODO duration scales 4...8
        "crusher" => 2000,
        "soul_reaver" => 40000,
        "midgardian" => 3000,
        "accelerate" => 7000,
        "rage" => 0,
        "executioner" => 3000, # really a debuff on the target
        "demonic_grip" => 3000, # really a debuff on the target
        "spear" => 5000, # really a debuff on the target
        "still_target" => 4000,
        "xbal_passive" => 0,
        "initiative" => 2500,
        "vengeful_assault" => 5000, #TODO duration scales
        "expose_weakness" => 5000,
        "pick_me_up" => 5000,
        "gravity_surge" => 6000,
        "maximum_velocity" => 5000,
        "branching_bolas" => 0,
        "open_wound" => 0, # really a debuff on the target
        "serqet_poisons" => 20000, # really a debuff on the target
        "hydras_lament" => 8000,
        "polynomicon" => 8000,
        "ichaival" => 3000, # both a buff and a debuff
        "irradiate" => 5000,
        "pulse" => 5000,
        "astral_strike" => 0,
        "stone_cutting_sword" => 3000, # both a buff and a debuff
        "oni" => 0, # buff for enemy
        "spectral_armor" => 5000, # buff for enemy
        "heartseeker" => 0,
    },
);

my $viper_shots_left = 0;
my $astral_arrows = 0;

my $heat = 0;
my @radiance_heat_amount = ( 0, 40, 50, 60, 70, 80 );

my $polynomicon_procs = 0;
my $polynomicon_damage = 0;

my $telkhines_damage = 0;

my $hydras_procs = 0;
my $hydras_damage = 0;

my %ticks = ();

my $combo_idx = 0;
my $next_skill;

my $bluestone_stacks = 0;

my $audacity_stacks = 0;
my $audacity_charge = 0;

my $obow_hits = 0;


#################################################################################
# calculations
#################################################################################

sub any_targets_remain() {
    my $i = 0;
    while ($i < scalar(@targets)) {
        if ( $targets[$i]->{"current_health"} > 0 ) {
            return 1;
        }
        $i++;
    }
    return 0;
}



sub add_stack($) {
    my $buff = shift;
    $buffs{ "current" }->{ $buff } += 1;
    if ( $buffs{ "current" }->{ $buff } > $buffs{ "max" }->{ $buff } ) {
        $buffs{ "current" }->{ $buff } = $buffs{ "max" }->{ $buff };
    }
}


sub rm_stack($) {
    my $buff = shift;
    $buffs{ "current" }->{ $buff } -= 1;
    if ( $buffs{ "current" }->{ $buff } < 0 ) {
        $buffs{ "current" }->{ $buff } = 0;
    }
}

sub reset_buff_time($) {
    my $buff = shift;
    if ( $buffs{ "duration" }->{ $buff } != 0 ) {
        $buffs{ "time" }->{ $buff } = $time + $buffs{ "duration" }->{ $buff };
    }
}


sub ability_crits($) {
    my $pre_prot_damage = shift;

    # some abilities can crit, but they do not proc rage
    # not sure if the crit chance for abilities is affected by rage stacks TODO

    # crit chance
    my $total_crit_chance = $base_crit_chance;

    my $rng = rand();
    if ( $rng < $total_crit_chance ) {
        # critical hit
        $pre_prot_damage *= 2;
        if (defined $items{ "deathbringer" }) {
            $pre_prot_damage *= 1.2; # 240%
        }

        # handle malice
        if ($malice_procs_left == 0) {
            # no procs, set next proc for 1 sec from now, otherwise just refresh count
            $next_malice_proc = $time + 1000;
        }
        $malice_procs_left = 3;
    }

    return $pre_prot_damage;
}


sub get_aoe( $ ) {
    if ( $opts{ "action" } eq "tower" or $opts{ "action" } eq "kill" ) {
        return 1;
    }
    
    my $ability = shift;
    my $aoe = 1;
    # TODO move auto attack aoe logic here as well ??
    # golden bow / pulse
    $aoe = $ability_stats{ "aoe" }->{ $ability };
    if ( $opts{ "action" } eq "jungle" ) {
        if ( $aoe > 3 ) {
            $aoe = 3;
        }
    }
    return $aoe;
}


sub get_eff_power() {
    
    if ( $base_stats{ "type" }->{ $opts{"god"} } eq "physical" ) {
        my $eff_physical_power = $physical_power
                + 5 * $buffs{ "current" }->{ "xbal_passive" }
                + 10 * $buffs{ "current" }->{ "ichaival" }
                + $buffs{ "current" }->{ "gravity_surge" } *
                        $ability_stats{ "power_buff" }->{ "gravity_surge" }->[
                                $ability_stats{ "level" }->{ "gravity_surge" }->[ $opts{ "level" } ] ];
        if ($buffs{ "current" }->{ "initiative" } > 0) {
            $eff_physical_power *= 1.3;
        }
        return $eff_physical_power
    }
    else
    {
        my $eff_magical_power = $magical_power;
        if ( $opts{ "god" } eq "sol" ) {
            $eff_magical_power *= (1 + 0.25 * $heat / 100);
            $eff_magical_power = int( $eff_magical_power );
        }
        return $eff_magical_power;
    }
}

sub get_mvmt_speed() {
    my $mvmt_speed = $base_stats{ "mvmt_speed" }->{ $opts{"god"} } * ($item_mvmt_speed + 0.4); # assume sprint is active TODO handle sprint duration
    return $mvmt_speed;
}


sub add_bluestone( $ ) {

    my $aoe = shift;

    if ( $bluestone_stacks < 2 ) {

        my $tick = 0;
        
        while ( $tick < 2 ) {

            my $tick_time = $time + ($tick + 1) * 1000;
            while ( defined $ticks{ $tick_time } ) { $tick_time++; }
            $ticks{ $tick_time } = +[ 15, "bluestone tick", "physical", $aoe ];

            $tick++;
        }

        $bluestone_stacks++;
    }
}

sub get_basic_attack_damage() {

    if ( $base_stats{ "type" }->{ $opts{"god"} } eq "physical" ) {
        my $eff_physical_base_dmg  = ($base_stats{ "auto_damage" }->{ $opts{ "god" } }
                + $opts{ "level" } * $base_stats{ "auto_level_scaling" }->{ $opts{ "god" } }
                + get_eff_power())
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_physical_base_dmg;
    }
    else
    {
        my $scaling = 0.2;
        if ( $buffs{ "current" }->{ "accelerate" } == 1 and
                    ($opts{ "action" } eq "kill" or $opts{ "action" } eq "tower") ) {
            $scaling = 0.55; # accelerate additional MP scaling on AAs
        }
        my $eff_magical_base_dmg = ($base_stats{ "auto_damage" }->{ $opts{ "god" } }
                + $opts{ "level" } * $base_stats{ "auto_level_scaling" }->{ $opts{ "god" } }
                + $scaling * get_eff_power())
                * ${attack_chain_progression}[ $next_attack_chain ];
        return $eff_magical_base_dmg;
    }
}

sub calc_mitigated_damage( $ $ $ $ $ ) {

    # TODO add starting target index so i can do aoe effects on the other targets

    my $pre_prot_damage = shift;
    my $damage_source = shift;
    my $print = shift;
    my $num_targets = shift;
    my $damage_type = shift;

    my $i = 0;
    my $j = 0;

    my $total_damage = 0;

    while ( $i < $num_targets ) {

        while ( $j < scalar(@targets) and $targets[ $j ]->{ "current_health" } == 0 ) {
            # skip dead targets, but don't remove them from the array
            $j++;
        }
        if ( $j >= scalar (@targets) ) {
            # walked off the end of the array
            last;
        }

        my $their_base_prot = 0;
        if ( $damage_type eq "physical" ) {
            # TODO it is possible for physical gods to do magical damage, e.g. with runeforged or nemean
            # and vice versa, e.g., nu wa minions
            $their_base_prot = $targets[$j]->{"phys_prot"};

            if ($buffs{ "current" }->{ "spectral_armor" } == 1) {
                $their_base_prot += 20;
            }

            if ( $lifesteal > 0 and defined $enemy_items{"spectral_armor"}
                and $buffs{ "cooldown" }->{ "spectral_armor" } <= $time) {
                # spectral is available 
                if( rand() < 0.3 ) {
                    # spectral proc
                    add_stack("spectral_armor");
                    reset_buff_time("spectral_armor");
                    $buffs{ "current" }->{ "spectral_armor" } = 1;
                    $buffs{ "cooldown" }->{ "spectral_armor" } = $time + 30000;
                }
            }
        } elsif ($damage_type eq "magical") {
            $their_base_prot = $targets[$j]->{"mag_prot"};
            if (defined $enemy_items{ "oni" }) {
                $their_base_prot += 15 * $buffs{ "current" }->{ "oni" };
                rm_stack("oni");
            }
        }
        # else damage type is true

        my $eff_percent_pen = $percent_pen;
        if ( $opts{"action"} eq "kill" and $opts{"god"} eq "hou_yi"
                    and $ability_stats{ "level" }->{ "mark_of_golden_crow" }->[ $opts{ "level" } ] == 5 ) {
            # TODO this might ought to live elsewhere
            $eff_percent_pen += 0.25; # assume mark is applied
        }
        if ( $opts{"action"} eq "kill" and $opts{"god"} eq "hou_yi" ) {
            # TODO this might ought to live elsewhere
            $pre_prot_damage += 0.01 * $pre_prot_damage *
                    $ability_stats{ "level" }->{ "mark_of_golden_crow" }->[ $opts{"level"} ] * 
                    int( ($targets[$j]->{"max_health"} - $targets[$j]->{"current_health"})
                    / (0.1 * $targets[$j]->{"max_health"}) );
        }

        my $their_eff_prot = $their_base_prot;
        my $eff_percent_reduction = $percent_reduction;
        if ( $opts{"action"} ne "tower" ) {
            $eff_percent_reduction += (0.08 * $buffs{ "current" }->{ "demonic_grip" });
            $eff_percent_reduction += (0.08 * $buffs{ "current" }->{ "executioner" });
        }
        if ( $opts{"action"} eq "kill" and $buffs{"current"}->{"divine_judgment"} > 0 ) {
            $eff_percent_reduction += $ability_stats{"damage"}->{"divine_judgment"}->[
                    $ability_stats{"level"}->{"divine_judgment"}->[$opts{"level"}]]; # damage and prot reduction same
        }
        $their_eff_prot *= (1 - $eff_percent_reduction);
        $their_eff_prot -= $flat_reduction;
        if ( $opts{"action"} ne "tower" ) {
            $their_eff_prot -= 10 * $buffs{ "current" }->{ "spear" };
            $their_eff_prot -= 10 * $buffs{ "current" }->{ "stone_cutting_sword" };
        }
        $their_eff_prot *= (1 - $eff_percent_pen);
        my $eff_flat_pen = $flat_pen + 5 * $buffs{"current"}->{"crusher"};
        if ($eff_flat_pen > 50) { $eff_flat_pen = 50; }
        $their_eff_prot -= $eff_flat_pen;

        if ($their_eff_prot < 0) { $their_eff_prot = 0; }

        my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;

        #$damage -= $their_flat_reduction;
        $damage *= (1 - $targets[$j]->{"percent_red"});
        
        if ( $opts{ "verbosity" } >= $VERBOSITY_NORMAL and $print) {
            my $output = sprintf "time %6d %20s %8s prot %4d -> %4d damage %4d -> %4d ",
                    $time, $damage_source, $damage_type, $their_base_prot,
                    $their_eff_prot, $pre_prot_damage, $damage;
            #if ( $opts{"action"} eq "clear" or $opts{"action"} eq "jungle" ) {
            #    $output .= sprintf " * %d -> %d ", $num_targets, ($num_targets * $damage);
            #}
            if ( defined $items{ "spear" } ) {
                $output .= sprintf " %d spear stacks ", $buffs{ "current" }->{ "spear" };
            }
            if ( defined $items{ "demonic_grip" } ) {
                $output .= sprintf " %d grip stacks ", $buffs{ "current" }->{ "demonic_grip" };
            }
            if ( defined $items{ "executioner" } ) {
                $output .= sprintf " %d executioner stacks ", $buffs{ "current" }->{ "executioner" };
            }
            if ( defined $items{ "stone_cutting_sword" } or defined $items{ "scs" } ) {
                $output .= sprintf " %d SCS stacks ", $buffs{ "current" }->{ "stone_cutting_sword" };
            }
            if ( defined $items{ "heartseeker" } ){
                $output .= sprintf " %d heartseeker stacks ", $buffs{ "current" }->{ "heartseeker" };
            }
            if ( defined $items{ "crusher" } ){
                $output .= sprintf " %d crusher stacks ", $buffs{ "current" }->{ "crusher" };
            }
            if ( defined $enemy_items{ "oni" }) {
                $output .= sprintf " %d oni stacks ", $buffs{ "current" }->{ "oni" };
            }
            if ( $opts{"action"} eq "kill" or $opts{"action"} eq "tower" ) {
                $output .= sprintf " their health %4d -> %4d ", $targets[$j]->{"current_health"},
                        ($targets[$j]->{"current_health"} - $damage >= 0)
                        ? ($targets[$j]->{"current_health"} - $damage) : 0;
            }
            $output .= "\n";
            push @one_pass_verbosity, $output;
            if ( $opts{ "verbosity" } >= $VERBOSITY_EPIC ) {
                print $output;
            }
        } # output

        if ( $print ) {
            $targets[$j]->{"current_health"} -= $damage;
            if ($targets[$j]->{"current_health"} < 0) {
                $targets[$j]->{"current_health"} = 0;
            }
        }

        $total_damage += $damage;

        $i++;
        $j++;
    } # per target loop
    
    return $total_damage;

}


#################################################################################
# skill ordering and cooldowns
#################################################################################
sub get_next_skill() {
    if ( $opts{"action"} eq "clear" or $opts{"action"} eq "jungle" ) {
        if ( scalar( $clear_skills{ $opts{ "god" } } ) == 0 ) {
            return undef;
        }
        if ( scalar( $clear_skills{ $opts{ "god" } } ) < $combo_idx ) {
            $combo_idx = 0;
        }
        return $clear_skills{ $opts{ "god" } }->[ $combo_idx ];
    }
    else
    {
        if ( scalar( @{ $combos{ $opts{ "god" } } } ) == 0 ) {
            return undef;
        }
        if ( scalar( @{ $combos{ $opts{ "god" } } } ) <= $combo_idx ) {
            $combo_idx = 0;
        }
        return $combos{ $opts{ "god" } }->[ $combo_idx ];
    }
}

#################################################################################
# main loop
#################################################################################




while ( $iteration < $max_iterations ) {

    @one_pass_verbosity = ();

    if (defined $items{"soul_reaver"}) {
        $buffs{ "current" }->{ "soul_reaver" } = 1;
    }

    if ($opts{ "god" } eq "apollo") {
        $audacity_stacks = 5;
    }

    my $i = 0;
    while ( $i < scalar(@targets) ) {
        $targets[$i]->{"current_health"} = $targets[$i]->{"max_health"};
        $i++;
    }

    #while ( $time < $opts{"time"} ) {
    while ( any_targets_remain() ) {

        #if ( $time % 1000 == 0 ) {
        #    print "time = $time\n";
        #    print Dumper(@targets);
        #}

        # stuff that happens FIRST
        if ($opts{ "god" } eq "awilix" and $time == 0) {
            add_stack("initiative");
            reset_buff_time("initiative");

            if (defined $items{"hydras"} or defined $items{"hydras_lament"}) {
                add_stack("hydras_lament");
                reset_buff_time("hydras_lament");
            }
        }


        #################################################################################
        # execute skills
        #################################################################################
        undef $next_skill;
        $next_skill = get_next_skill();
        if ( defined $next_skill and $opts{"action"} ne "tower" ) {
            if ( $time >= $ability_stats{ "time" }->{ $next_skill } and $time >= $next_skill_time
                        and $ability_stats{"level"}->{$next_skill}->[ $opts{"level"} ] > 0 ) {
                # time to use next ability
                my $effective_power = get_eff_power();
                if ( $buffs{ "current" }->{"heartseeker"} == 5 ){
                    $effective_power += 40;
                    $buffs{ "current" }->{ "heartseeker" } = 0;
                }
                my $pre_prot_damage = $ability_stats{ "damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill }->[ $opts{ "level" } ] ] +
                        ($effective_power * $ability_stats{ "scaling" }->{ $next_skill });
                if ( $opts{ "action" } eq "kill" and $next_skill eq "ricochet" ) {
                    # assume one bounce on ricochet on a god
                    # TODO this is kind of a hack...
                    $pre_prot_damage *= 1.5;
                }
                if ( $opts{ "action" } eq "kill" and $next_skill eq "divine_judgment" ) {
                    # divine judgment does % current hp as damage
                    # TODO this is kind of a hack...
                    $pre_prot_damage = $ability_stats{ "damage" }->{ $next_skill }->[
                        $ability_stats{ "level" }->{ $next_skill }->[ $opts{ "level" } ] ]
                        * $targets[0]->{"current_health"};
                }
                my $hit = 0;
                if ( $buffs{ "current" }->{ "open_wound" } ) { $pre_prot_damage *= 1.15; }
                while ( $hit < $ability_stats{ "hits" }->{ $next_skill } ) {
                    if( $pre_prot_damage > 0 ) { 
                        if ( $buffs{"current"}->{"soul_reaver"} > 0) {
                            $damage += calc_mitigated_damage( $targets[0]->{"max_health"} * 0.10,
                                    "soul_reaver", 1, 1, "true" );
                            $buffs{ "current" }->{ "soul_reaver" } = 0;
                            $buffs{ "cooldown" }->{ "soul_reaver" } =
                                    $time + $buffs{ "duration" }->{ "soul_reaver" };
                        }
                        if ( $next_skill eq "deathbane" ) {
                            # deathbane can crit
                            $pre_prot_damage = ability_crits( $pre_prot_damage );
                        }

                        # damage calculated, apply proper aoe
                        if ( $next_skill eq "so_beautiful" and $opts{"action"} eq "clear") {
                            # so beautiful has special mitigation, handle that here
                            # do NOT process this like a normal aoe
                            my $it = 0;
                            while ( $it < $ability_stats{ "aoe" }->{ $next_skill } ) {
                                $damage += calc_mitigated_damage( $pre_prot_damage * (0.85 ** $it),
                                        $next_skill, 1, 1,
                                        $base_stats{ "type" }->{ $opts{"god"} });
                                $it++;
                            }
                        } else {
                            $damage += calc_mitigated_damage( $pre_prot_damage, $next_skill, 1,
                                    get_aoe( $next_skill ),
                                    $base_stats{ "type" }->{ $opts{"god"} } );
                        }


                        if(defined $items{"spear"}) {
                            reset_buff_time("spear");
                            add_stack("spear");
                        }
                        if(defined $items{"bluestone"}) {
                            # schedule ticks
                            my $i = 0;
                            my $aoe = get_aoe($next_skill);
                            add_bluestone( $aoe );
                        }
                    }
                    $hit++;
                }

                if ( $opts{ "action" } eq "kill" and $next_skill eq "divine_judgment" ) {
                    # add stack AFTER the damage is done, so we don't calc prot reduction
                    # for the divide judgment hit
                    add_stack("divine_judgment");
                    reset_buff_time("divine_judgment");
                }

                if ( 0 < $ability_stats{ "num_ticks" }->{ $next_skill } ) {
                    $pre_prot_damage = $ability_stats{ "tick_damage" }->{ $next_skill }->[
                            $ability_stats{ "level" }->{ $next_skill }->[ $opts{ "level" } ] ] +
                            (get_eff_power() * $ability_stats{ "tick_scaling" }->{ $next_skill });
                    if ( $buffs{ "current" }->{ "open_wound" } ) { $pre_prot_damage *= 1.15; }
                    # this ability has ticks, schedule them
                    my $i = 0;
                    while ( $i < $ability_stats{ "num_ticks" }->{ $next_skill } ) {

                        my $tick_time = $time + ($i + 1) * $ability_stats{ "tick_duration" }->{ $next_skill } * 1000;
                        while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                        if ( $next_skill ne "last_breath" ) {
                            # not true damage
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick",
                                    $base_stats{ "type" }->{ $opts{"god"} },
                                    get_aoe($next_skill) ];
                        } else {
                            $ticks{ $tick_time } = +[ $pre_prot_damage, "$next_skill tick", "true", 1 ];
                        }

                        $i++;
                    }
                }

                if ( $buffs{ "current" }->{ "open_wound" } ) {
                    $buffs{ "current" }->{ "open_wound" } = 0;
                } elsif ( $opts{ "god" } eq "bastet" ) {
                    $buffs{ "current" }->{ "open_wound" } = 1;
                }

                if ( $opts{ "god" } eq "serqet" ) {
                    add_stack( "serqet_poisons" );
                }

                if (defined $items{"polynomicon"} and $buffs{ "cooldown_time" }->{ "polynomicon" } <= $time) {
                    add_stack("polynomicon");
                    reset_buff_time("polynomicon");
                }
                if (defined $items{"hydras"} or defined $items{"hydras_lament"}) {
                    add_stack("hydras_lament");
                    reset_buff_time("hydras_lament");
                }

                $ability_stats{ "time" }->{ $next_skill } = $time +
                        (1000*($ability_stats{ "cooldown" }->{ $next_skill } * (1 - $cdr)));

                $next_attack_chain = 0;
                $next_attack = $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill };
                $next_skill_time = $time + 1000 * $ability_stats{ "next_action" }->{ $next_skill };

                $combo_idx++;
            }
        }

        #################################################################################
        # execute ticks
        #################################################################################
        if ( defined $ticks{ $time } and $opts{"action"} ne "tower" ) {

            $damage += calc_mitigated_damage(
                    $ticks{ $time }->[0], $ticks{ $time }->[1], 1, $ticks{ $time }->[3],
                    $ticks{ $time }->[2] );

            if ( $ticks{ $time }->[1] eq "bluestone" ) {
                if ( not $ticks{ $time + 1000 }->[1] eq "bluestone" ) {
                    # TODO this is not guaranteed successful, there COULD be a tick of something
                    # already scheduled at that time, and the second bluestone would go 1ms later
                    # this is the second tick
                    $bluestone_stacks--;
                }
            }
            
            # remove " tick" from name before trying to look it up in ability stats hash
            # TODO probably a cleaner way to do this
            my $skill_name = $ticks{ $time }->[ 1 ];
            $skill_name =~ s/\s+.*//;

            if(defined $items{"bluestone"} and defined $ability_stats{ "tick_damage" }->{
                        $skill_name } ) {
                # if this tick is an ability, schedule bluestone ticks
                # TODO only do this for 2 ticks!
                my $aoe = $ticks{ $time }->[3]; # borrow aoe coefficient from parent tick
                add_bluestone( $aoe );
            }


            if(defined $items{"spear"}) {
                reset_buff_time("spear");
                add_stack("spear");
            }
        }
        
        #################################################################################
        # execute buffs TODO can we merge these into the general skill logic?
        #################################################################################
        if ($opts{ "god" } eq "chronos" and $time >= $ability_stats{"time"}->{"accelerate"}) {
            reset_buff_time("accelerate");
            add_stack("accelerate");
            if (defined $items{"polynomicon"} and $buffs{ "cooldown_time" }->{ "polynomicon" } <= $time) {
                add_stack("polynomicon");
                reset_buff_time("polynomicon");
            }
            $ability_stats{ "time" }->{ "accelerate" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "accelerate" } * (1 - $cdr)));
        }

        if ($opts{ "god" } eq "freya" and $time >= $ability_stats{"time"}->{"pulse"}) {
            reset_buff_time( "pulse" );
            add_stack( "pulse" );
            if ( $opts{"action"} eq "kill" ) {
                reset_buff_time( "irradiate" );
                add_stack( "irradiate" );
                $ability_stats{ "time" }->{ "irradiate" } = $time +
                        (1000*($ability_stats{ "cooldown" }->{ "irradiate" } * (1 - $cdr)));
            }
            if (defined $items{"polynomicon"} and $buffs{ "cooldown_time" }->{ "polynomicon" } <= $time) {
                add_stack("polynomicon");
                reset_buff_time("polynomicon");
            }
            $ability_stats{ "time" }->{ "pulse" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "pulse" } * (1 - $cdr)));
        }

        if ($opts{ "god" } eq "sol" and $time >= $ability_stats{ "time" }->{ "radiance" }) {
            $heat += $radiance_heat_amount[
                   $ability_stats{ "level" }->{ "radiance" }->[ $opts{ "level" } ] ];
            if (defined $items{"polynomicon"} and $buffs{ "cooldown_time" }->{ "polynomicon" } <= $time) {
                add_stack("polynomicon");
                reset_buff_time("polynomicon");
            }
            $ability_stats{ "time" }->{ "radiance" } =
                    $time + (1000 * $ability_stats{ "cooldown" }->{ "radiance" } * (1-$cdr));
        }

        if ($opts{ "god" } eq 'xbal' and $time == 0 and $opts{"action"} ne "tower") {
            $buffs{ "current" }->{ "branching_bolas" }= 1;
        }

        if ($opts{ "god" } eq 'mercury' and $time == 0 and $opts{"action"} ne "tower") {
            reset_buff_time("maximum_velocity");
            add_stack("maximum_velocity");
        }

        if ($opts{ "god" } eq "rama" and $time == 0 and $opts{"action"} ne "tower") {
            reset_buff_time("pick_me_up");
            add_stack("pick_me_up");
            reset_buff_time("astral_strike");
            add_stack("astral_strike");
            $astral_arrows = 5;
        } elsif ($opts{ "god" } eq "rama" and $time == 0 and $opts{"action"} eq "tower") {
            reset_buff_time("pick_me_up");
            add_stack("pick_me_up");
        }

        if ($opts{ "god" } eq "ullr" and $time >= $ability_stats{"time"}->{"expose_weakness"}) {
            add_stack("expose_weakness");
            reset_buff_time( "expose_weakness" );
            $ability_stats{ "time" }->{ "expose_weakness" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "expose_weakness" } * (1 - $cdr)));
        }

        if ($opts{ "god" } eq "artemis" and $time >= $ability_stats{"time"}->{"vengeful_assault"}) {
            add_stack("vengeful_assault");
            reset_buff_time("vengeful_assault");
            $ability_stats{ "time" }->{ "vengeful_assault" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "vengeful_assault" } * (1 - $cdr)));
        }

        #################################################################################
        # execute attack-chain dependent skills
        #################################################################################
#        if ($opts{ "god" } eq "fenrir" and $num_attacks == 1 and
#                    $ability_stats{ "time" }->{ "brutalize" } <= $time  and $opts{"action"} ne "tower") {
#
#            # brutalize has very short AA cancel, do it after the first AA
#            my $pre_prot_damage = $ability_stats{ "damage" }->{ "brutalize" }->[
#                    $ability_stats{ "level" }->{ "brutalize" }->[ $opts{ "level" } ] ] +
#                    (get_eff_power() * $ability_stats{ "scaling" }->{ "brutalize" });
#            my $hit = 0;
#            while ( $hit < $ability_stats{ "hits" }->{ "brutalize" } ) {
#                if( $pre_prot_damage > 0 ) { 
#                    $damage += calc_mitigated_damage( $pre_prot_damage, "brutalize", 1,
#                            get_aoe("brutalize"),
#                            $base_stats{ "type" }->{ $opts{"god"} } );
#                    if(defined $items{"bluestone"}) {
#                        # schedule ticks
#                        my $aoe = get_aoe("brutalize");
#                        add_bluestone( $aoe );
#                    }
#                }
#                $hit++;
#            }
#
#            $ability_stats{ "time" }->{ "brutalize" } = $time +
#                    1000 * $ability_stats{ "cooldown" }->{ "brutalize" };
#
#            $next_attack = $time + 2000;
#
#        }

# TODO AA canceling should be part of normal skill logic, not only for specific skills

        if ($opts{ "god" } eq "medusa" and $num_attacks == 1 and $viper_shots_left == 0
                    and ($opts{"action"} eq "kill" or $opts{"action"} eq "tower")) {
            # start viper shot after the first AA for AA cancel benefit
            $viper_shots_left = 3;
            my $viper_attack_rate = $attack_rate +
                    $base_stats{ "attack_rate" }->{ $opts{ "god" } } * 
                    $ability_stats{ "attack_speed_buff" }->{ "viper_shot" }->[
                        $ability_stats{ "level" }->{ "viper_shot" }->[ $opts{ "level" } ] ];
            if ($viper_attack_rate > 2.5) {
                $messages_to_print{ "overcapping viper attack rate" } = 1;
                $viper_attack_rate = 2.5;
            }
            if (defined $items{"hydras"} or defined $items{"hydras_lament"}) {
                add_stack("hydras_lament");
                reset_buff_time("hydras_lament");
            }

            my $viper_attack_duration = int(1000 / $viper_attack_rate);
            $next_attack = $time + $viper_attack_duration;
        }

        if ($opts{ "god" } eq "awilix" and $next_attack_chain == 2 and
                $ability_stats{ "time" }->{ "feather_step" } <= $time  and $opts{"action"} ne "tower") {
            # time to feather step
            my $effective_power = get_eff_power();
            if ( $buffs{ "current" }->{"heartseeker"} == 5 ){
                $effective_power += 40;
                $buffs{ "current" }->{ "heartseeker" } = 0;
            }
            my $pre_prot_damage = $ability_stats{ "damage" }->{ "feather_step" }->[
                    $ability_stats{ "level" }->{ "feather_step" }->[ $opts{ "level" } ] ]
                    + ($ability_stats{ "scaling" }->{ "feather_step" } * $effective_power);

            $damage += calc_mitigated_damage($pre_prot_damage, "feather step", 1, 1,
                    $base_stats{ "type" }->{ $opts{"god"} });

            # reset attack chain
            $next_attack_chain = 0;
            $next_attack = $time + 250; # don't know actual AA cancel durations

            if (defined $items{"hydras"} or defined $items{"hydras_lament"}) {
                add_stack("hydras_lament");
                reset_buff_time("hydras_lament");
            }

            $ability_stats{ "time" }->{ "feather_step" } = $time +
                    (1000*($ability_stats{ "cooldown" }->{ "feather_step" } * (1 - $cdr)));
        }



        #################################################################################
        # execute basic attacks
        #################################################################################
        if ( $time == $next_attack ) {

            my $pre_prot_damage = get_basic_attack_damage();
            
            if($buffs{ "current" }->{ "expose_weakness" }) { 
                $pre_prot_damage += $ability_stats{ "power_buff" }->{ "expose_weakness" }->[
                        $ability_stats{ "level" }->{ "expose_weakness" }->[ $opts{ "level" } ] ];
            }

            if($buffs{ "current" }->{ "branching_bolas" }) { 
                $pre_prot_damage += $ability_stats{ "power_buff" }->{ "branching_bolas" }->[
                        $ability_stats{ "level" }->{ "branching_bolas" }->[ $opts{ "level" } ] ];
            }

            if($buffs{ "current" }->{ "astral_strike" } and $astral_arrows > 0) {
                $astral_arrows--;
                $pre_prot_damage += $ability_stats{ "damage" }->{ "astral_strike" }->[
                        $ability_stats{ "level" }->{ "astral_strike" }->[ $opts{ "level" } ] ];
            }

            if ( $opts{ "god" } eq "mercury" and $num_attacks == 0  and $opts{"action"} ne "tower") {
                # assume passiv is procced on first auto
                $pre_prot_damage += get_eff_power() * 0.75;
            }

            if ( $opts{ "god" } eq "mercury" ) {
                $pre_prot_damage += 0.3 * get_mvmt_speed();
            }

            # crit chance
            my $total_crit_chance = $base_crit_chance;

            if ($opts{ "god" } eq "artemis") {
                $total_crit_chance += 0.05 * $buffs{ "current" }->{ "still_target" };

                add_stack( "still_target" );
                reset_buff_time( "still_target" );
            }

            if (defined $items{ "rage" }) {
                $total_crit_chance += 0.1 * $buffs{ "current" }->{ "rage" };
            }

            # item buffs mostly do not crit (e.g., telkhines, obow) but qins does
            # so do it here, before we calculate crit damage
            if (defined $items{ "qins" } and $opts{"action"} eq "kill") {
                $pre_prot_damage += 0.04 * $targets[0]->{"max_health"};
            }

            my $rng = rand();
            if ( $opts{ "action" } ne "tower" ) {
                if ( $rng < $total_crit_chance ) {
                    # critical hit
                    $pre_prot_damage *= 2;
                    if (defined $items{ "deathbringer" }) {
                        $pre_prot_damage *= 1.2; # 240%
                    }
                    $crits++;

                    # handle rage
                    $buffs{ "current" }->{ "rage" } = 0;

                    # handle malice
                    if ($malice_procs_left == 0) {
                        # no procs, set next proc for 1 sec from now, otherwise just refresh count
                        $next_malice_proc = $time + 1000;
                    }
                    $malice_procs_left = 3;
                }
                else
                {
                    add_stack( "rage" );
                }
            }

            # ability buffs
            if ($buffs{ "current" }->{ "pulse" } and $opts{"action"} ne "tower") {
                my $aoe = 1;
                if ( ($opts{"action"} eq "clear" or $opts{"action"} eq "jungle" ) and
                        $buffs{ "current" }->{ "pulse" } and not $buffs{ "current" }->{ "irradiate" }) {
                    $aoe = 3;
                }
                $damage += calc_mitigated_damage( $ability_stats{ "damage" }->{ "pulse" }->[
                        $ability_stats{ "level" }->{ "pulse" }->[ $opts{ "level" } ] ] + 0.15 * get_eff_power(),
                        "pulse", 1, $aoe, "magical");

                if ( $buffs{"current"}->{"soul_reaver"} > 0) {
                    $damage += calc_mitigated_damage( $targets[0]->{"max_health"} * 0.10,
                            "soul_reaver", 1, 1, "true" );
                    $buffs{ "current" }->{ "soul_reaver" } = 0;
                    $buffs{ "cooldown" }->{ "soul_reaver" } =
                            $time + $buffs{ "duration" }->{ "soul_reaver" };
                }
            }

            if ($buffs{ "current" }->{ "irradiate" }) {
                $damage += calc_mitigated_damage( $ability_stats{ "damage" }->{ "irradiate" }->[
                        $ability_stats{ "level" }->{ "irradiate" }->[ $opts{ "level" } ] ] + 0.25 * get_eff_power(),
                        "irradiate", 1, 1, "magical" );
                if ( $buffs{"current"}->{"soul_reaver"} > 0) {
                    $damage += calc_mitigated_damage( $targets[0]->{"max_health"} * 0.10,
                            "soul_reaver", 1, 1, "true" );
                    $buffs{ "current" }->{ "soul_reaver" } = 0;
                    $buffs{ "cooldown" }->{ "soul_reaver" } =
                            $time + $buffs{ "duration" }->{ "soul_reaver" };
                }
            }

            if ($buffs{ "current" }->{ "serqet_poisons" } >= 2) {
                $pre_prot_damage += $targets[0]->{"max_health"} * 0.1;
                if ($buffs{ "current" }->{ "serqet_poisons" } == 3) {
                    $pre_prot_damage += $targets[0]->{"max_health"} * 0.1;
                }
            }
            $buffs{ "current" }->{ "serqet_poisons" } = 0;

            # apply sol's bonus only to her base damage, not to polynomicon / telkhines / etc.
            if ( $opts{ "god" } eq "sol" and $heat == 100 ) { $pre_prot_damage *= 1.25; }

            # add viper shot extra damage
            if ($viper_shots_left > 0) {
                $viper_shots_left--;
                my $pre_prot_damage = $ability_stats{ "tick_damage" }->{ "viper_shot" }->[
                        $ability_stats{ "level" }->{ "viper_shot" }->[ $opts{ "level" } ] ]
                         + get_eff_power() * $ability_stats{ "tick_scaling" }->{ "viper_shot" };
                my $i = 0;
                # this ability has ticks, schedule them
                while ( $i < 3 ) {
                    # viper shot 3 ticks at 0.5 seconds
                    my $tick_time = $time + ($i + 1) * 0.5 * 1000;
                    while ( defined $ticks{ $tick_time } ) { $tick_time++; }
                    $ticks{ $tick_time } = +[ $pre_prot_damage, "viper shot tick", "physical",
                            $ability_stats{ "aoe" }->{ "viper_shot" } ];

                    $i++;
                }
            }


            # item buffs

            if($buffs{ "current" }->{ "hydras_lament" }) {
                $hydras_damage += 0.3 * get_basic_attack_damage();
                $hydras_procs++;
                $pre_prot_damage += 0.3 * get_basic_attack_damage();
                $buffs{ "current" }->{ "hydras_lament" } = 0;
            }

            if ($buffs{ "current" }->{ "polynomicon" }) {
                $damage += calc_mitigated_damage( 0.75 * get_eff_power(), "polynomicon", 1, 1,
                        $base_stats{ "type" }->{ $opts{"god"} } );
                $polynomicon_procs++;
                $polynomicon_damage = int(calc_mitigated_damage( 0.75 * get_eff_power(), "polynomicon", 0, 1,
                        $base_stats{ "type" }->{ $opts{"god"} } ));
                $buffs{ "current" }->{ "polynomicon" } = 0;
                $buffs{ "cooldown_time" }->{ "polynomicon" } = $time + $buffs{ "cooldown" }->{ "polynomicon" };
            }

            if (defined $items{"telkhines_ring"} or defined $items{ "telkhines" }
                    and $opts{"action"} ne "tower") {
                #$pre_prot_damage += 35;
                $damage += calc_mitigated_damage( 35, "telkhines", 1, 1,
                        $base_stats{ "type" }->{ $opts{"god"} } );
                $telkhines_damage += calc_mitigated_damage( 35, "telkhines", 0, 1,
                        $base_stats{ "type" }->{ $opts{"god"} } );
            }

            if (defined $items{ "masamune" }) {
                # 1 for every 10 health diff TODO my health
                my $bonus = int(0.1 * ($targets[0]->{"max_health"} - 2000)); 
                if ($bonus > 50) { $bonus = 50; }
                $damage += calc_mitigated_damage( $bonus, "masamune", 1, 1, "physical" );
            }

            if (($opts{"action"} eq "clear" or $opts{"action"} eq "jungle")
                        and (defined $items{"obow"} or defined $items{"odysseus_bow"})) {
                if ($obow_hits == 3) {
                    $obow_hits = 0;
                    my $obow_damage = 0.5 * get_eff_power() + 30;
                    $damage += calc_mitigated_damage( $obow_damage, "obow", 1, 5,
                            $base_stats{ "type" }->{ $opts{"god"} } );
                }
                else
                {
                    $obow_hits++;
                }
            }

            if (($opts{"action"} eq "clear" or $opts{"action"} eq "jungle") and defined $items{"charged_bow"}) {
                if ($obow_hits == 3) {
                    $obow_hits = 0;
                    my $obow_damage = 20;
                    $damage += calc_mitigated_damage( $obow_damage, "charged_bow", 1, 5,
                            $base_stats{ "type" }->{ $opts{"god"} } );
                }
                else
                {
                    $obow_hits++;
                }
            }

            # all damage calcs done, execute the attack
            if ( ($opts{"action"} eq "clear" or $opts{"action"} eq "jungle")
                        and defined $items{ "golden_bow" } ) {
                $damage += calc_mitigated_damage(0.5 * $pre_prot_damage, "attack", 1, 2,
                        $base_stats{ "type" }->{ $opts{"god"} });
                $attack_damage += calc_mitigated_damage(0.5 * $pre_prot_damage, "attack", 0, 2,
                        $base_stats{ "type" }->{ $opts{"god"} });
            } elsif ( ($opts{"action"} eq "clear" or $opts{"action"} eq "jungle")
                    and defined $items{ "throwing_dagger" } ) {
                $damage += calc_mitigated_damage(0.25 * $pre_prot_damage, "attack", 1, 2,
                        $base_stats{ "type" }->{ $opts{"god"} });
                $attack_damage += calc_mitigated_damage(0.25 * $pre_prot_damage, "attack", 0, 2,
                        $base_stats{ "type" }->{ $opts{"god"} });
            }

            if($buffs{ "current" }->{ "astral_strike" } and $astral_arrows > 0) {
                my $aoe = 0;
                if ( $opts{"action"} eq "clear" ){
                    $aoe = 5; # number of additional targets
                } elsif( $opts{"action"} eq "jungle" ) {
                    $aoe = 2;
                }

                if ( $aoe > 0 ) {
                    $damage += calc_mitigated_damage($pre_prot_damage, "astral strike", 1, $aoe,
                            $base_stats{ "type" }->{ $opts{"god"} });
                    $attack_damage += calc_mitigated_damage($pre_prot_damage, "astral strike", 0, $aoe,
                            $base_stats{ "type" }->{ $opts{"god"} });
                }
            }

            $damage += calc_mitigated_damage($pre_prot_damage, "attack", 1, 1,
                    $base_stats{ "type" }->{ $opts{"god"} });
            $attack_damage += calc_mitigated_damage($pre_prot_damage, "attack", 0, 1,
                    $base_stats{ "type" }->{ $opts{"god"} });


            # get ready for next attack
            if (defined $items{"spear"} and
                    ($buffs{ "current" }->{ "pulse" } or $buffs{ "current" }->{ "irradiate" })) {
                reset_buff_time( "spear" );
                add_stack("spear");
            }

            if (defined $items{"demonic_grip"}) {
                reset_buff_time( "demonic_grip" );
                add_stack("demonic_grip");
            }

            if (defined $items{ "ichaival" }) {
                reset_buff_time( "ichaival" );
                add_stack("ichaival");
            }

            if (defined $items{ "executioner" }) {
                reset_buff_time( "executioner" );
                add_stack("executioner");
            }

            if (defined $items{ "stone_cutting_sword" } or defined $items{ "scs" }) {
                reset_buff_time( "stone_cutting_sword" );
                add_stack("stone_cutting_sword");
            }

            if ($opts{"action"} eq "tower" and defined $items{"crusher"}) {
                add_stack("crusher");
                reset_buff_time("crusher");
            }

            # attack chain progression
            my $eff_attack_rate = $attack_rate;
            
            $rng = rand();
            if (defined $enemy_items{"midgardian"} and $rng < 0.3) {
                reset_buff_time("midgardian");
                add_stack("midgardian");
            }

            if ($buffs{"current"}->{"midgardian"} == 1) {
                $eff_attack_rate -= 0.3 * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }

            $eff_attack_rate += $buffs{"current"}->{"crusher"} * 0.1 *
                    $base_stats{ "attack_rate" }->{ $opts{ "god" } };

            if ( $opts{ "god" } eq "sol" ) {
                $eff_attack_rate += 
                        $base_stats{ "attack_rate" }->{ $opts{ "god" } } * ($heat * 0.25 * 0.012);
                $messages_to_print{ "heat effective attack rate" } = $eff_attack_rate;
            }
            if ( $opts{ "god" } eq "ullr" ) {
                $eff_attack_rate += 
                        $ability_stats{ "attack_speed_buff" }->{ "wield_bow" }->[
                        $ability_stats{ "level" }->{ "wield_bow" }->[ $opts{ "level" } ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }
            if ( $buffs{ "current" }->{ "vengeful_assault" } ) {
                $eff_attack_rate += 
                        $ability_stats{ "attack_speed_buff" }->{ "vengeful_assault" }->[
                        $ability_stats{ "level" }->{ "vengeful_assault" }->[ $opts{ "level" } ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }
            if ( $buffs{ "current" }->{ "pick_me_up" } ) { 
                $eff_attack_rate += 
                        $ability_stats{ "attack_speed_buff" }->{ "pick_me_up" }->[
                        $ability_stats{ "level" }->{ "pick_me_up" }->[ $opts{ "level" } ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }
            if ( $buffs{ "current" }->{ "maximum_velocity" } ) {
                $eff_attack_rate +=
                        $ability_stats{ "attack_speed_buff" }->{ "maximum_velocity" }->[
                        $ability_stats{ "level" }->{ "maximum_velocity" }->[ $opts{ "level" } ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }
            if ( $buffs{ "current" }->{ "accelerate" } ) {
                $eff_attack_rate += 
                        $ability_stats{ "attack_speed_buff" }->{ "accelerate" }->[
                        $ability_stats{ "level" }->{ "accelerate" }->[ $opts{ "level" } ] ]
                        * $base_stats{ "attack_rate" }->{ $opts{ "god" } };
            }
            if ( $audacity_stacks > 0) {
                $eff_attack_rate += $base_stats{ "attack_rate" }->{ $opts{ "god" } };
                $audacity_stacks--;
            }
            if ($viper_shots_left > 0) {
                $eff_attack_rate +=
                        $base_stats{ "attack_rate" }->{ $opts{ "god" } } * 
                        $ability_stats{ "attack_speed_buff" }->{ "viper_shot" }->[
                        $ability_stats{ "level" }->{ "viper_shot" }->[ $opts{ "level" } ] ];
            }
            if ($buffs{"current"}->{"cocoon"} > 0) {
                rm_stack("cocoon");
                $eff_attack_rate += 
                        $base_stats{ "attack_rate" }->{ $opts{ "god" } } * 
                        $ability_stats{ "attack_speed_buff" }->{ "cocoon" }->[
                        $ability_stats{ "level" }->{ "cocoon" }->[ $opts{ "level" } ] ];
            }

            $eff_attack_rate += 0.03 * $buffs{ "current" }->{ "heartseeker" } *
                    $base_stats{ "attack_rate" }->{ $opts{ "god" } };

            if ( $eff_attack_rate > 2.5 ) { $eff_attack_rate = 2.5; }

            my $eff_attack_duration = int(1000 / $eff_attack_rate);
            $next_attack = $time + int($eff_attack_duration * ${attack_chain_progression}[ $next_attack_chain ]);
            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            $num_attacks++;

            $heat += 5;
            if ( $heat > 100 ) { $heat = 100; }

            if ($opts{"god"} eq "apollo" and $audacity_stacks == 0) {
                $audacity_charge++;
            }

            if (defined $items{ "heartseeker" } ) {
                add_stack( "heartseeker" );
                reset_buff_time( "heartseeker" );
            }

            $next_skill_time = $time + 100; # assume very fast AA cancels
        }

        #################################################################################
        # get ready for next tick of time
        #################################################################################


        if ( defined $items{ "malice" }
                and $time == $next_malice_proc and $malice_procs_left > 0 )
        {
            $total_malice_procs++;
            my $pre_prot_damage = 0.25 * get_basic_attack_damage();

            $damage += calc_mitigated_damage($pre_prot_damage, "malice", 1, 1,
                        $base_stats{ "type" }->{ $opts{"god"} });
            $malice_damage += calc_mitigated_damage($pre_prot_damage, "malice", 0, 1,
                        $base_stats{ "type" }->{ $opts{"god"} });

            $malice_procs_left -= 1;
            $next_malice_proc += 1000;
        }

        foreach my $buff (keys $buffs{ "time" } ) {
            if ( $time == $buffs{ "time" }->{ $buff } and $time != 0 ) {
                # time's up, reset stacks for this buff
                $buffs{ "current" }->{ $buff } = 0;
            }
        }

        if ($audacity_charge == 10) {
            $audacity_charge = 0;
            $audacity_stacks = 5;
        }

        if ( any_targets_remain() <= 0 and $ttk == 0 ) {
            $ttk = $time;
        }

        $time++;

    }

    #################################################################################
    # get ready for next iteration
    #################################################################################
    foreach my $ability ( keys $ability_stats{ "time" } )
    {
        # reset all cooldowns
        $ability_stats{ "time" }->{ $ability } = 0;
    }
    foreach my $buff ( keys $buffs{ "time" } ) {
        # reset all buffs
        $buffs{ "time" }->{ $buff } = 0;
        $buffs{ "current" }->{ $buff } = 0;
    }
    %ticks = ();
    $time = 0;
    $total_damage += $damage;
    $damage = 0;
    $combo_idx = 0;
    $next_attack = 0;
    $next_skill_time = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $malice_procs_left = 0;
    $next_malice_proc = 0;
    $viper_shots_left = 0;
    $obow_hits = 0;
    $total_ttk += $ttk;
    $ttk = 0;

    $iteration++;

}

#################################################################################
# output
#################################################################################
foreach my $key (keys %messages_to_print) {
        print $key . " " . $messages_to_print{ $key} . "\n";
}

foreach my $line ( @one_pass_verbosity ){
    print $line;
}

if( $total_ttk == 0) { $total_ttk = 1; }

printf "Total damage %.2f DPS %.2f\n", $total_damage/$max_iterations, ($total_damage / ($total_ttk/1000));
printf "TTK = %.2f\n", $total_ttk / $max_iterations;
if ( $opts{ "verbosity" } >= $VERBOSITY_NORMAL ) {
    print "effective power " . get_eff_power() . "\n";
    print "base attack damage " . get_basic_attack_damage() . "\n";
    print "base attack rate $attack_rate\n";
    if ( $total_attacks > 0 ) {
        printf "Num attacks: %.2f avg damage %.2f\n", $total_attacks/$max_iterations, ($attack_damage /$total_attacks);
    }
    printf "Damage from basic attacks %.2f Other damage %.2f\n", ($attack_damage/$max_iterations), (($total_damage - $attack_damage)/$max_iterations);
    if ( defined $items{ "polynomicon" } ) {
        print "Polynomicon procs $polynomicon_procs polynomicon damage $polynomicon_damage\n";
    }
    if ( defined $items{ "telkhines" } or defined $items{ "telkhines_ring" } ) {
        printf "Telkhines damage %.2f\n", $telkhines_damage;
    }
    if ( defined $items{ "hydras" } or defined $items{"hydras_lament"} ) {
        print "Hydras procs $hydras_procs hydras damage $hydras_damage\n";
    }
    if ( $base_stats{ "type" }->{ $opts{ "god" } } eq "physical" and $total_attacks > 0 ) {
        printf "Num crits: %d total crit chance %.2f\n", $crits/$max_iterations, ($crits / $total_attacks);
    }
    if (defined $items{ "malice" }) {
        printf  "Total Malice procs %d Malice procs/crit %.2f Malice damage %.2f Malice bonus damage per crit %.2f\n", $total_malice_procs/$max_iterations, ($total_malice_procs/$crits), $malice_damage/$max_iterations, ($malice_damage)/($crits);
    }
    printf "Total lifesteal %.2f\n", ($total_damage * $lifesteal)/$max_iterations;
    if ( defined $enemy_items{"nemean"} ) {
        # assume no magical prot on self TODO this could be more accurate
        printf "Damage return from Nemean %.2f\n", ($attack_damage/$max_iterations) * 0.2 * ( 100 / (100 + 30 + 0.9 * $opts{"level"}));
        printf "Net lifesteal - Nemean damage %.2f\n",  (($total_damage * $lifesteal)/$max_iterations ) - ( ($attack_damage/$max_iterations) * 0.2 * ( 100 / (100 + 30 + 0.9 * $opts{"level"})));
    }
    printf "Total gold %d TTK*gold %.2f\n", $gold, ($total_ttk/$max_iterations)*$gold/1000000;
}


