#!/usr/bin/perl


# Wish list
#

use strict;
use warnings;



use Getopt::Std;



my %opts;

getopts('vp:h:g:i:', \%opts);

my $verbose = 0;
if ( defined $opts{'v'} ) { $verbose = 1; }

my @items = split( /\s/, $opts{ 'i' } );

my %items;

foreach my $item (@items) {
    $items{ $item } = 1;
}







my %base_stats = (
    "attack_rate" => {
        "artemis" => 0.95,
        "awilix" => 1,
        "medusa" => 0.95,
        "xbal" => 0.95,
    },
    "attack_rate_level_scaling" => {
        "artemis" => 0.014,
        "awilix" => 0.0189,
        "medusa" => 0.014,
        "xbal" => 0.01,
    },
    "auto_damage" => {
        "artemis" => 35,
        "awilix" => 38,
        "medusa" => 38,
        "xbal" => 37,
    },
    "auto_level_scaling" => {
        "artemis" => 2.05,
        "awilix" => 2.16,
        "medusa" => 2.6,
        "xbal" => 2.5,
    },
    "mana" => {
        "artemis" => 205,
        "awilix" => 220,
        "medusa" => 220,
        "xbal" => 220,
    },
    "mana_level_scaling" => {
        "artemis" => 34,
        "awilix" => 38,
        "medusa" => 34,
        "xbal" => 37,
    },
    "attack_chain_progression" => {
        "artemis" => [ 1 ],
        "awilix" => [ 1, 0.75, 1.25 ],
        "medusa" => [ 1 ],
        "xbal" => [ 1 ],
    },
);




my @attack_chain_progression = @{ $base_stats{ "attack_chain_progression" }->{ $opts{ 'g' } } };
my $next_attack_chain = 0;

my $still_target_stacks = 0;
my $still_target_end = 0;

my %messages_to_print;

#$base_stats{ "attack_rate" }->{ $opts{ 'g' } }

my $attack_rate = $base_stats{ "attack_rate" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "attack_rate_level_scaling" }->{ $opts{ 'g' } }
        * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
my $mana = $base_stats{ "mana" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "mana_level_scaling" }->{ $opts{ 'g' } };

my $base_crit_chance = 0;
my $crits = 0;
my $damage = 0;
my $time = 0;
my $next_attack = 0;
my $num_attacks = 0;
my $total_attacks = 0;
my $gold = 0;

my $physical_power = 0;
my $lifesteal = 0;

#my $their_protection = 18 + 60 + 20 + 60 + 40 + 55; # bellona with full passive, Mystical, MoR, and Runeforged
my $their_protection = 18 + 60 + 20 + 60 + 40; # bellona with full passive, Mystical, MoR
if ( defined $opts{'p'} ) {
    $their_protection = $opts{'p'};
}

my $their_health = 480 + 20 * 85 + 200 + 250 + 325 + 100 + 350; # bellona with Mystical, MoR, Frostbound, Runeforged, and Gaia
if ( defined $opts{ 'h' } ) {
    $their_health = $opts{ 'h' };
}

my $flat_pen = 0;
my $percent_pen = 0;
my $flat_reduction = 0;
my $percent_reduction = 0;

# jotunn's wrath
if (defined $items{"jotunns"}) {
    $physical_power += 40;
    $flat_pen += 11;
    $mana += 150;
    $gold += 2440;
}

if (defined $items{"fatalis"}) {
    $attack_rate += $base_stats{ "attack_rate" }->{ $opts{ 'g' } }* 0.3;
    $gold += 2140;
}


# transcendence
if (defined $items{"transcendence"}) {
    $mana += 1050;
    $physical_power += 35;
    $physical_power += 0.03 * $mana;
    $gold += 2600;
}

# qin's sais
if (defined $items{"qins"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $physical_power += 30;
    $gold += 2850;
}

# asi
if (defined $items{"asi"}) {
    $flat_pen += 15;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1780;
}

# brawler's beatstick
if (defined $items{"brawlers"}) {
    $physical_power += 40;
    $flat_pen += 20;
    $gold += 2400;
}

# titan's bane
if (defined $items{"titans"}) {
    $percent_pen += 0.33;
    $gold += 2050;
}

# warrior tabi
if (defined $items{"warrior_tabi"}) {
    $physical_power += 40;
    $gold += 1550;
}

# ninja tabi
if (defined $items{"ninja_tabi"}) {
    $physical_power += 20;
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 1500;
}

# executioner
if (defined $items{"executioner"}) {
    $physical_power += 30;
    $attack_rate += 0.2 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $gold += 2250;
}
my $executioner_stacks = 0;
my $executioner_end = 0;

# ichaival
if (defined $items{"ichaival"}) {
    $attack_rate += 0.3 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $flat_pen += 10;
    $gold += 1700;
}
my $ichaival_stacks = 0;
my $ichaival_end = 0;

# dev's gloves
if (defined $items{"devs_gloves"}) {
    $physical_power += 55;
    $lifesteal += 0.25;
    $gold += 2050;
}

# soul eater
if (defined $items{"soul_eater"}) {
    $attack_rate += 0.15 * $base_stats{ "attack_rate" }->{ $opts{ 'g' } };
    $physical_power += 15;
    $lifesteal += 0.2;
    $gold += 2000;
}

# golden bow
if (defined $items{"golden_bow"}) {
    $base_crit_chance += 0.1;
    $physical_power += 35;
    $gold += 2330;
}

# rage
if (defined $items{"rage"}) {
    $base_crit_chance += 0.3;
    $physical_power += 30;
    $gold += 2755;
}
my $rage_stacks = 0;

# malice
if (defined $items{"malice"}) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 2900;
}
my $total_malice_procs = 0;
my $next_malice_proc = 0;
my $malice_procs_left = 0;

# deathbringer
if (defined $items{"deathbringer"}) {
    $base_crit_chance += 0.2;
    $physical_power += 50;
    $gold += 3150;
}



my $viper_shots_left = 0;
my $vengeful_assault = 0;
my $vengeful_assault_end = 0;
my $gravity_surge = 0;
my $gravity_surge_end = 0;
my $has_initiative = 0;
my $initiative_end = 0;
my $has_branching_bolas = 0;
my $xbal_passive_stacks = 0;
if ( $opts{'g'} eq "xbal" ) {
    $xbal_passive_stacks = 6;
}


if ($attack_rate > 2.5) { $attack_rate = 2.5; }


my $base_damage = $base_stats{ "auto_damage" }->{ $opts{ 'g' } }
        + 20 * $base_stats{ "auto_level_scaling" }->{ $opts{ 'g' } }
        + $physical_power;
my $attack_duration = int(1000 / $attack_rate);


my $iteration = 0;
my $max_iterations = 1000;
my $max_time = 5000;

my $feather_step_cooldown = 0;













sub calc_mitigated_damage( $ ) {

    my $pre_prot_damage = shift;

    #$messages_to_print{ "pre_prot_damage" } = $pre_prot_damage;
    #$messages_to_print{ "their starting prot" } = $their_protection;

    my $their_eff_prot = $their_protection;
    $their_eff_prot *= (1 - $percent_reduction);
    $their_eff_prot *= (1 - 0.08 * $executioner_stacks);
    $their_eff_prot -= $flat_reduction;
    $their_eff_prot -= 6 * $executioner_stacks;
    $their_eff_prot *= (1 - $percent_pen);
    $their_eff_prot -= $flat_pen;
    if ($their_eff_prot < 0) { $their_eff_prot = 0; }
    #$messages_to_print{ "their effective prot" } = $their_eff_prot;

    my $damage = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;

    #$messages_to_print{ "mitigated damage" } = ( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage;
    
    if ( $verbose ) {
        print "time $time their prot $their_protection -> $their_eff_prot; damage $pre_prot_damage -> " . int(( 100 / (100 + $their_eff_prot) ) * $pre_prot_damage) . " $executioner_stacks exec stacks\n";
    }
    
    return $damage;

}
























while ( $iteration < $max_iterations ) {

    while ( $time < $max_time ) {

        if ($opts{'g'} eq 'xbal' and $time == 0) {
            $has_branching_bolas = 1;
        }

        if ($opts{'g'} eq "medusa" and $time == -1) {
            # start combo with ult
            my $pre_prot_damage = 700 + $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            $next_attack = 250;
        }

        if ($opts{'g'} eq "artemis" and $time == 0) {
            # start with tusky
            #my $pre_prot_damage = 450 + $base_damage;
            #$damage += calc_mitigated_damage($pre_prot_damage);
            $vengeful_assault = 1;
            $vengeful_assault_end = $time + 5000;
        }

        if ($opts{'g'} eq "awilix" and $time == 0) {
            # start combo with moonlight charge + Ult
            my $pre_prot_damage = 250 + 0.6 * $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            $pre_prot_damage = 400 + 0.8 * $base_damage;
            $damage += calc_mitigated_damage($pre_prot_damage);

            $has_initiative = 1;
            $initiative_end = $time + 2500;

            $next_attack = 250;
        }

        if ( $time == $next_attack ) {

	    my $effective_base_damage = $base_damage * ${attack_chain_progression}[ $next_attack_chain ]
                    + 10 * $ichaival_stacks + 5 * $xbal_passive_stacks;

            if ($has_initiative) {
                $effective_base_damage += $physical_power * 0.3;
            }

            if ($has_branching_bolas) {
                $effective_base_damage += 50;
            }

            $next_attack_chain++;
            if ($next_attack_chain >= scalar @attack_chain_progression ) { $next_attack_chain = 0; }

            my $total_crit_chance = $base_crit_chance;

            if ($opts{ 'g' } eq "artemis") {
                $total_crit_chance += 0.05 * $still_target_stacks;

                $still_target_stacks += 1;
                if ($still_target_stacks > 3) {$still_target_stacks = 3;}
                $still_target_end = $time + 4000;
            }

            if (defined $items{ "rage" }) {
                $total_crit_chance += 0.1 * $rage_stacks;
            }

            my $pre_prot_damage = 0;

            my $rng = rand();
            if ( $rng < $total_crit_chance ) {
                # critical hit
                $pre_prot_damage += $effective_base_damage * 2;
                if (defined $items{ "deathbringer" }) {
                    $pre_prot_damage += $effective_base_damage * 0.4;
                }
                $crits++;

                # handle rage
                $rage_stacks = 0;

                # handle malice
                if ($malice_procs_left == 0) {
                    # no procs, set next proc for 1 sec from now, otherwise just refresh count
                    $next_malice_proc = $time + 1000;
                }
                $malice_procs_left = 3;
            }
            else
            {
                $pre_prot_damage += $effective_base_damage;

                # handle rage
                if ( $rage_stacks < 5 ) {
                    $rage_stacks++;
                }
            }

            if (defined $items{ "qins" }) {
                $pre_prot_damage += 0.04 * $their_health;
            }

            if (defined $items{ "ichaival" }) {
                $ichaival_stacks += 1;
                if ($ichaival_stacks > 3) {
                    $ichaival_stacks = 3;
                }
                $ichaival_end = $time + 3000;
            }

            if (defined $items{ "executioner" }) {
                $executioner_stacks += 1;
                if ($executioner_stacks > 3) {
                    $executioner_stacks = 3;
                }
                $executioner_end = $time + 3000;
            }

            $damage += calc_mitigated_damage($pre_prot_damage);

            # attack chain progression
            my $eff_attack_rate = $attack_rate;
            if ( $vengeful_assault ) {
                $eff_attack_rate = $attack_rate + 0.75 * $base_stats{ "attack_rate" }->{ $opts{'g'} };
            }
            if ( $eff_attack_rate > 2.5 ) {
                $eff_attack_rate = 2.5;
            }
            my $eff_attack_duration = int(1000 / $eff_attack_rate);
            $next_attack = $time + $eff_attack_duration * ${attack_chain_progression}[ $next_attack_chain ];
            $next_attack = int($next_attack + .99999);

            if ($viper_shots_left > 0) {
                $viper_shots_left--;
                my $pre_prot_damage = 90 + $effective_base_damage * 0.3;
                $damage += calc_mitigated_damage( $pre_prot_damage );
                my $viper_attack_rate = $attack_rate +
                        $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 0.8;
                if ($viper_attack_rate > 2.5) {
                    $viper_attack_rate = 2.5;
                }
                my $viper_attack_duration = int(1000 / $viper_attack_rate);
                $next_attack = $time + $viper_attack_duration;
            }

            $num_attacks++;
        }

        if ($opts{'g'} eq "medusa" and $num_attacks == 1 and $viper_shots_left == 0) {
            # start viper shot after the first AA for AA cancel benefit
            $viper_shots_left = 3;
            my $viper_attack_rate = $attack_rate +
                    $base_stats{ "attack_rate" }->{ $opts{ 'g' } } * 0.8;
            if ($viper_attack_rate > 2.5) {
                $messages_to_print{ "overcapping viper attack rate" } = 1;
                $viper_attack_rate = 2.5;
            }
            my $viper_attack_duration = int(1000 / $viper_attack_rate);
            $next_attack = $time + $viper_attack_duration;
        }

        if ($opts{'g'} eq "awilix" and $feather_step_cooldown < $time and $num_attacks == 2) {
            # time to feather step
            my $pre_prot_damage = 360 + $base_damage;

            $damage += calc_mitigated_damage($pre_prot_damage);

            # reset attack chain
            $next_attack_chain = 0;
            $next_attack = $time + 250; # don't know actual AA cancel durations

            $feather_step_cooldown += 8000;
        }

        if ($time == $still_target_end) {
            $still_target_stacks = 0;
        }

        if ($time == $vengeful_assault_end) {
            $vengeful_assault = 0;
        }

        if ($time == $gravity_surge_end) {
            $gravity_surge = 0;
        }

        if ( $time == $executioner_end ) {
            $executioner_stacks = 0;
        }

        if ( $time == $ichaival_end ) {
            $ichaival_stacks = 0;
        }

        if ( $time == $initiative_end ) {
            $has_initiative = 0;
        }

        if ( defined $items{ "malice" }
                and $time == $next_malice_proc and $malice_procs_left > 0 )
        {
            $total_malice_procs++;
            my $pre_prot_damage = 0.25 * $base_damage; # effected by ichaival?

            $damage += calc_mitigated_damage($pre_prot_damage);

            $malice_procs_left -= 1;
            $next_malice_proc += 1000;
        }
        $time++;
    }

    # reset
    $executioner_stacks = 0;
    $executioner_end = 0;
    $still_target_stacks = 0;
    $still_target_end = 0;
    $rage_stacks = 0;
    $malice_procs_left = 0;
    $next_malice_proc = 0;
    $time = 0;
    $next_attack = 0;
    $next_attack_chain = 0;
    $total_attacks += $num_attacks;
    $num_attacks = 0;
    $feather_step_cooldown = 0;
    $vengeful_assault_end = 0;
    $gravity_surge_end = 0;

    $iteration++;

}

foreach my $key (keys %messages_to_print) {
        print $key . " " . $messages_to_print{ $key} . "\n";
}

print "Base attack rate $attack_rate Base attack damage $base_damage\n";
printf "Num attacks: %d avg damage %.2f\n", $total_attacks/$max_iterations, ($damage / $total_attacks);
printf "Total damage %.2f DPS %.2f\n", $damage/$max_iterations, ($damage / ($max_iterations*$max_time/1000));
printf "Total lifesteal %.2f\n", ($damage * $lifesteal)/$max_iterations;
printf "Num crits: %d total crit chance %.2f\n", $crits/$max_iterations, ($crits / $total_attacks);
if (defined $items{ "malice" }) {
    printf  "Total Malice procs %d Malice procs/crit %.2f Malice bonus damage per crit %.2f\n", $total_malice_procs/$max_iterations, ($total_malice_procs/$crits), ($total_malice_procs * 0.25 * $base_damage)/($crits);
}
printf "Total gold %d Damage/gold %.2f\n", $gold, $damage / $gold / $max_iterations;



