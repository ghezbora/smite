#!/usr/bin/perl


use strict;
use warnings;

use Getopt::Std;
use Getopt::Long;
use Data::Dumper;

#################################################################################
# opts
#################################################################################

my %opts;

my $VERBOSITY_QUIET = 1;
my $VERBOSITY_NORMAL = 3;
my $VERBOSITY_EXTRA = 5;
my $VERBOSITY_EPIC = 7;
my $VERBOSITY_LEGENDARY = 9;

# set defaults
$opts{ "verbosity" } = $VERBOSITY_NORMAL;
$opts{ "level" } = 20;

GetOptions( 'god=s' => \$opts{ "god" },
            'enemy=s' => \$opts{"enemy"},
            'items=s' => \$opts{"items"},
            'enemy_items=s' => \$opts{"enemy_items"},
            'verbosity=i' => \$opts{"verbosity"},
            'iterations=i' => \$opts{"iterations"},
            'level=i' => \$opts{"level"} );

if ( not defined $opts{ "god" } or not defined $opts{ "items" } ) {
    print "god and items are required options\n";
    exit;
}
if ( not defined $opts{ "enemy" } or not defined $opts{ "enemy_items" } ) {
    print "enemy god and items are required options\n";
    exit;
}

#################################################################################
#################################################################################
#################################################################################
#                                GAME DATA
#################################################################################
#################################################################################
#################################################################################

#################################################################################
# base stat tables for ALL RUNS
#################################################################################

my %base_stats = (
    "type" => {
        "freya" => "magical",
        "sol" => "magical",
        "scylla" => "magical",
        "nox" => "magical",
        "kukulkan" => "magical",
        "chronos" => "magical",
        "isis" => "magical",

		"amaterasu" => "physical",
        "artemis" => "physical",
        "awilix" => "physical",
        "medusa" => "physical",
        "xbal" => "physical",
        "rama" => "physical",
        "ullr" => "physical",
        "serqet" => "physical",
        "thor" => "physical",
        "fenrir" => "physical",
        "bastet" => "physical",
        "apollo" => "physical",
        "neith" => "physical",
        "mercury" => "physical",
        "chiron" => "physical",
        "hou_yi" => "physical",
        "nemesis" => "physical",
        "arachne" => "physical",
        "kali" => "physical",
    },
    "physical_protection" => {
        "amaterasu" => (18 + 3 * $opts{"level"}),
        "bastet" => (12 + 2.9 * $opts{"level"}),
        "chiron" => (12 + 2.8 * $opts{"level"}),
        "sol" => (9 + 2.6 * $opts{"level"}),
        "isis" => (9 + 2.7 * $opts{"level"}),
        "khepri" => (19 + 3 * $opts{"level"}),
        "bellona" => (18 + 3 * $opts{"level"}),
        "hercules" => (18 + 3 * $opts{"level"}),
        "freya" => (14 + 2.8 * $opts{"level"}),
    },
    "magical_protection" => {
        "amaterasu" => (30 + 0.9 * $opts{"level"}),
        "bastet" => (30 + 0.9 * $opts{"level"}),
        "chiron" => (30 + 0.9 * $opts{"level"}),
        "freya" => (30 + 0.9 * $opts{"level"}),
        "sol" => 30,
        "isis" => 30,
        "khepri" => (30 + 0.9 * $opts{"level"}),
        "bellona" => (30 + 0.9 * $opts{"level"}),
        "hercules" => (30 + 0.9 * $opts{"level"}),
    },
    "health" => {
        "isis" => (365 + 68 * $opts{"level"}),
        "bastet" => (415 + 80 * $opts{"level"}),
        "chiron" => (460 + 75 * $opts{"level"}),
        "freya" => (405 + 80 * $opts{"level"}),
        "sol" => (400 + 75 * $opts{"level"}),
        "khepri" => (510 + 90 * $opts{"level"}),
        "bellona" => (480 + 85 * $opts{"level"} ),
        "amaterasu" => (470 + 82 * $opts{"level"} ),
        "hercules" => (480 + 86 * $opts{"level"}),
    },
    "base_attack_speed" => {
        "freya" => 0.95,
        "sol" => 1,
        "scylla" => 1,
        "nox" => 1,
        "kukulkan" => 0.87,
		"isis" => 1,
        "chronos" => 1,

		"amaterasu" => 1,
        "artemis" => 0.95,
        "awilix" => 1,
        "medusa" => 0.95,
        "xbal" => 0.95,
        "rama" => 0.95,
        "ullr" => 0.95,
        "serqet" => 1,
        "thor" => 1,
        "fenrir" => 1,
        "bastet" => 1,
        "apollo" => 0.95,
        "neith" => 0.95,
        "mercury" => 1,
        "chiron" => 1,
        "hou_yi" => 0.9,
        "nemesis" => 1,
        "arachne" => 1,
        "kali" => 1,
    },
    "attack_speed_modifier" => {
        "freya" => (.0195 * $opts{"level"}),
        "sol" => (.018 * $opts{"level"}),
        "scylla" => (.008 * $opts{"level"}),
        "nox" => (.008 * $opts{"level"}),
        "kukulkan" => (.0091 * $opts{"level"}),
        "chronos" => (.008 * $opts{"level"}),
		"isis" => 0,

        "amaterasu" => (.012 * $opts{"level"}),
        "artemis" => (.014 * $opts{"level"}),
        "awilix" => (.0189 * $opts{"level"}),
        "medusa" => (.014 * $opts{"level"}),
        "xbal" => (.01 * $opts{"level"}),
        "rama" => (.017 * $opts{"level"}),
        "ullr" => (.015 * $opts{"level"}),
        "serqet" => (.0216 * $opts{"level"}),
        "thor" => (.0145 * $opts{"level"}),
        "fenrir" => (.017 * $opts{"level"}),
        "bastet" => (.0198 * $opts{"level"}),
        "apollo" => (.017 * $opts{"level"}),
        "neith" => (.016 * $opts{"level"}),
        "mercury" => (.024 * $opts{"level"}),
        "chiron" => (.011 * $opts{"level"}),
        "hou_yi" => (.012 * $opts{"level"}),
        "nemesis" => (.0216 * $opts{"level"}),
        "arachne" => (.02 * $opts{"level"}),
        "kali" => (.0216 * $opts{"level"}),
    },
    "auto_damage" => {
        "freya" => (35 + 1.5 * $opts{"level"}),
        "isis" => (35 + 1.5 * $opts{"level"}),
        "sol" => (34 + 1.45 * $opts{"level"}),
        "scylla" => (34 + 1.45 * $opts{"level"}),
        "nox" => (34 + 1.5 * $opts{"level"}),
        "kukulkan" => (34 + 1.45 * $opts{"level"}),
        "chronos" => (35 + 1.5 * $opts{"level"}),

        "amaterasu" => (39 + 2 * $opts{"level"}),
        "artemis" => (35 + 2.05 * $opts{"level"}),
        "awilix" => (38 + 2.16 * $opts{"level"}),
        "medusa" => (38 + 2.6 * $opts{"level"}),
        "xbal" => (37 + 2.5 * $opts{"level"}),
        "rama" => (40 + 2.5 * $opts{"level"}),
        "ullr" => (38 + 2.4 * $opts{"level"}),
        "serqet" => (39 + 2.25 * $opts{"level"}),
        "thor" => (39 + 2.4 * $opts{"level"}),
        "fenrir" => (38 + 2.3 * $opts{"level"}),
        "bastet" => (38 + 2.13 * $opts{"level"}),
        "apollo" => (40 + 2.6 * $opts{"level"}),
        "neith" => (35 + 2.3 * $opts{"level"}),
        "mercury" => (38 + 2.13 * $opts{"level"}),
        "chiron" => (35 + 2.35 * $opts{"level"}),
        "hou_yi" => (38 + 2.8 * $opts{"level"}),
        "nemesis" => (39 + 2.25 * $opts{"level"}),
        "arachne" => (38 + 2.2 * $opts{"level"}),
        "kali" => (37 + 2.32 * $opts{"level"}),
    },
    "mana" => {
        "freya" => (220 + 37 * $opts{"level"}),
        "sol" => (300 + 57 * $opts{"level"}),
        "scylla" => (298 + 56 * $opts{"level"}),
        "nox" => (250 + 38 * $opts{"level"}),
        "kukulkan" => (265 + 45 * $opts{"level"}),
        "chronos" => (240 + 42 * $opts{"level"}),

        "amaterasu" => (220 + 35 * $opts{"level"}),
        "artemis" => (205 + 34 * $opts{"level"}),
        "awilix" => (220 + 38 * $opts{"level"}),
        "medusa" => (220 + 34 * $opts{"level"}),
        "xbal" => (220 + 37 * $opts{"level"}),
        "rama" => (205 + 34 * $opts{"level"}),
        "ullr" => (230 + 40 * $opts{"level"}),
        "serqet" => (240 + 40 * $opts{"level"}),
        "thor" => (240 + 38 * $opts{"level"}),
        "fenrir" => (240 + 35 * $opts{"level"}),
        "bastet" => (214 + 39 * $opts{"level"}),
        "apollo" => (225 + 40 * $opts{"level"}),
        "neith" => (230 + 39 * $opts{"level"}),
        "mercury" => (200 + 40 * $opts{"level"}),
        "chiron" => (225 + 40 * $opts{"level"}),
        "hou_yi" => (240 + 38 * $opts{"level"}),
        "nemesis" => (210 + 38 * $opts{"level"}),
        "arachne" => (210 + 41 * $opts{"level"}),
        "kali" => (205 + 34 * $opts{"level"}),
    },
    "attack_chain_progression" => {
        "freya" => [ 1 ],
        "sol" => [ 1 ],
        "scylla" => [ 1 ],
        "nox" => [ 1 ],
        "kukulkan" => [ 1 ],
        "chronos" => [ 1 ],
        "isis" => [ 1, 1, 1.5 ],

        "amaterasu" => [ 1, .5, 1 ],
        "artemis" => [ 1 ],
        "awilix" => [ 1, 0.75, 1.25 ],
        "medusa" => [ 1 ],
        "xbal" => [ 1 ],
        "rama" => [ 1 ],
        "ullr" => [ 1 ],
        "serqet" => [ 1, 0.75, 1.25 ],
        "thor" => [ 1 ],
        "fenrir" => [ 1 ],
        "bastet" => [ 1, 0.7, 1.3 ],
        "apollo" => [ 1 ],
        "neith" => [ 1 ],
        "mercury" => [ 1, 0.75, 1.25 ],
        "chiron" => [ 1 ],
        "hou_yi" => [ 1 ],
        "nemesis" => [ 1, 1, .75, 1.25 ],
        "arachne" => [ .5, 1, 1 ],
        "kali" => [ 1, .5, .5 ],
    },
    "combo" => {
        "sol" => [ "stellar_burst" ],
		"bastet" => [ "pounce", "razor_whip", "declaw" ],
    }
);

#################################################################################
# ability base stats for ALL RUNS
#################################################################################

# these stats are not used at runtime, they are used to populate the ability array
# in the god stats object
# the level field is used to pick the correct value out of each of the other fields
# then we don't have to dereference many times to get the right values at runtime

my %ability_stats = (
    "cooldown" => {
        "stellar_burst" => [ 12, 12, 12, 12, 12, 12 ],
        "radiance" => [ 15, 15, 15, 15, 15, 15 ],

		"pounce" => [ 12, 12, 12, 12, 12, 12 ],
		"razor_whip" => [ 15, 15, 15, 15, 15, 15 ],
		"declaw" => [ 10, 10, 10, 10, 10, 10 ],
    },
    "tick_damage" => {
        "stellar_burst" => [ 0, 40, 70, 100, 130, 160 ],

		"pounce" => [ 0, 80, 145, 210, 275, 340 ],
		"razor_whip" => [ 0, 30, 50, 70, 90, 110 ],
		"declaw" => [ 0, 70, 120, 170, 220, 270 ],
    },
    "tick_scaling" => {
        "stellar_burst" => [ 0.35, 0.35, 0.35, 0.35, 0.35, 0.35 ],

		"pounce" => [ 1, 1, 1, 1, 1, 1 ],
		"razor_whip" => [ .2, .2, .2, .2, .2, .2 ],
		"declaw" => [ 1, 1, 1, 1, 1, 1 ],
    },
    "tick_duration" => {
        "stellar_burst" => [ 0.5, 0.5, 0.5, 0.5, 0.5, 0.5 ],

		"pounce" => [ 0, 0, 0, 0, 0, 0 ],
		"razor_whip" => [ 1, 1, 1, 1, 1, 1 ],
		"declaw" => [ 0, 0, 0, 0, 0, 0 ],
    },
    "num_ticks" => {
        "stellar_burst" => [ 2, 2, 2, 2, 2, 2 ],

		"pounce" => [ 1, 1, 1, 1, 1, 1 ],
		"razor_whip" => [ 4, 4, 4, 4, 4, 4 ],
		"declaw" => [ 1, 1, 1, 1, 1, 1 ],
    },
    "level" => {
        # character level           [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20 ],
        "stellar_burst" =>          [ 0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
        "radiance" =>               [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],

		"pounce" => 				[ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5 ],
        "razor_whip" =>             [ 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ],
		"declaw" =>  				[ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 5 ],
		"cat_call" =>  				[ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5 ],
    },
),


#################################################################################
# buff stats for ALL RUNS
#################################################################################

my %buff_stats = (
    "max_stacks" => {
        "divine_judgment" => 1, # buff and debuff
        "cocoon" => 3,
        "incense" => 1,
        "crusher" => 5,
        "soul_reaver" => 1,
        "midgardian" => 1,
        "accelerate" => 1,
        "rage" => 6,
        "still_target" => 3,
        "xbal_passive" => 6,
        "initiative" => 1,
        "vengeful_assault" => 1,
        "expose_weakness" => 1,
        "pick_me_up" => 1,
        "gravity_surge" => 1,
        "maximum_velocity" => 1,
        "branching_bolas" => 1,
        "hydras_lament" => 1,
        "polynomicon" => 1,
        "ichaival" => 3,
        "irradiate" => 1,
        "pulse" => 1,
        "astral_strike" => 1,
        "stone_cutting_sword" => 3,
        "oni" => 3,
        "spectral_armor" => 1,
        "heartseeker" => 5,
    },
    "cooldown" => {
        "polynomicon" => 3000,
        "soul_reaver" => 40000,
    },
    "duration" => {
        "divine_judgment" => 8000, # NB buff lasts 8, debuff lasts 5
        "cocoon" => 0,
        "incense" => 8000, # TODO duration scales 4...8
        "crusher" => 2000,
        "soul_reaver" => 40000,
        "midgardian" => 3000,
        "accelerate" => 7000,
        "rage" => 0,
        "still_target" => 4000,
        "xbal_passive" => 0,
        "initiative" => 2500,
        "vengeful_assault" => 5000, #TODO duration scales
        "expose_weakness" => 5000,
        "pick_me_up" => 5000,
        "gravity_surge" => 6000,
        "maximum_velocity" => 5000,
        "branching_bolas" => 0,
        "hydras_lament" => 8000,
        "polynomicon" => 8000,
        "ichaival" => 3000,
        "irradiate" => 5000,
        "pulse" => 5000,
        "astral_strike" => 0,
        "stone_cutting_sword" => 3000,
        "oni" => 0,
        "spectral_armor" => 5000,
        "heartseeker" => 0,
    },
);


my %debuffs = (
    "max_stacks" => {
        "divine_judgment" => 1,
        "executioner" => 4,
        "demonic_grip" => 4,
        "spear" => 3,
        "stone_cutting_sword" => 3,
        "ichaival" => 3,
        "open_wound" => 1,
        "serqet_poisons" => 3,
        "frostbound" => 1,
        "witchblade" => 1,
        "runic_shield" => 1,
    },
    "duration" => {
        "divine_judgment" => 5000, # NB debuff lasts 5 seconds, buff lasts 8
        "midgardian" => 3000,
        "executioner" => 3000,
        "demonic_grip" => 3000,
        "spear" => 5000,
        "open_wound" => 0,
        "serqet_poisons" => 20000,
        "ichaival" => 3000,
        "stone_cutting_sword" => 3000,
        "frostbound" => 1250,
        "witchblade" => 0, # TODO make sure these can't stack
        "runic_shield" => 0,
    },
);


#################################################################################
# item stats for ALL RUNS
#################################################################################

my %item_stats = (

	######################################################################
	# magical items
	######################################################################
	"cooldown_boots" => {
		"mana" => 250,
		"cdr" => .1,
		"magical_power" => 40,
		"gold" => 1500
	},

	"pen_boots" => {
		"magical_power" => 45,
		"flat_pen" => 10,
		"gold" => 1600,
	},

    "void_stone" => {
        "magical_power" => 40,
        "magical_prot" => 50,
        "flat_reduction" => 20,
        "gold" => 2350,
    },

	"chronos_pendant" => {
		"magical_power" => 70,
		"cdr" => .2,
		"gold" => 2400,
	},

	######################################################################
	# physical items
	######################################################################
    "warrior_tabi" => {
        "physical_power" => 40,
        "gold" => 1550,
    },

    "ninja_tabi" => {
        "physical_power" => 20,
        "attack_speed_modifier" => .2,
        "mana" => 100,
        "gold" => 1500,
    },

    "void_shield" => {
        "physical_power" => 30,
        "physical_prot" => 40,
        "flat_reduction" => 20,
        "gold" => 2700,
    },

    "titans_bane" => {
        "physical_power" => 30,
        "percent_pen" => .33,
        "gold" => 2050,
    },

    "asi" => {
        "flat_pen" => 15,
        "attack_speed_modifier" => .2,
        "lifesteal" => .15,
        "gold" => 1780,
    },

    "jotunns" => {
        "physical_power" => 40,
        "flat_pen" => 10,
        "cdr" => .2,
        "mana" => 150,
        "gold" => 2440,
    },

	######################################################################
	# common items
	######################################################################

    "winged_blade" => {
        "health" => 300,
        "attack_speed_modifier" => .1,
    },

    "sov" => {
        "physical_prot" => 60,
        "health" => 200,
        "gold" => 2100,
    }
);


#################################################################################
# setup god stats for THIS RUN
#################################################################################


# setup these stats so that we can do a lot fewer dereferences when we need them
# $god->{ "crit_chance" } is much faster than $base_stats{ "crit_chance" }->{ $opts{ "god" } }

my %gods = (
    "self" => {
        "type" => $base_stats{ "type" }->{ $opts{ "god" } },

        "physical_power" => 0,
        "physical_prot" => $base_stats{ "physical_protection" }->{ $opts{ "god" } },

        "magical_power" => 0,
        "magical_prot" => $base_stats{ "magical_protection" }->{ $opts{ "god" } },

        "base_attack_speed" => $base_stats{ "base_attack_speed" }->{ $opts{ "god" } },
        "attack_speed_modifier" => $base_stats{ "attack_speed_modifier" }->{ $opts{ "god" } },
        "attack_chain_progression" => $base_stats{ "attack_chain_progression" }->{ $opts{ "god" } },
		"current_attack_chain_index" => 0,
        "aa_damage" => $base_stats{ "auto_damage" }->{ $opts{ "god" } },

        "health" => $base_stats{ "health" }->{ $opts{ "god" } }, # max health
        "current_health" => $base_stats{ "health" }->{ $opts{ "god" } },
        "mana" => $base_stats{ "mana" }->{ $opts{ "god" } },

        "cdr" => 0,

        "crit_chance" => 0,
        "lifesteal" => 0,

        "flat_pen" => 0,
        "percent_pen" => 0,
        "flat_reduction" => 0,
        "percent_reduction" => 0,

        "gold" => 0,

        "abilities" => [ ],

        "buffs" => { },
    },

    "enemy" => {
        "type" => $base_stats{ "type" }->{ $opts{ "enemy" } },

        "physical_power" => 0,
        "physical_prot" => $base_stats{ "physical_protection" }->{ $opts{ "enemy" } },

        "magical_power" => 0,
        "magical_prot" => $base_stats{ "magical_protection" }->{ $opts{ "enemy" } },

        "base_attack_speed" => $base_stats{ "base_attack_speed" }->{ $opts{ "enemy" } },
        "attack_speed_modifier" => $base_stats{ "attack_speed_modifier" }->{ $opts{ "enemy" } },
        "attack_chain_progression" => $base_stats{ "attack_chain_progression" }->{ $opts{ "enemy" } },
		"current_attack_chain_index" => 0,
        "aa_damage" => $base_stats{ "auto_damage" }->{ $opts{ "enemy" } },

        "health" => $base_stats{ "health" }->{ $opts{ "enemy" } }, # max health
        "current_health" => $base_stats{ "health" }->{ $opts{ "enemy" } },
        "mana" => $base_stats{ "mana" }->{ $opts{ "enemy" } },

        "cdr" => 0,

        "crit_chance" => 0,
        "lifesteal" => 0,

        "flat_pen" => 0,
        "percent_pen" => 0,
        "flat_reduction" => 0,
        "percent_reduction" => 0,

        "gold" => 0,

        "abilities" => [ ],

        "buffs" => { },
    },
);




#################################################################################
# apply items for THIS RUN
#################################################################################

my @items = split( /\s/, $opts{ "items" } );

foreach my $item (@items) {
    foreach my $stat (keys $item_stats{ $item }) {
	    $gods{ "self" }->{ $stat } += $item_stats{ $item }->{ $stat };
    }
}

my @enemy_items = split( /\s/, $opts{ "enemy_items" } );

foreach my $item (@enemy_items) {
    foreach my $stat (keys $item_stats{ $item }) {
	    $gods{ "enemy" }->{ $stat } += $item_stats{ $item }->{ $stat };
    }
}

#################################################################################
# setup abilities for THIS RUN
#################################################################################


foreach my $ability ( @{ $base_stats{ "combo" }->{ $opts{ "god" } } } ) {

    #print "ability = " . $ability . "\n";

    push( $gods{ "self" }->{ "abilities" },

            +{ "name" => $ability,
                "tick_duration" => $ability_stats{ "tick_duration" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "tick_damage" => $ability_stats{ "tick_damage" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "num_ticks" => $ability_stats{ "num_ticks" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "tick_scaling" => $ability_stats{ "tick_scaling" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "cooldown" => $ability_stats{ "cooldown" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
             } );
}

foreach my $ability ( @{ $base_stats{ "combo" }->{ $opts{ "enemy" } } } ) {

    #print "ability = " . $ability . "\n";

    push( $gods{ "enemy" }->{ "abilities" },

            +{ "name" => $ability,
                "tick_duration" => $ability_stats{ "tick_duration" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "tick_damage" => $ability_stats{ "tick_damage" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "num_ticks" => $ability_stats{ "num_ticks" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "tick_scaling" => $ability_stats{ "tick_scaling" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
                "cooldown" => $ability_stats{ "cooldown" }->{ $ability }->[
                                 $ability_stats{ "level" }->{ $ability }->[ $opts{ "level" } ] ],
             } );
}


#################################################################################
# recordkeeping
#################################################################################

my %iteration_record = (
    
    "time" => 0,

    "god" => {
        "attacks" => 0,
        "crits" => 0,
        "polynomicon_procs" => 0,
        "polynomicon_damage" => 0,
        "hydras_procs" => 0,
        "hydras_damage" => 0,
        "telkhines_damage" => 0,
		"malice_ticks" => 0,
		"malice_damage" => 0,
    },

    "enemy" => {
        "attacks" => 0,
        "crits" => 0,
        "polynomicon_procs" => 0,
        "polynomicon_damage" => 0,
        "hydras_procs" => 0,
        "hydras_damage" => 0,
        "telkhines_damage" => 0,
		"malice_ticks" => 0,
		"malice_damage" => 0,
    },

);


# TODO not sure what i want to do here, maybe just keep a list of iteration_record objects
# that's kinda large, but probably doable
my %global_record = (
    "times" => [ ],
    "winner" => [ ],
);


#################################################################################
# simulation data
#################################################################################

my $max_iterations = 1; # change this if RNG is involved
my $iteration = 0;
my $time = 0;

#################################################################################
#################################################################################
#################################################################################
#                          SIMULATION FUNCTIONS
#################################################################################
#################################################################################
#################################################################################

sub both_up() {
    if ($gods{"self"}->{"current_health"} > 0 and $gods{"enemy"}->{"current_health"} > 0) {
        return 1;
    }
    return 0;
}

sub add_buff_stack($ $) {
    my $god = shift;
    my $buff = shift;
    if (defined $gods{ $god }->{ "buffs" }->{ $buff }) {
        $gods{ $god }->{ "buffs" }->{ $buff }->{"stacks"}++;
    } else {
        $gods{ $god }->{ "buffs" }->{ $buff } = +{ "stacks" => 1 };
    }
    if ($gods{ $god }->{ "buffs" }->{ $buff }->{"stacks"} > $buff_stats{"max_stacks"}->{$buff}) {
        $gods{ $god }->{ "buffs" }->{ $buff }->{"stacks"} = $buff_stats{"max_stacks"}->{$buff};
    }
}

sub rm_buff_stack($ $) {
}

sub add_debuff_stack($ $) {
}

sub rm_debuff_stack($ $) {
}

sub refresh_buff_time($ $) {
    my $god = shift;
    my $buff = shift;
    if (defined $gods{ $god }->{ "buffs" }->{ $buff }) {
        $gods{ $god }->{ "buffs" }->{ $buff }->{"time"} = $time;
    } else {
        $gods{ $god }->{ "buffs" }->{ $buff } = +{ "time" => $time };
    }
}

sub refresh_debuff_time($ $) {
}

sub get_eff_power($) {
    my $god = shift;
    my $type = $gods{$god}->{"type"};
    #TODO
    if ($type eq "magical") {
        return $gods{$god}->{"magical_power"};
    } else {
        return $gods{$god}->{"physical_power"};
    }
}

sub get_aa_scaling($) {
    my $god = shift;
    my $type = $gods{ $god }->{ "type" };
    my $scaling = 0;
    if ($type eq "physical") { $scaling = 1; } # TODO do any gods deviate from this pattern? could use god stats
    elsif ($type eq "magical") { $scaling = 0.2; }

    if (defined $gods{$god}->{"buffs"}->{"accelerate"}
                and $gods{$god}->{"buffs"}->{"accelerate"}->{"stacks"} > 0) {
        $scaling += 0.4; # TODO make sure this is correct...
    }
}

sub get_aa_damage($) {
    my $god = shift;
    my $damage = $gods{$god}->{"aa_damage"};
    $damage += get_eff_power($god) * get_aa_scaling($god);

    if (defined $gods{$god}->{"buffs"}->{"heat"} and $gods{$god}->{"buffs"}->{"heat"}->{"stacks"} == 25) {
        $damage *= 1.25; # TODO make sure this is correct...
    }
    return $damage;
}

sub get_aa_pre_time($) {
    return 100; # TODO find correct value
}

sub get_aa_post_time($) {
    my $aa_post_time = 1000 / get_eff_attack_rate( shift );
    $aa_post_time -= 100; # take off the pre time
    return $aa_post_time;
}

sub get_ability_pre_time($ $) {
    return 100; # TODO find correct value
}

sub get_ability_post_time($ $) {
    return 100; # TODO find correct value
}

sub get_eff_attack_rate($) {
    my $god = shift;
    my $base_attack_speed = $gods{$god}->{"base_attack_speed"};
    my $attack_speed_modifier = $gods{$god}->{"attack_speed_modifier"};
    return ($base_attack_speed * $attack_speed_modifier);
    # TODO this ignores buffs
}

#################################################################################
#################################################################################
#################################################################################
#                                   MAIN
#################################################################################
#################################################################################
#################################################################################



while ( $iteration < $max_iterations ) {

    #################################################################################
    # reset stats
    #################################################################################
    $gods{"self"}->{ "current_health" } = $gods{"self"}->{ "health" };
    $gods{"enemy"}->{ "current_health" } = $gods{"enemy"}->{ "health" };

    $gods{"self"}->{ "buffs" } = +{ };
    $gods{"enemy"}->{ "buffs" } = +{ };
    $gods{"self"}->{ "debuffs" } = +{ };
    $gods{"enemy"}->{ "debuffs" } = +{ };

    while ( both_up() ) {

        add_buff_stack( "self", "heartseeker" );
        refresh_buff_time( "self", "heartseeker" );
        $gods{"enemy"}->{"current_health"} -= get_aa_damage("self");

        $time++;

    } # END SINGLE ITERATION LOOP

    $iteration++;

} # END MAIN LOOP





print Dumper(%base_stats);
print "\n\n\n\n";
print Dumper(%ability_stats);
print "\n\n\n\n";
print Dumper(%gods);
print "\n\n\n\n";
print "AA damage " . get_aa_damage("self") . "\n";

